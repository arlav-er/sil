<!-- ===================================================================================== 
	PATTO / ACCORDO ===================================================================================== -->


<!-- *********** TODO -->
<STATEMENT name="GET_UltimoPattoLav"
	query="
		SELECT DISTINCT pt.prgpattolavoratore, pt.cdnlavoratore,
                pt.prgdichdisponibilita, nvl(pt.codcodificapatto, 'PT297') as codcodificapatto,
                TO_CHAR (pt.datstipula, 'dd/mm/yyyy') AS datstipula, TO_CHAR (pt.datstipulaorig, 'dd/mm/yyyy') AS datstipulaorig,
                pt.codstatoatto, pt.prgstatooccupaz, pt.flgcomunicazesiti,
                pt.codmotivofineatto,
                TO_CHAR (pt.datscadconferma,
                         'dd/mm/yyyy') AS datscadconferma,
                TO_CHAR (pt.datfine, 'dd/mm/yyyy') AS datfine, pt.strnote,
                pt.cdnutins,
                TO_CHAR (pt.dtmins, 'dd/mm/yyyy hh24:mi') AS dtmins,
                TO_CHAR (pt.dtmins, 'dd/mm/yyyy hh24:mi') AS dtminsora,
                pt.cdnutmod,
                TO_CHAR (pt.dtmmod, 'dd/mm/yyyy hh24:mi') AS dtmmod,
                TO_CHAR (pt.dtmmod, 'dd/mm/yyyy hh24:mi') AS dtmmodora,
                pt.numklopattolavoratore, 
                nvl(pt.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) as flgpatto297,
                de_codifica_patto.strdescrizione strdescrizionepatto,
                case   	   
       			    when nvl(pt.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'S'
       			         	then 'PT297'	     
       			    else 'ACLA'
       			end as tipoDocPatto,
                TO_CHAR (pt.datultimoprotocollo,
                         'dd/mm/yyyy'
                        ) datultimoprotocollo,
                (cpi_.strdescrizione || ' - ' || cpi_.codcpi) AS desccpi,
                ts_.strcognome AS cognins, ts_.strnome nomins,
                ts_utentemod.strcognome cognmod, ts_utentemod.strnome nommod,
                an.strcognome, an.strnome, an.strcodicefiscale,
                TO_CHAR (dispo.datdichiarazione,
                         'dd/mm/yyyy'
                        ) AS datdichiarazione,
                dispo.codstatoatto AS codstatoattodid,
                TO_CHAR (ea.datinizio, 'dd/mm/yyyy') AS datinizio,
                dso_.strdescrizione AS descrizionestato,
                pt.codtipopatto, pt.codservizio, pt.strnoteformprof, pt.numindicesvantaggio, pt.numindicesvantaggio2,
                pt.strindicesvantaggioold, TO_CHAR (pt.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                pt.codVCHProfiling, pt.decDoteProcessoAssegnato, pt.decDoteProcessoResidua, pt.decDoteRisultatoAssegnato, pt.decDoteRisultatoResidua,
                pt.prglavoratoreprofilo, pt.importoar, TO_CHAR (pt.DATANASPI, 'dd/mm/yyyy') AS datNaspi, pt.strnoteattivazione,
                pt.NUMINDICESVANTAGGIO150, TO_CHAR (pt.DATRIFERIMENTO150, 'dd/mm/yyyy') AS DATRIFERIMENTO150,
                pt.CODSEDE as codSedeEnte, pt.STRENTECODICEFISCALE as cfEnte, ente.STRDENOMINAZIONE as ragSocEnte, ente.STRINDIRIZZO as indirizzoEnte, 
                ente.strTel as strTelEnte, de_comune.strdenominazione as comuneEnte, pt.Strnotaente,De_Provincia.Strtarga,
                TO_CHAR(pt.NUMPROFILING) AS NUMPROFILING, 
                (case when to_number(nvl(
			           (select num from ts_config_loc where codtipoconfig = 'PROF_150' 
			           and strcodrif = (select codprovinciasil from ts_generale where prggenerale=1)), 0)) > 0 then 
			             de_profiling_150.strprofiling
			       else ''
			    end) as strprofiling,
			     pt.STRCODABIPORTALE,  TO_CHAR (pt.DTMINVIOPORTALE, 'dd/mm/yyyy hh24:mi:ss') AS DTMINVIOPORTALE,
                 TO_CHAR (pt.DTMACCETTAZIONE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMACCETTAZIONE,
                 pt.STRTIPOACCETTAZIONE, pt.CODMONOACCETTAZIONE,  pt.FLGPATTOONLINE,
                 TO_CHAR (pt.DTMULTIMASTAMPA, 'dd/mm/yyyy  hh24:mi:ss') AS DTMULTIMASTAMPA ,pt.FLGREINVIOPTONLINE
          FROM am_patto_lavoratore pt,
                an_lavoratore an,
                am_elenco_anagrafico ea,
                am_dich_disponibilita dispo,
                /* an_lav_storia_inf_coll sc_, */
                /*  an_lav_storia_inf st_, */
                de_cpi cpi_,
                ts_utente ts_,
                ts_utente ts_utentemod,
                am_stato_occupaz so_,
                de_stato_occupaz dso_,
                de_stato_occupaz_ragg dsor_,
                de_codifica_patto, 
                an_vch_ente ente,
                de_comune,
                De_Provincia,
                de_profiling_150
          WHERE pt.datfine IS NULL
                 AND an.cdnlavoratore = pt.cdnlavoratore 
                 /* AND (ea.prgelencoanagrafico = sc_.strchiavetabella(+)) */
                 /* AND (sc_.codlsttab IS NULL OR sc_.codlsttab = 'EA') */
                 /* AND (sc_.prglavstoriainf = st_.prglavstoriainf(+)) */
                 /*	and st_.cdnlavoratore = ea.cdnlavoratore*/
				 AND ea.prgelencoanagrafico(+) = dispo.prgelencoanagrafico
                 /* and ea.cdnlavoratore = pt.cdnlavoratore /*
                 /* and st_.DATFINE is null */
                 AND cpi_.codcpi = pt.codcpi
                 AND pt.cdnutins = ts_.cdnut
                 AND pt.cdnutmod = ts_utentemod.cdnut
                 AND dispo.prgdichdisponibilita(+) = pt.prgdichdisponibilita
                 AND pt.prgstatooccupaz = so_.prgstatooccupaz(+)
                 AND so_.codstatooccupaz = dso_.codstatooccupaz(+)
                 AND dso_.codstatooccupazragg = dsor_.codstatooccupazragg(+)
                 AND pt.codcodificapatto = de_codifica_patto.codcodificapatto(+)
                 AND pt.CODSEDE = ente.CODSEDE(+) 
                 AND pt.STRENTECODICEFISCALE = ente.STRCODICEFISCALE(+)
                 AND ente.codcom = de_comune.codcom(+)
                 AND de_comune.Codprovincia = de_provincia.Codprovincia(+)
                 AND pt.numProfiling = de_profiling_150.numProfiling(+)
                 AND an.cdnlavoratore = ?
                " />


<STATEMENT name="GET_PattoLav"
	query="SELECT DISTINCT  am_.prgpattolavoratore,
                                    am_.cdnlavoratore,
                                    am_.prgdichdisponibilita,
                                    to_char(am_.datstipula , 'dd/mm/yyyy') as datstipula, TO_CHAR (am_.datstipulaorig, 'dd/mm/yyyy') AS datstipulaorig,
                                    am_.codstatoatto,
                                    am_.prgstatooccupaz,
                                    am_.flgcomunicazesiti,
                                    am_.codmotivofineatto,
                                    to_char(am_.datscadconferma , 'dd/mm/yyyy') as datscadconferma,
                                    to_char(am_.datfine , 'dd/mm/yyyy') as datfine,
                                    am_.strnote,
                                    am_.cdnutins,
                                    to_char(am_.dtmins , 'dd/mm/yyyy') as dtmins,
                                    am_.cdnutmod,
                                    to_char(am_.dtmmod , 'dd/mm/yyyy') as dtmmod,
                                    to_char(am_.dtmmod,  'dd/mm/yyyy hh24:mi') as dtmmodora, 
                                    to_char(am_.dtmins,  'dd/mm/yyyy hh24:mi') as dtminsora,
                                    am_.numklopattolavoratore,
                                    nvl(am_.codcodificapatto, 'PT297') as codcodificapatto,
                                    nvl(am_.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) as flgpatto297,
                                    de_codifica_patto.strdescrizione strdescrizionepatto,
                                    case   	   
					       			    when nvl(am_.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'S'
					       			         	then 'PT297'	     
					       			    else 'ACLA'
					       			end as tipoDocPatto,
                                    to_char(am_.DATULTIMOPROTOCOLLO,'dd/mm/yyyy') DATULTIMOPROTOCOLLO,
                                    cpi_.strdescrizione,
                                    (cpi_.strdescrizione || ' - ' || cpi_.codcpi) as descCPI,
                                    ts_.strcognome as CognIns,
                                    ts_.strnome NomIns,
                                    ts_utentemod.strcognome CognMod,
                                    ts_utentemod.strnome NomMod,
                                    an.strcognome,
                                    an.strnome,
                                    an.strcodicefiscale,
                                    to_char(dispo.datDichiarazione , 'dd/mm/yyyy') as datDichiarazione,
                                    dispo.codStatoAtto as codStatoAttoDid,
                                    to_char(am.datInizio , 'dd/mm/yyyy') as DATINIZIO,
                                    dso_.strdescrizione as DESCRIZIONESTATO,
                  					am_.codTipoPatto, am_.codServizio, am_.strnoteformprof,
                  					am_.numindicesvantaggio, am_.numindicesvantaggio2, am_.strindicesvantaggioold, TO_CHAR (am_.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                  					am_.codVCHProfiling, am_.decDoteProcessoAssegnato, am_.decDoteProcessoResidua, am_.decDoteRisultatoAssegnato, am_.decDoteRisultatoResidua,
                  					am_.prglavoratoreprofilo, am_.importoar, TO_CHAR (am_.DATANASPI, 'dd/mm/yyyy') AS datNaspi, am_.strnoteattivazione,
                  					am_.NUMINDICESVANTAGGIO150, TO_CHAR (am_.DATRIFERIMENTO150, 'dd/mm/yyyy') AS DATRIFERIMENTO150,
                  					am_.CODSEDE as codSedeEnte, am_.STRENTECODICEFISCALE as cfEnte, ente.STRDENOMINAZIONE as ragSocEnte,
               						ente.STRINDIRIZZO as indirizzoEnte, ente.strTel as strTelEnte, de_comune.strdenominazione as comuneEnte, am_.Strnotaente,De_Provincia.Strtarga,
               						TO_CHAR(am_.NUMPROFILING)  AS NUMPROFILING, 
               						(case when to_number(nvl(
								           (select num from ts_config_loc where codtipoconfig = 'PROF_150' 
								           and strcodrif = (select codprovinciasil from ts_generale where prggenerale=1)), 0)) > 0 then 
								             de_profiling_150.strprofiling
								       else ''
								    end) as strprofiling,
								     am_.STRCODABIPORTALE,  TO_CHAR (am_.DTMINVIOPORTALE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMINVIOPORTALE,
                					 TO_CHAR (am_.DTMACCETTAZIONE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMACCETTAZIONE,
               						  am_.STRTIPOACCETTAZIONE, am_.CODMONOACCETTAZIONE, am_.FLGPATTOONLINE,
                 					TO_CHAR (am_.DTMULTIMASTAMPA, 'dd/mm/yyyy  hh24:mi:ss') AS DTMULTIMASTAMPA ,am_.FLGREINVIOPTONLINE
                               FROM am_patto_lavoratore am_,
                                    an_lavoratore AN,
                                    am_elenco_anagrafico AM,
                                    AM_dich_disponibilita dispo,
                                    an_lav_storia_inf_coll sc_,
                                    an_lav_storia_inf st_,
                                    de_cpi CPI_,
                                    ts_utente ts_,
                                    ts_utente ts_utentemod,
                                    am_stato_occupaz so_,
                                    de_stato_occupaz dso_,
                                    de_stato_occupaz_ragg dsor_,
                                    de_codifica_patto,
                                    an_vch_ente ente,
                					de_comune,
                					De_Provincia,
                					de_profiling_150
                            WHERE ((am_.datFine is null)AND
                                   (an.cdnlavoratore = am_.cdnlavoratore)AND
                                   (AM.prgelencoanagrafico(+) = dispo.prgelencoanagrafico) AND
                                   (am.prgElencoAnagrafico = sc_.strChiaveTabella(+))AND
                                   (sc_.codLstTab is null or sc_.codLstTab = 'EA')AND
                                   (sc_.prgLavStoriaInf = st_.prgLavStoriaInf(+))AND
                                   (CPI_.codCPI = am_.codCPI)AND
                                   (am_.cdnUtIns = ts_.cdnut)AND
                                   (am_.cdnUtMod = ts_utentemod.cdnut)AND
                                   (dispo.prgdichdisponibilita(+) = am_.prgdichdisponibilita)AND
                                   (am_.prgStatoOccupaz = so_.prgstatooccupaz(+))AND
                                   (so_.codstatooccupaz = dso_.codstatooccupaz(+))AND
                                   (dso_.codstatooccupazragg = dsor_.codstatooccupazragg(+))AND
                                   (am_.codcodificapatto = de_codifica_patto.codcodificapatto(+))AND
                                   (am_.CODSEDE = ente.CODSEDE(+)) AND 
                 				   (am_.STRENTECODICEFISCALE = ente.STRCODICEFISCALE(+)) AND
                 				   (ente.codcom = de_comune.codcom(+)) AND
                 				   (de_comune.Codprovincia = de_provincia.Codprovincia(+)) AND
                 				   (am_.numProfiling = de_profiling_150.numProfiling(+)) AND
                 				    (am_.prgPattoLavoratore = ?)     
                            ) " />


<STATEMENT name="UPDATE_PATTOLAV"
	query="UPDATE AM_PATTO_LAVORATORE
               SET
                datStipula=TO_DATE(?,'DD/MM/YYYY'),                                                   
                codStatoAtto=?,
                DATSCADCONFERMA=TO_DATE(?,'DD/MM/YYYY'),                                 
                DATFINE=
                (CASE
					WHEN TO_DATE(?,'DD/MM/YYYY') &lt; TRUNC(DATSTIPULA) THEN DATSTIPULA
					ELSE TO_DATE(?,'DD/MM/YYYY')
				END),
                codMotivoFineAtto =	?,
                strNote=?,
                NUMKLOPATTOLAVORATORE= ?,
                CODSERVIZIO = ?,
                CODTIPOPATTO = ?,
                CDNUTMOD = ?,
                NUMINDICESVANTAGGIO = ?,
                NUMINDICESVANTAGGIO2 = ?,
                DATRIFERIMENTO = TO_DATE(?,'DD/MM/YYYY'),
                DTMMOD = SYSDATE, codVCHProfiling = ?, 
                decDoteProcessoAssegnato = to_number(?,'999999999.99'), decDoteProcessoResidua = to_number(?,'999999999.99'), 
                decDoteRisultatoAssegnato = to_number(?,'999999999.99'), decDoteRisultatoResidua = to_number(?,'999999999.99'),
                prglavoratoreprofilo = to_number(?),
                DATANASPI = TO_DATE(?,'DD/MM/YYYY'),IMPORTOAR = to_number(?,'99999999.99'), STRNOTEATTIVAZIONE = ?,
                NUMINDICESVANTAGGIO150 = to_number(?,'9.999999999'), DATRIFERIMENTO150 = TO_DATE(?,'DD/MM/YYYY'),
                CODSEDE = ?, STRENTECODICEFISCALE = ?, STRNOTAENTE = ?, 
                NUMPROFILING = to_number(?), STRCODABIPORTALE =REPLACE(?,'-',''), FLGPATTOONLINE =?
               WHERE 
                PRGPATTOLAVORATORE=?" />



<STATEMENT name="GET_NEW_PATTOLAV"
	query="SELECT s_am_patto_lavoratore.nextval as prgPattoLavoratore from dual" />


<STATEMENT name="INSERT_PATTOLAV"
	query="
              INSERT INTO AM_PATTO_LAVORATORE (
					prgPattoLavoratore,
					codCpi, cdnLavoratore,
					prgDichDisponibilita,
					datStipula, codStatoAtto,
					prgStatoOccupaz, 
					flgComunicazEsiti,
					codMotivoFineAtto,
					datScadConferma, datFine, 
					strNote, flgpatto297,
					cdnUtIns, dtmIns, 
					cdnUtMod, dtmMod, codTipoPatto,CODSERVIZIO, NUMINDICESVANTAGGIO, NUMINDICESVANTAGGIO2, DATRIFERIMENTO, CODCODIFICAPATTO,
					codVCHProfiling, decDoteProcessoAssegnato, decDoteProcessoResidua, decDoteRisultatoAssegnato, decDoteRisultatoResidua, prglavoratoreprofilo,
					DATANASPI,IMPORTOAR , STRNOTEATTIVAZIONE, NUMINDICESVANTAGGIO150, DATRIFERIMENTO150,CODSEDE, STRENTECODICEFISCALE, STRNOTAENTE, NUMPROFILING,
					STRCODABIPORTALE, FLGPATTOONLINE
			  )
              VALUES( to_number(?),?,?,?,
                      TO_DATE(?,'DD/MM/YYYY'), 
                      ?,?,?,?,
                      TO_DATE(?,'DD/MM/YYYY'),                                     
                      TO_DATE(?,'DD/MM/YYYY'), 
                      ?,?,
                      ?,SYSDATE,
                      ?,SYSDATE, ?, ?, ?, ?, TO_DATE(?,'DD/MM/YYYY'), ?,
                      ?, to_number(?,'999999999.99'), to_number(?,'999999999.99'), to_number(?,'999999999.99'), to_number(?,'999999999.99'), to_number(?),
                      TO_DATE(?,'DD/MM/YYYY'), to_number(?,'99999999.99'), ? , to_number(?,'9.999999999'), TO_DATE(?,'DD/MM/YYYY'),?,?,?,                  
                      (SELECT NUMPROFILING FROM DE_PROFILING_150 WHERE to_number(?,'9.9999999999') BETWEEN FASCIA_DA AND FASCIA_A),REPLACE(?,'-',''), ?
                     )
" />


<STATEMENT name="INSERT_PATTOAZIENDA"
	query="
              INSERT INTO AM_UA_PATTO (
					prgPattoUnitaAzienda,
					codCpi, 
          prgAzienda,
          prgUnita,
					datStipula,
          datScadConferma,
					codMotivoFineAtto,
					datFine, 
          codStatoAtto, 
          strNote, 
          cdnUtIns, 
          dtmIns, 
					cdnUtMod,
          dtmMod 

			  )
              VALUES( S_AM_UA_PATTO.NEXTVAL,
                      '081300100',
                      ?,
                      '1',
                      TO_DATE(?,'DD/MM/YYYY'), 
                      TO_DATE(?,'DD/MM/YYYY'), 
                      ?,
                      TO_DATE(?,'DD/MM/YYYY'), 
                      ?,
                      ?,
                      ?,
                      SYSDATE,
                      ?,
                      SYSDATE
                     )
" />


<!-- decodifica dello stato atto nel patto -->
<STATEMENT name="PATTO_GET_Stato_Atto"
	query=" select dsa_.codstatoatto codice, dsa_.strdescrizione as descrizione
                  from de_stato_atto dsa_, de_stato_atto_lst_tab dsat_
                 where dsa_.codStatoAtto =  dsat_.codStatoAtto
                   and dsat_.codLstTab   =  'AM_PAT_L'
                 order by 2" />


<STATEMENT name="PATTO_GET_Stato_Atto_Azienda"
	query=" select dsa_.codstatoatto codice, dsa_.strdescrizione as descrizione
                  from de_stato_atto dsa_, de_stato_atto_lst_tab dsat_
                 where dsa_.codStatoAtto =  dsat_.codStatoAtto
                   and dsat_.codLstTab   =  'AM_PAT_U'
                 order by 2" />

<STATEMENT name="PATTO_GET_DE_MOT_FINEATTO"
	query="
               SELECT de_.codmotivofineatto AS CODICE,
                      de_.strdescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, de_.DATINIZIOVAL, de_.DATFINEVAL), '(scaduto)',
                      LEAST(SYSDATE, de_.DATINIZIOVAL, de_.DATFINEVAL),'(scaduto)', '') AS DESCRIZIONE,
                      del_.codlsttab
               FROM de_motivo_fine_atto de_, de_mot_fine_atto_lst_tab del_
               wHERE de_.codmotivofineatto = del_.codmotivofineatto
               	  AND trunc(sysdate) between trunc(del_.DATINIZIOVAL) and trunc(del_.DATFINEVAL)
                  AND del_.codlsttab = 'AM_PAT_L' ORDER BY de_.strdescrizione
" />

<STATEMENT name="PATTO_GET_DE_MOT_FINEATTO_AZIENDA"
	query="
               SELECT de_.codmotivofineatto AS CODICE,
                      de_.strdescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, de_.DATINIZIOVAL, de_.DATFINEVAL), '(scaduto)',
                      LEAST(SYSDATE, de_.DATINIZIOVAL, de_.DATFINEVAL),'(scaduto)', '') AS DESCRIZIONE,
                      del_.codlsttab
               FROM de_motivo_fine_atto de_, de_mot_fine_atto_lst_tab del_
               WHERE de_.codmotivofineatto = del_.codmotivofineatto
               	  AND trunc(sysdate) between trunc(del_.DATINIZIOVAL) and trunc(del_.DATFINEVAL)
                  AND del_.codlsttab = 'AM_PAT_U'
" />



<STATEMENT name="PATTO_GET_INFCORR"
	query="
            SELECT distinct
                  si.CODCPITIT,
                  cpi.STRDESCRIZIONE CPItitolare,
                  ea.prgElencoAnagrafico,
                  to_char(ea.datInizio,'DD/MM/YYYY') AS datInizio,
                  so.prgStatoOccupaz,
                  did.codStatoAtto as codStatoAttoDid,
                  deso.strDescrizione as DescrizioneStato,
                  desor.codStatoOccupazRagg,
                  did.prgDichDisponibilita,
                  to_char(did.datDichiarazione,'DD/MM/YYYY') AS datDichiarazione
			from 
				AN_LAV_STORIA_INF si 
				left join DE_CPI cpi                    on (si.CODCPITIT = cpi.CODCPI)		
				left join  AM_ELENCO_ANAGRAFICO ea      on (si.cdnLavoratore = ea.cdnLavoratore and ea.datcan is null)
				left join  am_dich_disponibilita did    on (did.prgElencoAnagrafico = ea.prgElencoAnagrafico 
				                                            AND did.datFine is null AND did.CODSTATOATTO = 'PR')
				left join AM_STATO_OCCUPAZ so           on (so.cdnLavoratore = si.cdnLavoratore)
				left join DE_STATO_OCCUPAZ deso         on (so.codStatoOccupaz = deso.codStatoOccupaz)
				left join DE_STATO_OCCUPAZ_RAGG desor   on (deso.CodStatoOccupazRagg = desor.codStatoOccupazRagg)
			where so.datFine is null
				AND si.cdnLavoratore =  ?
				AND si.datfine is null
" />


<STATEMENT name="GET_INFO_PER_ACC_GEN"
	query="
            SELECT so.prgStatoOccupaz, to_char(so.datinizio, 'dd/mm/yyyy') datainizioso,
                  desor.codStatoOccupazRagg,
                  deso.strDescrizione as DescrizioneStato
            FROM AM_STATO_OCCUPAZ so
            	 inner join DE_STATO_OCCUPAZ deso on (so.codStatoOccupaz = deso.codStatoOccupaz)
                 inner join DE_STATO_OCCUPAZ_RAGG desor on (deso.CodStatoOccupazRagg = desor.codStatoOccupazRagg)
            WHERE so.cdnLavoratore = ? AND so.datFine is null order by so.datinizio desc
" />


<!-- dovrebbe restituire un solo stato occupazionale, in caso contrario li 
	ordina per data inizio e inserimento -->
<STATEMENT name="GET_STATO_OCC_ALLA_STIPULA_ACCORDO"
	query="
            SELECT so.prgStatoOccupaz,
                  desor.codStatoOccupazRagg,
                  deso.strDescrizione as DescrizioneStato
            FROM AM_STATO_OCCUPAZ so
            	 inner join DE_STATO_OCCUPAZ deso on (so.codStatoOccupaz = deso.codStatoOccupaz)
                 inner join DE_STATO_OCCUPAZ_RAGG desor on (deso.CodStatoOccupazRagg = desor.codStatoOccupazRagg)
                 inner join AM_PATTO_LAVORATORE on (AM_PATTO_LAVORATORE.cdnLavoratore = so.cdnLavoratore)
            WHERE so.cdnLavoratore = ? AND AM_PATTO_LAVORATORE.datfine IS NULL
            	AND trunc(AM_PATTO_LAVORATORE.datstipula) 
            		between trunc(so.datinizio) and trunc(nvl(so.datfine, sysdate))
            order by so.datinizio desc, so.dtmins desc
" />



<!-- ===================================================================================== 
	ELENCO ANAGRAFICO ===================================================================================== -->

<!-- query utilizzata per accedere al dettaglio di elenco angrafico, quando 
	si arriva dalla lista dei lavoratoi pres nell'elenco anagrafico. In questo 
	viene passato il parametro chiave prgElencoAnagrafico. La query E' utilizzata 
	sia nel passagggio dalla lista al dettaglio dell'informazione (anche nella 
	lista delle informazioni storiche), sia in refresh dopo l'inserimento di 
	un nuovo record -->
<STATEMENT name="GET_ELANAG"
	query="SELECT am_.prgelencoanagrafico,
                          /*am_.cdnlavoratore,*/ 
                          to_char(am_.datinizio, 'dd/mm/yyyy') as datinizio,
                          am_.strnote,
                          to_char(am_.datcan, 'dd/mm/yyyy') as dtmcan,
                          am_.codtipocan, 
                          am_.cdnutins,
                          to_char(am_.dtmins,  'dd/mm/yyyy hh24:mi') as dtmins,
                          am_.cdnutmod,
                          to_char(am_.dtmmod,  'dd/mm/yyyy hh24:mi') as dtmmod,
                          am_.numkloelencoanag, 
                          /*an_.strcodicefiscale, 
                          an_.strcognome,
                          an_.strnome,*/
                          tsu1.strCognome as CognIns,
                          tsu1.strNome as NomIns,				   
                          tsu2.strCognome as CognMod,
                          tsu2.strNome as NomMod,
                          CPI_.codCPI as codCPI, 
                          CPI_.strdescrizione as descCPI,
                          st_.prgLavStoriaInf as PRGINSERTCOLL/*,
            						  to_char(an_.DATNASC, 'dd/mm/yyyy') as DATNASC*/
                     FROM am_elenco_anagrafico am_, 
                          /*an_lavoratore an_,*/
                          ts_utente tsu1,
                          ts_utente tsu2,
                          an_lav_storia_inf_coll  sc_,
                          an_lav_storia_inf st_,
                          de_cpi CPI_				             
                  WHERE (     /*(am_.cdnlavoratore = an_.cdnlavoratore) 
                          AND*/ (am_.datcan is null)
                          AND (am_.cdnUtIns = tsu1.cdnut)
                          AND (am_.cdnUtMod = tsu2.cdnut)
                          AND (am_.prgElencoAnagrafico = sc_.strChiaveTabella)
                          AND (sc_.codLstTab = 'EA')
                          AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
                          AND (CPI_.codCPI(+) = st_.codCPITit))
                          AND (am_.prgElencoAnagrafico=?)
" />

<STATEMENT name="GET_DIDINPS_STMT"
	query="SELECT 
CDNLAVORATORE, CDNUTINS, CDNUTMOD, 
   DECODE(CODMONOTIPOOPERAZIONE, 'D', 'Cancellazione','I', 'Inserimento','U','Modifica', CODMONOTIPOOPERAZIONE) AS CODMONOTIPOOPERAZIONE  , 
   CODUNIVOCO, 
   to_char(DATDICHIARAZIONE, 'dd/mm/yyyy') AS DATDICHIARAZIONE, 
   to_char(DATINIZIOATTSUB, 'dd/mm/yyyy') AS DATINIZIOATTSUB, 
   to_char(DATINIZIODISOCUPAZ, 'dd/mm/yyyy') AS DATINIZIODISOCUPAZ, 
   to_char(DATINVIO, 'dd/mm/yyyy') AS DATINVIO, 
   to_char(DATRICEZIONE, 'dd/mm/yyyy') AS DATRICEZIONE, DECREDDITOLAVORO, 
   DECREDDITOPREVISTO, 
   to_char(DTMINS, 'dd/mm/yyyy hh24:Mi') AS DTMINS,
   to_char(DTMMOD, 'dd/mm/yyyy hh24:Mi') AS DTMMOD, NUMKLODIDINPS, 
   PRGDIDINPS, STRAZCODICEFISCALE, amdid.STRCELLULARE, 
   STRCODICEFISCALELAV, STRCOMUNICAZIONE, amdid.STRDENOMINAZIONE, 
   amdid.STREMAIL, STRPROTOCOLLOINPS, amdid.STRTELEFONO, 
   STRULTIMAQUALIFICA, dcpi.STRDESCRIZIONE AS DENOMINAZIONECPI,
   amdid.STRCOGNOME, amdid.STRNOME, amdid.STRCITTADINANZA,
   amdid.STRINDIRIZZODOM, amdid.STRCAPDOM, amdid.STRCOMUNEDOM, amdid.STRPROVINCIADOM,
   amdid.STREMAILPATRONATO, to_char(amdid.DATINIZIOATTSUBORD, 'dd/mm/yyyy') AS DATINIZIOATTSUBORD,
   to_char(amdid.DATINIZIOATTAUTONOMA, 'dd/mm/yyyy') AS DATINIZIOATTAUTONOMA, amdid.DECREDDITOAUTONOMO,
   to_char(amdid.DATINIZIOATTACCESSORIA, 'dd/mm/yyyy') AS DATINIZIOATTACCESSORIA, amdid.DECREDDITOACCESSORIO
    FROM AM_DID_INPS amdid
        LEFT JOIN DE_CPI dcpi ON dcpi.CODCPI = CODUNIVOCO
    WHERE PRGDIDINPS = ?
" />


<STATEMENT name="HAS_DIDINPS_STMT"
    query="SELECT 
    CDNLAVORATORE, PRGDIDINPS,STRCOMUNICAZIONE, STRCODICEFISCALELAV,to_char(DATDICHIARAZIONE, 'dd/mm/yyyy') AS DATDICHIARAZIONE,
    DECODE(CODMONOTIPOOPERAZIONE, 'D', 'Cancellazione','I', 'Inserimento','U','Modifica', CODMONOTIPOOPERAZIONE) AS CODMONOTIPOOPERAZIONE
    FROM AM_DID_INPS WHERE STRCODICEFISCALELAV = ? ORDER BY DATDICHIARAZIONE DESC, PRGDIDINPS DESC" />

<STATEMENT name="HAS_DIDINPS_STMT_BYCDNLAV"
    query="SELECT 
    CDNLAVORATORE, PRGDIDINPS,STRCOMUNICAZIONE, STRCODICEFISCALELAV,to_char(DATDICHIARAZIONE, 'dd/mm/yyyy') AS DATDICHIARAZIONE,
    DECODE(CODMONOTIPOOPERAZIONE, 'D', 'Cancellazione','I', 'Inserimento','U','Modifica', CODMONOTIPOOPERAZIONE) AS CODMONOTIPOOPERAZIONE
    FROM AM_DID_INPS WHERE CDNLAVORATORE = ?" />


<!--10/09/04 Recupera il record per l'elenco anagrafico chiuso -->
<STATEMENT name="GET_ELANAG_STORICO"
	query="SELECT am_.prgelencoanagrafico,
                          to_char(am_.datinizio, 'dd/mm/yyyy') as datinizio,
                          am_.strnote,
                          to_char(am_.datcan, 'dd/mm/yyyy') as dtmcan,
                          am_.codtipocan, 
                          am_.cdnutins,
                          to_char(am_.dtmins,  'dd/mm/yyyy hh24:mi') as dtmins,
                          am_.cdnutmod,
                          to_char(am_.dtmmod,  'dd/mm/yyyy hh24:mi') as dtmmod,
                          am_.numkloelencoanag, 
                          tsu1.strCognome as CognIns,
                          tsu1.strNome as NomIns,				   
                          tsu2.strCognome as CognMod,
                          tsu2.strNome as NomMod,
                          CPI_.codCPI as codCPI, 
                          CPI_.strdescrizione as descCPI,
                          st_.prgLavStoriaInf as PRGINSERTCOLL/*,
            						  to_char(an_.DATNASC, 'dd/mm/yyyy') as DATNASC*/
                     FROM am_elenco_anagrafico am_, 
                          ts_utente tsu1,
                          ts_utente tsu2,
                          an_lav_storia_inf_coll  sc_,
                          an_lav_storia_inf st_,
                          de_cpi CPI_				             
                  WHERE ( (am_.datcan is not null)
                          AND (am_.cdnUtIns = tsu1.cdnut)
                          AND (am_.cdnUtMod = tsu2.cdnut)
                          AND (am_.prgElencoAnagrafico = sc_.strChiaveTabella)
                          AND (sc_.codLstTab = 'EA')
                          AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
                          AND (CPI_.codCPI(+) = st_.codCPITit))
                          AND (am_.prgElencoAnagrafico=?)
" />


<!-- Query utilizzata per accedere al dettaglio di elenco angrafico: in questo 
	caso non si conosce il parametro chiave prgElencoAnagrafico, per cui si accede 
	all'ultimo record valido (data finale nulla) a partire dal cdnLavoratore 
	La query e' utilizzata per accedere al dettaglio dell'informazione se non 
	si passsa per la lista perche'si e' gia' all'interno del menu' dello specifico 
	soggetto (cdnLavoratore) -->

<!-- 14/06/2004 Sostituito dalla query sottostante che estrae il prgelencoanagrafico 
	se c'è con datcan null per velocizzare la selezione -->
<STATEMENT name="GET_ULTIMOELANAG"
	query="SELECT am_.prgelencoanagrafico, 
                          am_.cdnlavoratore, 
                          to_char(am_.datinizio, 'dd/mm/yyyy') as datinizio,
                          am_.strnote,
                          to_char(am_.datcan, 'dd/mm/yyyy') as dtmcan,
                          am_.codtipocan, 
                          am_.cdnutins,
                          to_char(am_.dtmins,  'dd/mm/yyyy') as dtmins,
                          am_.cdnutmod,
                          to_char(am_.dtmmod,  'dd/mm/yyyy') as dtmmod,
                          am_.numkloelencoanag, 
                          an_.strcodicefiscale, 
                          an_.strcognome,
                          an_.strnome,
                          tsu1.strCognome as CognIns,
                          tsu1.strNome as NomIns,				   
                          tsu2.strCognome as CognMod,
                          tsu2.strNome as NomMod,
                          CPI_.codCPI as codCPI, 
                          CPI_.strdescrizione as descCPI,
                          st_.prgLavStoriaInf as PRGINSERTCOLL,
                          st_.CODCPITIT
                     FROM am_elenco_anagrafico am_, 
                          an_lavoratore an_,
                          ts_utente tsu1,
                          ts_utente tsu2,
                          an_lav_storia_inf_coll  sc_,
                          an_lav_storia_inf st_,
                          de_cpi CPI_				             
                  WHERE ((am_.cdnlavoratore = an_.cdnlavoratore) 
                     AND (am_.datcan is null)
                     AND (am_.cdnUtIns = tsu1.cdnut)
                     AND (am_.cdnUtMod = tsu2.cdnut)
                     AND (am_.prgElencoAnagrafico = sc_.strChiaveTabella)
                     AND (sc_.codLstTab = 'EA')
                     AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
                     AND (CPI_.codCPI(+) = st_.codCPITit))
                     AND (am_.cdnlavoratore = ?)
" />



<STATEMENT name="PATTO_HAS_STOR_ELANAG"
	query="SELECT  prgElencoAnagrafico 
            	   FROM am_elenco_anagrafico ea
				   WHERE ea.cdnlavoratore=?
				   AND ea.DATCAN is not null" />



<!-- ESTRAE IL PRGELENCOANAGRAFICO A PARTIRE DA CDNLAV -->
<STATEMENT name="GET_ULTIMOELANAG_DA_CDNLAV"
	query="select prgelencoanagrafico, to_char(datinizio, 'dd/mm/yyyy') datinizio,
				  to_char(datcan, 'dd/mm/yyyy') datcan, codtipocan	 	
                          from am_elenco_anagrafico 
                          where datcan is null
                          and cdnlavoratore = ?" />

<STATEMENT name="UPDATE_ELANAG"
	query="UPDATE AM_ELENCO_ANAGRAFICO
                SET datInizio=TO_DATE(?,'DD/MM/YYYY'),                   
                    datcan=TO_DATE(?,'DD/MM/YYYY'),                   
                    codtipocan=?,                  
                    strNote=?,
                    NUMKLOELENCOANAG= ?
              WHERE PRGELENCOANAGRAFICO=?" />

<STATEMENT name="GET_NEW_ELANAG"
	query="SELECT s_am_elenco_anagrafico.nextval as prgElencoAnagrafico from dual" />


<STATEMENT name="INSERT_ELANAG"
	query="INSERT INTO AM_ELENCO_ANAGRAFICO
                     (prgElencoAnagrafico,
                      cdnLavoratore,
                      datInizio,
                      strNote,
                      datcan,
                      codtipocan,
                      cdnUtins, dtmins,
                      cdnUtmod, dtmmod)                        
               VALUES( S_AM_ELENCO_ANAGRAFICO.NEXTVAL,
                       ?,
                       TO_DATE(?,'DD/MM/YYYY'), 
                       ?,
                       TO_DATE(?,'DD/MM/YYYY'), 
                       ?,
                       ?,SYSDATE, 
                       ?,SYSDATE
                       )
" />

<STATEMENT name="INSERT_ELANAG2"
	query="INSERT INTO AM_ELENCO_ANAGRAFICO
                     (prgElencoAnagrafico,
                      cdnLavoratore,
                      datInizio,
                      strNote,
                      datcan,
                      codtipocan,
                      cdnUtins, dtmins,
                      cdnUtmod, dtmmod)                        
               VALUES( ?,
                       ?,
                       TO_DATE(?,'DD/MM/YYYY'), 
                       ?,
                       TO_DATE(?,'DD/MM/YYYY'), 
                       ?,
                       ?,SYSDATE, 
                       ?,SYSDATE
                       )
" />

<STATEMENT name="EANAG_GET_CPI_CORR"
	query="SELECT si.prgLavStoriaInf,
                      si.CODCPITIT,
                      si.CODMONOTIPOCPI,
                      cpi.STRDESCRIZIONE CPItitolare     
                 FROM AN_LAV_STORIA_INF si, DE_CPI cpi
                WHERE si.CODCPITIT = cpi.CODCPI
                  AND si.datFine is null
                  AND si.cdnLavoratore = ?
" />

<!-- by Davide -->
<STATEMENT name="ELANAG_GET_DE_MOT_FINEATTO"
	query="SELECT de_.codmotivofineatto AS CODICE,
                      de_.strdescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, de_.DATINIZIOVAL, de_.DATFINEVAL), '(scaduto)',
                      LEAST(SYSDATE, de_.DATINIZIOVAL, de_.DATFINEVAL),'(scaduto)', '') AS DESCRIZIONE,
                      del_.codlsttab
                 FROM de_motivo_fine_atto de_, de_mot_fine_atto_lst_tab del_
                WHERE de_.codmotivofineatto = del_.codmotivofineatto
                  AND trunc(sysdate) between trunc(del_.DATINIZIOVAL) and trunc(del_.DATFINEVAL)
                  AND del_.codlsttab = 'EA'
" />

<!-- fine by Davide -->



<STATEMENT name="INSERT_COLL"
	query="INSERT INTO AN_LAV_STORIA_INF_COLL
                (prgLavStoriaInf,
                codLstTab,
                strChiaveTabella)
                VALUES( ?,'EA',? )
" />



<!-- ============================================================================================== 
	Dichiarazione di Disponibilità ============================================================================================== -->
<!-- 14/06/2004 SOSTITUITA CON GET_ULTIMO_AN_DISPO_DA_CDNLAV (CHE LEGGE SE 
	ESISTE IL PRGDICDISP) E GET_AN_DISPO PER VELOCIZZARE LA SELEZIONE -->
<STATEMENT name="GET_ULTIMO_AN_DISPO"
	query=" SELECT distinct AN.strnome,   
                           AN.strcognome,  
                           AN.cdnLavoratore,
                           dispo.prgdichDisponibilita, 				 
                           to_char(dispo.datdichiarazione, 'dd/mm/yyyy') as datdichiarazione,
                           dispo.prgelencoanagrafico,
                           dispo.codstatoAtto,
                           dispo.codTipoDichDisp,
                           dispo.codUltimoContratto,
                           dispo.prgStatoOccupaz,				 				 				 				 				 				                 
                           to_char(dispo.datScadConferma, 'dd/mm/yyyy') as datScadConferma,
                           to_char(dispo.datScadErogazServizi, 'dd/mm/yyyy') as datScadErogazServizi,   
                           dispo.strnote,
                           dispo.codMotivofineatto,
                           to_char(dispo.datFine, 'dd/mm/yyyy') as datFine ,				 				 				           
                           dispo.cdnUtIns,
                           to_char(dispo.dtmIns, 'dd/mm/yyyy') as  dtmIns,				  
                           dispo.cdnUtMod,           
                           to_char(dispo.dtmMod, 'dd/mm/yyyy') as  dtmMod,
                           dispo.numKloDichDisp,
                           to_char(AM.datInizio, 'dd/mm/yyyy') as  datInizio,
                           CPI_.codCPI as codCPI, 
                           CPI_.strdescrizione as descCPI,                          
                           dso_.codStatoOccupaz,
                           dso_.STRDESCRIZIONE AS DESCRIZIONESTATO,
                           dsor_.codStatoOccupazRagg,
						   /*to_char(cm.DATDATAINIZIO,'dd/mm/yyyy') as dataInizioCM,*/
						   null as dataInizioCM,						   
						   null as CODACCERTSANITARIO /* cm.CODACCERTSANITARIO */
                      FROM an_lavoratore AN, 
                           am_elenco_anagrafico AM, 
                           AM_dich_disponibilita dispo,
                           an_lav_storia_inf_coll  sc_,
                           an_lav_storia_inf st_,
                           de_cpi CPI_,
                           am_stato_occupaz aso_,
                           de_stato_occupaz dso_,
                           de_stato_occupaz_ragg dsor_
						   /*am_cm_iscr cm*/
                    WHERE (AN.cdnlavoratore = AM.cdnlavoratore) 
                      AND (AM.prgelencoanagrafico = dispo.prgelencoanagrafico)
                      and AM.prgelencoanagrafico = ( select ea.prgelencoanagrafico 
					                               from am_elenco_anagrafico  ea
					                             where ea.cdnlavoratore  = ?)
                      AND (am.prgElencoAnagrafico = sc_.strChiaveTabella)
                      AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
                      AND (st_.codCPITit = CPI_.codCPI(+))                      
                      AND dispo.prgStatoOccupaz=aso_.prgStatoOccupaz (+)
                      AND aso_.codStatoOccupaz = dso_.codStatoOccupaz(+)
                      AND dso_.codStatoOccupazRagg = dsor_.codStatoOccupazRagg(+)
					  /*and cm.CDNLAVORATORE(+) = an.CDNLAVORATORE*/
                      AND (sc_.codLstTab = 'EA')					  
                      AND dispo.datFine is null                       
					  /*and cm.DATDATAFINE is null */                      
                      /*ORDER BY  AN.strcognome, AN.strnome, AN.strcodicefiscale*/
" />
<STATEMENT name="GET_ULTIMO_AN_DISPO_PR"
	query=" SELECT distinct AN.strnome,   
                           AN.strcognome,  
                           AN.cdnLavoratore,
                           dispo.prgdichDisponibilita, 				 
                           to_char(dispo.datdichiarazione, 'dd/mm/yyyy') as datdichiarazione,
                           dispo.prgelencoanagrafico,
                           dispo.codstatoAtto,
                           dispo.codTipoDichDisp,
                           dispo.codUltimoContratto,
                           dispo.prgStatoOccupaz,				 				 				 				 				 				                 
                           to_char(dispo.datScadConferma, 'dd/mm/yyyy') as datScadConferma,
                           to_char(dispo.datScadErogazServizi, 'dd/mm/yyyy') as datScadErogazServizi,   
                           dispo.strnote,
                           dispo.codMotivofineatto,
                           to_char(dispo.datFine, 'dd/mm/yyyy') as datFine ,				 				 				           
                           dispo.cdnUtIns,
                           to_char(dispo.dtmIns, 'dd/mm/yyyy') as  dtmIns,				  
                           dispo.cdnUtMod,           
                           to_char(dispo.dtmMod, 'dd/mm/yyyy') as  dtmMod,
                           dispo.numKloDichDisp,
                           to_char(AM.datInizio, 'dd/mm/yyyy') as  datInizio,
                           CPI_.codCPI as codCPI, 
                           CPI_.strdescrizione as descCPI,                          
                           dso_.codStatoOccupaz,
                           dso_.STRDESCRIZIONE AS DESCRIZIONESTATO,
                           dsor_.codStatoOccupazRagg,
						   /*to_char(cm.DATDATAINIZIO,'dd/mm/yyyy') as dataInizioCM,*/
						   null as dataInizioCM,						   
						   null as CODACCERTSANITARIO /* cm.CODACCERTSANITARIO */
                      FROM an_lavoratore AN, 
                           am_elenco_anagrafico AM, 
                           AM_dich_disponibilita dispo,
                           an_lav_storia_inf_coll  sc_,
                           an_lav_storia_inf st_,
                           de_cpi CPI_,
                           am_stato_occupaz aso_,
                           de_stato_occupaz dso_,
                           de_stato_occupaz_ragg dsor_
						   /*am_cm_iscr cm*/
                    WHERE (AN.cdnlavoratore = AM.cdnlavoratore) 
                      AND (AM.prgelencoanagrafico = dispo.prgelencoanagrafico)
                      and AM.cdnLavoratore = ?
                      /*AM.prgelencoanagrafico = ( select ea.prgelencoanagrafico 
					                               from am_elenco_anagrafico  ea
					                             where ea.cdnlavoratore  = ?
					                             and ea.DATCAN is not null)*/
                      AND (am.prgElencoAnagrafico = sc_.strChiaveTabella)
                      AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
                      AND (st_.codCPITit = CPI_.codCPI(+))                      
                      AND dispo.prgStatoOccupaz=aso_.prgStatoOccupaz (+)
                      AND aso_.codStatoOccupaz = dso_.codStatoOccupaz(+)
                      AND dso_.codStatoOccupazRagg = dsor_.codStatoOccupazRagg(+)
					  /*and cm.CDNLAVORATORE(+) = an.CDNLAVORATORE*/
                      AND (sc_.codLstTab = 'EA')			
                      and dispo.codStatoAtto = 'PR'		  
                      AND dispo.datFine is null                       
					  /*and cm.DATDATAFINE is null */                      
                      /*ORDER BY  AN.strcognome, AN.strnome, AN.strcodicefiscale*/
" />
<STATEMENT name="GET_AN_DISPO"
	query="SELECT distinct AM.cdnLavoratore,
                           dispo.prgdichDisponibilita, 				 
                           to_char(dispo.datdichiarazione, 'dd/mm/yyyy') as datdichiarazione,
                           dispo.prgelencoanagrafico,
                           dispo.codstatoAtto,
                           dispo.codTipoDichDisp,
                           dispo.codUltimoContratto,
                           dispo.prgStatoOccupaz,				 				 				 				 				 				                 
                           to_char(dispo.datScadConferma, 'dd/mm/yyyy') as datScadConferma,
                           to_char(dispo.datScadErogazServizi, 'dd/mm/yyyy') as datScadErogazServizi,   
                           dispo.strnote,
                           dispo.codMotivofineatto,
                           to_char(dispo.datFine, 'dd/mm/yyyy') as datFine ,				 				 				           
                           dispo.cdnUtIns,
                           to_char(dispo.dtmIns, 'dd/mm/yyyy hh24:mi') as  dtmIns,				  
                           dispo.cdnUtMod,
                           dispo.CODMOTANNULLAMENTOATTO motivoannullamento, 
                           nvl(dispo.flgrischiodisoccupazione, 'N') as flgrischiodisoccupazione,
                           nvl(dispo.flglavoroautonomo, 'N') as flglavoroautonomo,
                           nvl(dispo.flgdidl68, 'N') as flgdidl68,
                           to_char(dispo.datlicenziamento, 'dd/mm/yyyy') as datlicenziamento,
                           de_mot_annullamento_atto.strdescrizione descmotivoannullamento,           
                           to_char(dispo.dtmMod, 'dd/mm/yyyy hh24:mi') as  dtmMod,
                           dispo.numKloDichDisp,
                           to_char(AM.datInizio, 'dd/mm/yyyy') as  datInizio,
                           CPI_.codCPI as codCPI,
                           dispo.CODMOTIVORIAPERTURAATTO, 
                           CPI_.strdescrizione as descCPI,                          
                           dso_.codStatoOccupaz,
                           dso_.STRDESCRIZIONE AS DESCRIZIONESTATO,
                           dsor_.codStatoOccupazRagg,
						   null as dataInizioCM,
						   null as CODACCERTSANITARIO,
						   patto.PRGPATTOLAVORATORE prgPatto,
						   patto.NUMKLOPATTOLAVORATORE numKloPatto,
						   prov.CODREGIONE,
						   dispo.numdelibera
                      FROM am_elenco_anagrafico AM, 
                           AM_dich_disponibilita dispo,
						   am_patto_lavoratore  patto, 
						   an_lav_storia_inf_coll  sc_,
                           an_lav_storia_inf st_,
                           de_cpi CPI_,
                           am_stato_occupaz aso_,
                           de_stato_occupaz dso_,
                           de_stato_occupaz_ragg dsor_,
                           de_provincia prov, de_mot_annullamento_atto						    
	                    WHERE (AM.prgelencoanagrafico = dispo.prgelencoanagrafico)
	                      AND (am.prgElencoAnagrafico = sc_.strChiaveTabella)
	                      AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
	                      AND (st_.codCPITit = CPI_.codCPI(+))                      
	                      AND dispo.prgStatoOccupaz=aso_.prgStatoOccupaz(+) 
	                      AND dispo.CODMOTANNULLAMENTOATTO=de_mot_annullamento_atto.CODMOTANNULLAMENTOATTO(+)
	                      AND aso_.codStatoOccupaz = dso_.codStatoOccupaz(+)
	                      AND dso_.codStatoOccupazRagg = dsor_.codStatoOccupazRagg(+)
	                      AND (sc_.codLstTab = 'EA')
						  AND dispo.PRGDICHDISPONIBILITA = patto.PRGDICHDISPONIBILITA(+)
						  AND prov.CODPROVINCIA = CPI_.CODPROVINCIA				                        
	                      AND dispo.prgDichDisponibilita = ?
	                      ORDER BY patto.PRGPATTOLAVORATORE DESC
" />

<STATEMENT name="DELETE_DISPO"
	query="DELETE FROM AM_DICH_DISPONIBILITA
               WHERE prgDichDisponibilita=?" />

<STATEMENT name="UPDATE_DISPO"
	query="UPDATE AM_DICH_DISPONIBILITA
                SET 
                CODTIPODICHDISP = ?,
                CODULTIMOCONTRATTO = ?,
                DATSCADCONFERMA=TO_DATE(?,'DD/MM/YYYY'),                   
                DATSCADEROGAZSERVIZI=TO_DATE(?,'DD/MM/YYYY'),                   
                DATFINE=TO_DATE(?,'DD/MM/YYYY'), 
                CODMOTIVOFINEATTO=?, 
                CODSTATOATTO=?,                  
                DATDICHIARAZIONE=TO_DATE(?,'DD/MM/YYYY'), 
                strNote=?,
                NUMKLODICHDISP=?,
                CDNUTMOD=?,
                DTMMOD=SYSDATE,
                NUMDELIBERA = ?
                WHERE 
               PRGDICHDISPONIBILITA=?
" />


<STATEMENT name="GET_NEW_DISPO"
	query="SELECT s_am_dich_disponibilita.nextval as prgDichDisponibilita from dual" />

<STATEMENT name="INSERT_DISPO"
	query="INSERT INTO AM_DICH_DISPONIBILITA
                      ( prgDichDisponibilita,
                        datDichiarazione,
                        prgElencoAnagrafico,
                        prgStatoOccupaz,
                        codTipoDichDisp,
                        CodUltimoContratto,
                        datScadConferma,
                        datScadErogazServizi,
                        datFine,
                        codStatoAtto,
                        codMotivoFineAtto,
                        strNote,
                        cdnUtIns, dtmIns,
                        cdnUtmod, dtmmod,
                        CODMONOCAT181ETA,
                        NUMDELIBERA, FLGRISCHIODISOCCUPAZIONE, DATLICENZIAMENTO, FLGDIDL68, FLGLAVOROAUTONOMO)
                VALUES( ?,
                        TO_DATE(?,'DD/MM/YYYY'),                    
                        ?, ?, ?, ?,                 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        ?, ?, ?, 
                        ?,SYSDATE, 
                        ?,SYSDATE,
                        ?,
                        ?, ?, TO_DATE(?,'DD/MM/YYYY'), ?, ?)
" />

<STATEMENT name="INSERT_DISPO_DA_TRASF"
	query="INSERT INTO AM_DICH_DISPONIBILITA
                      ( prgDichDisponibilita,
                        datDichiarazione,
                        prgElencoAnagrafico,
                        prgStatoOccupaz,
                        codTipoDichDisp,
                        CodUltimoContratto,
                        datScadConferma,
                        datScadErogazServizi,
                        datFine,
                        codStatoAtto,
                        codMotivoFineAtto,
                        strNote,
                        cdnUtIns, dtmIns,
                        cdnUtmod, dtmmod,
                        numMesiSosp, datcalcolomesisosp,
                        datAnzianitaDisoc,
                        codStatoOccupaz )
                VALUES( ?,
                        TO_DATE(?,'DD/MM/YYYY'),                    
                        ?, ?, ?, ?,                 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        ?, ?, ?, 
                        ?,SYSDATE, 
                        ?,SYSDATE,?,TO_DATE(?,'DD/MM/YYYY'),TO_DATE(?,'DD/MM/YYYY'),?
                       )
" />

<!--s_am_dich_disponibilita.nextval -->
<!-- Condizione Occupazionale: obbligo formativo -->
<STATEMENT name="GET_PATTO_OBBLIGO_FORMATIVO"
	query="
          SELECT aof.cdnlavoratore /* chiave pk */, 
		       aof.codmodalitaassolv,
		       aof.strnote,
		       aof.cdnutins, TO_CHAR (aof.dtmins, 'dd/mm/yyyy') dtmins, aof.cdnutmod,
		       TO_CHAR (aof.dtmmod, 'dd/mm/yyyy') dtmmod, numkloobbligoform,
		       aps.prglavpattoscelta,
		       flgobbligoformativo,
		       flgobbligoscolastico,
		       de_fo_modalita_assolv.strdescrizione AS descrizione
		 FROM am_obbligo_formativo aof,
		       de_fo_modalita_assolv,
		       am_lav_patto_scelta aps,
		       am_patto_lavoratore apl
		 WHERE apl.cdnlavoratore = ?
		   AND apl.prgpattolavoratore = aps.prgpattolavoratore
		   AND apl.datfine IS NULL
		   AND (aps.codlsttab = 'AM_OBBFO')
		   AND (aps.strchiavetabella = aof.cdnlavoratore)
		   AND (aof.codmodalitaassolv = de_fo_modalita_assolv.codmodalitaassolv)
" />

<!-- Condizione occupazionale: PATTO LISTE SPECIALI COLLOCAMENTO MIRATO -->
<STATEMENT name="GET_PATTO_AM_CM_ISCR"
	query="
			SELECT i.prgcmiscr, i.codcmtipoiscr,
			       case   	   
        			    when ma.cod_categoria is not null
        			         then (de_cm_tipo_iscr.STRDESCRIZIONE || ' (Min: ' || mn.des_categoria || ')')	     
        			    else de_cm_tipo_iscr.STRDESCRIZIONE || ' (Min: nessuna corrispondenza)'
        			end as descrizioneiscr,
			       TO_CHAR (i.datdatainizio, 'DD/MM/YYYY') datinizio,
			       TO_CHAR (i.datdatafine, 'DD/MM/YYYY') datfine, 
			       i.codtipoinvalidita,
			       de_cm_tipo_invalidita.strdescrizione AS descrizioneinv,
			       i.numpercinvalidita, i.strnote,
			       TO_CHAR (i.dtmins, 'DD/MM/YYYY') dtmins,
			       TO_CHAR (i.dtmmod, 'DD/MM/YYYY') dtmmod, i.cdnutins, i.cdnutmod,
			       i.numklocmiscr, aps.prglavpattoscelta,
			       de_cm_tipo_iscr.codMonoTipoRagg, nvl(de_cm_tipo_iscr.FLGESCLUDIDAAUTCM, 'N') FLGESCLUDIDAAUTCM
			  FROM am_cm_iscr i,
			       de_cm_tipo_iscr,
			       de_cm_tipo_invalidita,
			       am_lav_patto_scelta aps,
			       am_patto_lavoratore apl,
			       ma_cat_protette ma, 
			       mn_cat_protette mn
			 WHERE   /*aps.PRGPATTOLAVORATORE = ?*/
			       apl.cdnlavoratore = ?
			   AND apl.prgpattolavoratore = aps.prgpattolavoratore
			   AND apl.datfine IS NULL
			   AND aps.strchiavetabella = i.prgcmiscr
			   AND aps.codlsttab = 'AM_CM_IS'
			   AND i.codcmtipoiscr = de_cm_tipo_iscr.codcmtipoiscr(+)
			   AND i.codtipoinvalidita = de_cm_tipo_invalidita.codtipoinvalidita(+)     
			   and ma.codcmtipoiscr = de_cm_tipo_iscr.Codcmtipoiscr
               and ma.cod_categoria = mn.cod_categoria (+)
			   AND i.datdatafine is null   
" />


<!-- Condizione occupazionale: Corsi associati al patto -->
<STATEMENT name="GET_PATTO_CORSO"
	query="
SELECT DISTINCT de_corso.strdescrizione AS corso,
                pr_corso.numanno,
                pr_corso.flgcompletato,
                aps.prglavpattoscelta,
                apl.strnoteformprof
  FROM pr_corso,
       de_corso,
       am_lav_patto_scelta aps,
       am_patto_lavoratore apl
 WHERE     pr_corso.codcorso = de_corso.codcorso
       AND apl.cdnlavoratore = ?
       AND apl.prgpattolavoratore = aps.prgpattolavoratore
       AND apl.datfine IS NULL
       AND aps.strchiavetabella = pr_corso.prgcorso
       AND aps.codlsttab = 'PR_COR' " />

<!-- Condizione occupazionale: titoli del lavoratore -->
<STATEMENT name="GET_PATTO_LAVORATORE_TITOLI"
	query="
			SELECT   prs.prgstudio, prs.codtitolo, tit.strdescrizione AS destitolo,
			         prs.codtipotitolo, tit2.strdescrizione AS destipotitolo,
			         prs.strspecifica, prs.numanno numanno, prs.flgprincipale,
			         aps.prglavpattoscelta, aps.prgpattolavoratore
			    FROM pr_studio prs,
			         am_lav_patto_scelta aps,
			         de_titolo tit,
			         de_titolo tit2,
			         am_patto_lavoratore apl
			   WHERE /*aps.PRGPATTOLAVORATORE = ?*/
			         apl.cdnlavoratore = ?
			     AND apl.prgpattolavoratore = aps.prgpattolavoratore
			     AND apl.datfine IS NULL
			     AND aps.codlsttab = 'PR_STU'
			     AND aps.strchiavetabella = prs.prgstudio
			     AND prs.codtitolo = tit.codtitolo
			     AND prs.codtipotitolo = tit2.codtitolo
			ORDER BY NVL (prs.flgprincipale, ' ') DESC
" />

<!-- Condizione occupazionale PATTO PERMESSO DI SOGGIORNO -->
<STATEMENT name="GET_PATTO_PERM_SOGG"
	query="
			SELECT   psogg.prgpermsogg, 
					 TO_CHAR (datrichiesta, 'dd/mm/yyyy') datrichiesta,
			         TO_CHAR (datscadenza, 'dd/mm/yyyy') datscadenza, 
			         psogg.codmotivoril,
			         psogg.codstatus, de_status_straniero.strdescrizione statusDescr,
			         de_ex_motivo_ril.strdescrizione AS descrizionemot, 
			         de_stato_atto.strdescrizione AS descrizionerich, 
			         psogg.strnote,
			         codstatorichiesta,
			         psogg.cdnutins, TO_CHAR (psogg.dtmins, 'dd/mm/yyyy') dtmins,
			         psogg.cdnutmod, TO_CHAR (psogg.dtmmod, 'dd/mm/yyyy') dtmmod,
			         psogg.numklopermsogg, aps.prglavpattoscelta
			    FROM am_ex_perm_sogg psogg,
			         de_ex_motivo_ril,
			         de_stato_atto,
			         am_lav_patto_scelta aps,
			         am_patto_lavoratore apl,
			         de_status_straniero
			   WHERE apl.prgpattolavoratore = aps.prgpattolavoratore
			     AND apl.datfine IS NULL
			     AND apl.cdnlavoratore = ?
			     AND aps.codlsttab = 'AM_EX_PS'
			     AND aps.strchiavetabella = psogg.prgpermsogg
			     AND (psogg.codmotivoril = de_ex_motivo_ril.codmotivoril)
			     AND (psogg.codstatus = de_status_straniero.codstatus)
			     AND (psogg.codstatorichiesta = de_stato_atto.codstatoatto)
			ORDER BY datscadenza DESC
" />

<!-- Condizione occupazionale Dati Esperienze Lavorative -->
<STATEMENT name="GET_PATTO_ESP_LAV"
	query="
			 SELECT t1.prgesplavoro, t1.nummeseinizio, t1.numannoinizio, t3.codmansione,
			       t3.strdescrizione AS descrizionemans, t1.codcontratto,
			       t2.strdescrizione AS descrizionecontr,
			       (t1.numstipendio * 12) AS retribannua, t1.nummesefine, t1.numannofine,
			       t1.cdnutins, TO_CHAR (t1.dtmins, 'DD/MM/YYYY') dtmins, t1.cdnutmod,
			       TO_CHAR (t1.dtmmod, 'DD/MM/YYYY') dtmmod, aps.prglavpattoscelta,
			       aps.prgpattolavoratore
			  FROM pr_esp_lavoro t1,
			       de_contratto t2,
			       de_mansione t3,
			       am_lav_patto_scelta aps,
			       pr_mansione prm,
			       am_patto_lavoratore apl
			 WHERE /* aps.PRGPATTOLAVORATORE=?*/
			       apl.datfine IS NULL
			   AND apl.cdnlavoratore = ?
			   AND apl.prgpattolavoratore = aps.prgpattolavoratore
			   AND aps.codlsttab = 'PR_ESP_L'
			   AND aps.strchiavetabella = t1.prgesplavoro
			   AND t1.codcontratto = t2.codcontratto
			   AND t1.prgmansione = prm.prgmansione
			   AND prm.codmansione = t3.codmansione
" />



<!-- Condizione occupazionale INDISPONIBILITA TEMPORANEE -->
<STATEMENT name="GET_PATTO_INDISP_TEMP"
	query="
			SELECT   am_indisp_temp.prgindisptemp, am_indisp_temp.codindisptemp,
			         de_indisp_temp.strdescrizione descrizione,
			         TO_CHAR (am_indisp_temp.datinizio, 'DD/MM/YYYY') datinizio,
			         TO_CHAR (am_indisp_temp.datfine, 'DD/MM/YYYY') datfine,
			         am_indisp_temp.strnote,
			         TO_CHAR (am_indisp_temp.dtmins, 'DD/MM/YYYY') dtmins,
			         TO_CHAR (am_indisp_temp.dtmmod, 'DD/MM/YYYY') dtmmod,
			         am_indisp_temp.cdnutins, am_indisp_temp.cdnutmod,
			         am_indisp_temp.numkloindisptemp, aps.prgpattolavoratore,
			         aps.prglavpattoscelta
			    FROM am_indisp_temp,
			         de_indisp_temp,
			         am_lav_patto_scelta aps,
			         am_patto_lavoratore apl
			   WHERE  /* aps.PRGPATTOLAVORATORE=?*/
			         apl.cdnlavoratore = ?
			     AND apl.datfine IS NULL
			     AND apl.prgpattolavoratore = aps.prgpattolavoratore
			     AND (am_indisp_temp.codindisptemp = de_indisp_temp.codindisptemp)	 
			     AND aps.strchiavetabella = am_indisp_temp.prgindisptemp
			     AND aps.codlsttab = 'AM_IND_T'
			ORDER BY am_indisp_temp.datinizio DESC
" />



<!-- Condizione occupazionale: iscrizione alla lista di mobilita' -->
<STATEMENT name="GET_PATTO_MOBILITA_ISCR"
	query="
			SELECT DISTINCT am_mobilita_iscr.cdnutins, am_mobilita_iscr.cdnutmod,
                am_mobilita_iscr.codmotivodiff,
                am_mobilita_iscr.codmotivofine, am_mobilita_iscr.codtipomob,                
                case   	   
                  when ma.codlistespec is not null
                    then (DE_MB_TIPO.STRDESCRIZIONE || ' (Min: ' || mn.des_listespec|| ')' )	     
                    else DE_MB_TIPO.STRDESCRIZIONE || ' (Min: nessuna corrispondenza)'
                end as DESCRIZIONE,                
                TO_CHAR (am_mobilita_iscr.datatto, 'DD/MM/YYYY') datatto,
                TO_CHAR (am_mobilita_iscr.datfine, 'DD/MM/YYYY') datfine,
                TO_CHAR (am_mobilita_iscr.datfineindennita,
                         'DD/MM/YYYY'
                        ) datfineindennita,
                TO_CHAR (am_mobilita_iscr.datinizio, 'DD/MM/YYYY') datinizio,
                TO_CHAR (am_mobilita_iscr.datinizioindennita,
                         'DD/MM/YYYY'
                        ) datinizioindennita,
                TO_CHAR (am_mobilita_iscr.datmaxdiff,
                         'DD/MM/YYYY') datmaxdiff,
                TO_CHAR (am_mobilita_iscr.dtmins, 'DD/MM/YYYY') dtmins,
                TO_CHAR (am_mobilita_iscr.dtmmod, 'DD/MM/YYYY') dtmmod,
                am_mobilita_iscr.flgdifferimento,
                am_mobilita_iscr.flgindennita, am_mobilita_iscr.numklomobiscr,
                am_mobilita_iscr.prgmobilitaiscr,
                am_mobilita_iscr.prgmovimento, am_mobilita_iscr.strnote,
                am_mobilita_iscr.strnumatto,
                TO_CHAR (am_movimento.datiniziomov,
                         'DD/MM/YYYY') datiniziomov,
                TO_CHAR (am_movimento.datfinemov, 'DD/MM/YYYY') datfinemov,
                de_mansione.strdescrizione AS mansione,
                an_unita_azienda.prgunita, an_unita_azienda.prgazienda,
                an_unita_azienda.strindirizzo, an_unita_azienda.strtel,
                an_azienda.strpartitaiva, an_azienda.strragionesociale,
                de_comune.strdenominazione AS comune, aps.prglavpattoscelta
           FROM am_mobilita_iscr,
                de_mb_tipo,
                am_movimento,
                an_azienda,
                an_unita_azienda,
                am_patto_lavoratore apl,
                de_comune,
                de_mansione,
                am_lav_patto_scelta aps,
                ma_listespeciali ma,
                mn_listespeciali mn
          WHERE apl.cdnlavoratore = ?
            AND apl.prgpattolavoratore = aps.prgpattolavoratore
            AND apl.datfine IS NULL
            AND am_mobilita_iscr.codtipomob = de_mb_tipo.codmbtipo(+)
            AND am_movimento.prgmovimento = am_mobilita_iscr.prgmovimento
            AND an_azienda.prgazienda = an_unita_azienda.prgazienda
            AND am_movimento.prgazienda = an_unita_azienda.prgazienda
            AND am_movimento.prgunita = an_unita_azienda.prgunita
            AND am_movimento.codmansione = de_mansione.codmansione
            AND an_unita_azienda.codcom = de_comune.codcom
            AND aps.strchiavetabella = am_mobilita_iscr.prgmobilitaiscr
            AND aps.codlsttab = 'AM_MB_IS'
            and DE_MB_TIPO.codmbtipo = ma.codmbtipo 
            and ma.codlistespec = mn.cod_listespec(+)               
" />


<!-- Condizione occupazionale PATTO STATO OCCUPAZIONALE -->
<STATEMENT name="GET_PATTO_STATO_OCCUPAZ"
	query="
		  SELECT aso.codstatooccupaz, aso.prgstatooccupaz,
		       de_stato_occupaz.strdescrizione AS descrizionestato,		       
		       de_181_categoria.strdescrizione AS descrizione181,
		       aso.codcategoria181,
		       TO_CHAR (aso.datinizio, 'DD/MM/YYYY') datinizio,
		       TO_CHAR (aso.datfine, 'DD/MM/YYYY') datfine,
		       aso.flgindennizzato, aso.flgpensionato,
		       aso.nummesisosp,
		       TO_CHAR (aso.datanzianitadisoc,'DD/MM/YYYY') datanzianitadisoc,
		       aso.strnote,
		       TO_CHAR (aso.dtmins, 'DD/MM/YYYY') dtmins,
		       TO_CHAR (aso.dtmmod, 'DD/MM/YYYY') dtmmod,
		       aso.cdnutins, aso.cdnutmod,
		       aso.numreddito, aso.strnumatto,
		       TO_CHAR (aso.datatto, 'DD/MM/YYYY') datatto,
		       aso.codstatoatto,
		       de_stato_atto.strdescrizione AS descrizioneatto,
		       TO_CHAR (aso.datrichrevisione,'DD/MM/YYYY') datrichrevisione,
		       TO_CHAR (aso.datricorsogiurisdiz,'DD/MM/YYYY') datricorsogiurisdiz,
		       aso.prgstatooccupazprec,
		       aso.numklostatooccupaz,
		       TRUNC (MONTHS_BETWEEN (SYSDATE, aso.datanzianitadisoc)) AS mesi_anz
		  FROM am_stato_occupaz aso,
		       de_stato_occupaz,
		       de_181_categoria,
		       de_stato_atto,
		       am_patto_lavoratore amp,
		       am_patto_lavoratore apl
		 WHERE apl.cdnlavoratore = ?
		   AND apl.prgpattolavoratore = amp.prgpattolavoratore
		   AND apl.datfine IS NULL
		   AND aso.codcategoria181 = de_181_categoria.codcategoria181(+)
		   AND aso.codstatoatto = de_stato_atto.codstatoatto(+)
		   AND aso.codstatooccupaz = de_stato_occupaz.codstatooccupaz(+)		
		   AND amp.prgstatooccupaz = aso.prgstatooccupaz(+)
" />


<!-- motivo fine atto della dichiarazione di immediata disponibilità -->
<STATEMENT name="DISPO_GET_MotFinAtto"
	query="
  SELECT dmf_.codmotivofineatto as codice, 
       dmf_.strdescrizione as descrizione, 
       dmft_.FLGIMPATTIAMM,
       dmf_.flgattolavoratore
  FROM de_motivo_fine_atto dmf_
  inner join de_mot_fine_atto_lst_tab dmft_ on (dmf_.codMotivoFineAtto =  dmft_.codMotivoFineAtto
  	and trunc(sysdate) between trunc(dmft_.DATINIZIOVAL) and trunc(dmft_.DATFINEVAL))
  inner join (
    select tscc.codice
    from ts_config_codifica tscc
    where tscc.codtipoconfig = 'CHI_DID'
    and tscc.configurazione = 
    (
    select 
      NVL(
        (SELECT TL.NUM
         FROM TS_CONFIG_LOC TL
         WHERE TL.STRCODRIF = (SELECT TS_GENERALE.CODPROVINCIASIL FROM TS_GENERALE)
             AND TL.CODTIPOCONFIG = 'CHI_DID'),0) num
    from dual)) codice on codice.codice = dmf_.codmotivofineatto
  WHERE dmft_.codLstTab        = 'AM_DIC_D'
       order by 2 " />

<!-- Al momento questo statement non viene invocato e quindi la modifica 
	per cifratura cdnlavoratore non è stata riportata -->
<STATEMENT name="DISPO_GET_INFVALIDE"
	query="SELECT distinct si.CODCPITIT,
                       cpi.STRDESCRIZIONE CPItitolare,
                       ea.prgElencoAnagrafico,
                       to_char(ea.datInizio,'DD/MM/YYYY') AS datInizio,
                       so.prgStatoOccupaz,
                       deso.strDescrizione as DescrizioneStato,
                       desor.codStatoOccupazRagg,
					   to_char(cm.DATDATAINIZIO,'dd/mm/yyyy') as dataInizioCM,
					   cm.CODACCERTSANITARIO
                 FROM  AN_LAV_STORIA_INF si, 
                       AN_LAV_STORIA_INF_COLL sic, AM_ELENCO_ANAGRAFICO ea, AM_STATO_OCCUPAZ so,
                       DE_STATO_OCCUPAZ deso, DE_STATO_OCCUPAZ_RAGG desor, DE_CPI cpi, 
					   am_cm_iscr cm
                 WHERE 				 	   
                       ea.prgElencoAnagrafico = sic.strChiaveTabella
                   AND sic.prgLavStoriaInf = si.prgLavStoriaInf 
                   AND si.cdnLavoratore = so.cdnLavoratore(+)   
                   AND so.codStatoOccupaz = deso.codStatoOccupaz(+)				    				   
                   AND deso.codStatoOccupazRagg = desor.codStatoOccupazRagg(+)
				   AND si.CODCPITIT = cpi.CODCPI(+)
                   AND si.cdnLavoratore = ?
                   AND sic.codLstTab = 'EA'
				   and si.CDNLAVORATORE  = ea.cdnlavoratore(+)
				   and si.cdnlavoratore = cm.cdnlavoratore(+)
				   and cm.DATDATAFINE is null
                   AND ea.datCan is null
                   AND so.datFine is null" />


<STATEMENT name="GET_PROTOCOLLO_DISPOPATTO"
	query="select DOC.prgdocumento prgdocumento, 
                     DOC.cdnlavoratore cdnlavoratore,
                     doc.DATPROTOCOLLO,
                     to_char(doc.DATPROTOCOLLO, 'dd/mm/yyyy') datprot,
                     to_char(doc.DATPROTOCOLLO, 'HH24:MI') oraprot, 
                     DOC.numannoprot annoprot,
                     DOC.numprotocollo numprotocollo,
                     DOC.strnomedoc strnomedoc
                from am_documento DOC,                   
                     am_documento_coll DOC_COLL, 
                     TS_COMPONENTE TSC, 
                     an_lavoratore ANL 
               where DOC.CDNLAVORATORE = ANL.CDNLAVORATORE 
                 AND DOC_COLL.prgDocumento  = DOC.prgDocumento 
                 AND DOC_COLL.CDNCOMPONENTE = TSC.CDNCOMPONENTE 
                 AND DOC.datfine IS NULL
                 AND UPPER(TSC.STRPAGE) = UPPER(?)
                 AND DOC.CDNLAVORATORE = ?
                 AND DOC.CODTIPODOCUMENTO  = ?
" />

<STATEMENT name="GET_PROTOCOLLO_AZIENDA"
	query="select DOC.prgdocumento prgdocumento, 
                     DOC.prgAzienda prgAzienda, 
                     DOC.numannoprot annoprot,
                     DOC.numprotocollo numprotocollo, 
                     DOC.strnomedoc strnomedoc 
                from am_documento DOC,                   
                     am_documento_coll DOC_COLL, 
                     TS_COMPONENTE TSC, 
                     an_azienda ANZ
               where DOC.PRGAZIENDA = ANZ.PRGAZIENDA 
                 AND DOC_COLL.prgDocumento  = DOC.prgDocumento 
                 AND DOC_COLL.CDNCOMPONENTE = TSC.CDNCOMPONENTE 
				 AND DOC.datfine IS NULL
                 AND UPPER(TSC.STRPAGE) = UPPER(?)
                 AND DOC.PRGAZIENDA = ?
                 AND DOC.CODTIPODOCUMENTO  = ?
" />

<!-- ===================================================================================== 
	QUERY UTILIZZATE IN TUTTE LE PAGINE DEL PATTO (+ o -) ===================================================================================== -->
<!-- decodifica per lo stato occupazionale -->
<STATEMENT name="GET_StatoOccupaz"
	query=" SELECT de.codStatoOccupaz as codice,
                       sr.STRDESCRIZIONE||' - '|| de.strDescrizione 
					   || DECODE(SYSDATE,GREATEST(SYSDATE, de.DATINIZIOVAL, de.DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, de.DATINIZIOVAL, de.DATFINEVAL),'(scaduto)', 
               '')  as descrizione
                  FROM de_stato_occupaz de, de_stato_occupaz_ragg  sr
                 WHERE (de.codStatoOccupazRagg = sr.codStatoOccupazRagg)
                       order by 2
" />

<STATEMENT name="GET_Contratto"
	query=" SELECT   codcontratto codice,
            SUBSTR (strdescrizioneperstampa || ' - ' || strdescrizione,1,70)
            || '.. ' || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', 
               '')   		 
		 AS descrizione
    FROM de_contratto
    where nvl(flgesplav, 'N')  = 'S'
ORDER BY 2" />


<!-- decodifica tipo dichiarazione disponibilita' -->
<STATEMENT name="GET_TipoDichDisp"
	query="
           select codTipoDichDisp codice, strdescrizione || 
           DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), ' (scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (scaduto)', 
               '') as descrizione
                  from de_tipo_dich_disp order by 2
" />

<!-- stato atto nella dichiarazione -->
<STATEMENT name="DISPO_GET_Stato_Atto"
	query="
                select  dsa_.codstatoatto codice, dsa_.strdescrizione as descrizione
                from de_stato_atto dsa_, de_stato_atto_lst_tab dsat_
                where dsa_.codStatoAtto =  dsat_.codStatoAtto
                    and dsat_.codLstTab   =  'AM_DIC_D'
                order by 2
" />

<STATEMENT name="GET_CPI"
	query="select codice, descrizione FROM (
select distinct de_cpi.codcpi as codice,
                de_cpi.strDescrizione || ' - ' || de_cpi.codcpi as descrizione
	  from de_cpi, de_comune, de_provincia
	 where de_cpi.codcpi = de_comune.codcpi
	   and de_comune.codprovincia = de_provincia.codprovincia
	   and de_provincia.codregione =
	       (select de_provincia.CODREGIONE
	          from de_provincia
	         inner join ts_generale
	            on (de_provincia.codprovincia = ts_generale.CODPROVINCIASIL))
	union 
	select distinct de_cpi.codcpi as codice,
	                de_cpi.strDescrizione || ' - ' || de_cpi.codcpi || ' (SCADUTO)' as descrizione 
	from de_cpi, de_provincia
	where de_cpi.codprovincia=de_provincia.codprovincia 
	and trunc(de_cpi.datfineval) &lt;= trunc(sysdate) 
	and de_provincia.codregione =
	       (select de_provincia.CODREGIONE
	          from de_provincia
	         inner join ts_generale
	            on (de_provincia.codprovincia = ts_generale.CODPROVINCIASIL))
	and trunc(de_cpi.datfineval) &gt;= (select trunc(datscadcpi) from ts_generale)             
	)
	order by descrizione
" />
<!-- query="select codCPI codice, strdescrizione || ' - ' || codCPI as descrizione 
	from de_CPI order by 2" -->



<!-- <STATEMENT name="GET_InfLavoratore" query="SELECT an_.strcognome as 
	Cognome, an_.strnome as Nome, storia_inf.codcpitit , de_cpi.strdescrizione 
	as DescCPI, de.strdescrizione as DescStato, de_.strdescrizione as DescRagg, 
	to_char(ela.datInizio, 'dd/mm/yyyy') as datInizio FROM an_lavoratore an_, 
	an_lav_storia_inf storia_inf, de_cpi de_cpi, am_stato_occupaz am, de_stato_occupaz 
	de, de_stato_occupaz_ragg de_, am_elenco_anagrafico ela WHERE ( (an_.cdnlavoratore 
	= storia_inf.cdnlavoratore) AND (de_cpi.codcpi = storia_inf.codcpitit) AND 
	(an_.cdnlavoratore = am.cdnlavoratore) AND (de.codstatooccupaz = am.codstatooccupaz) 
	AND (de_.codstatooccupazragg = de.codstatooccupazragg) AND (an_.CDNLAVORATORE 
	= ela.cdnLavoratore) AND (storia_inf.datfine is null) AND (am.datfine is 
	null) AND(ela.DATCAN is null) AND (an_.cdnLavoratore =?)) "/> -->


<!-- <STATEMENT name="GET_APPUNTAMENTI" query=" SELECT to_char(ag_.DTMDATAORA,'dd/mm/yyyy') 
	as data, to_char(ag_.DTMDATAORA, 'hh24:mi') as orario, ag_.numminuti as Durata, 
	de_.STRDESCRIZIONE AS DesServizio, ( nvl(esito.STRDESCRIZIONE,' ') ) AS DesEsito 
	FROM ag_agenda ag_, de_servizio de_, ag_lavoratore lavoratore, de_esito_appunt 
	esito, am_lav_patto_scelta ps_ WHERE ( (lavoratore.codcpi = ag_.codcpi) AND 
	(lavoratore.prgappuntamento = ag_.prgappuntamento) AND (ag_.codservizio = 
	de_.codservizio) AND (ag_.CODESITOAPPUNT = esito.CODESITOAPPUNT (+)) AND 
	(lavoratore.cdnLavoratore = ?) AND (ag_.prgappuntamento = ps_.strchiavetabella) 
	AND (ps_.codlsttab = 'AGENDA') AND (ag_.codcpi = ps_.strchiavetabella2)) 
	"/> -->
<STATEMENT name="GET_APPUNTAMENTI"
	query=" 
        	SELECT to_char(ag_.DTMDATAORA,'dd/mm/yyyy') as data,
                to_char(ag_.DTMDATAORA, 'hh24:mi') as orario,
                ag_.numminuti as Durata, 
                de_.STRDESCRIZIONE AS DesServizio,
                ( nvl(esito.STRDESCRIZIONE,' ') ) AS DesEsito,
				ps_.PRGLAVPATTOSCELTA,
				to_char(ps_.datProtocollo , 'dd/mm/yyyy') as datProtocollo
            FROM ag_agenda ag_, 
                 de_servizio de_, 
                 ag_lavoratore lav,
                 de_esito_appunt esito,
                 am_lav_patto_scelta ps_ ,                 
                 am_patto_lavoratore apm
          	WHERE (    (lav.codcpi = ag_.codcpi)
                 AND (lav.prgappuntamento = ag_.prgappuntamento)
                 and lav.codcpi = ag_.codcpi
                 AND (ag_.codservizio = de_.codservizio(+))
                 AND (ag_.CODESITOAPPUNT = esito.CODESITOAPPUNT (+))
                 and apm.cdnlavoratore = lav.cdnlavoratore
                 and apm.prgpattolavoratore = ps_.prgpattolavoratore
                 AND (lav.cdnLavoratore = ?)
                 AND (lav.CDNLAVORATORE = ps_.strchiavetabella) 
                 AND (lav.codcpi = ps_.strchiavetabella2))
				 and lav.PRGAPPUNTAMENTO = ps_.STRCHIAVETABELLA3
                 AND (ps_.codlsttab = 'AG_LAV')
                 and apm.datfine is null
" />

<!-- <STATEMENT name="GET_AZIONI" query="SELECT de_.STRDESCRIZIONE Descrizione, 
	to_char(de_.datFineVal, 'dd/mm/yyyy') as EntroIl, des.strdescrizione as Esito 
	FROM ev_lavoratore ev_l, or_colloquio or_, or_percorso_concordato percorso, 
	de_azione de_, am_lav_patto_scelta ps_,de_esito des WHERE ( (ev_l.prgcontatto 
	= or_.prgcontatto) AND (or_.prgcolloquio = percorso.prgcolloquio) AND (de_.prgazioni 
	= percorso.prgazioni) AND (ev_l.cdnLavoratore = ?) AND (percorso.prgpercorso 
	= ps_.strchiavetabella) AND (ps_.codlsttab = 'OR_PER') AND (percorso.prgcolloquio 
	= ps_.strchiavetabella2) AND (percorso.CODESITO = des.codesito (+) ) )"/> -->
<STATEMENT name="GET_AZIONI"
	query="SELECT de_.STRDESCRIZIONE Descrizione, or_.codcpi, de_.Strdescrizione misura,
                      to_char(de_.datFineVal, 'dd/mm/yyyy') as  entroIl,
                      des.strdescrizione as Esito, ps_.prglavpattoscelta,
       				  TO_CHAR (percorso.DATSTIMATA, 'dd/mm/yyyy') AS dataPercorso,
       				  TO_CHAR (percorso.DATEFFETTIVA, 'dd/mm/yyyy') AS dataEffettiva,
       				  ragg.STRDESCRIZIONE as azione_ragg, percorso.strNote STRNOTE,
       				  to_char(ps_.datProtocollo, 'dd/mm/yyyy') as datProtocollo,
       				  or_vch_voucher.prgvoucher, or_vch_voucher.codstatovoucher, or_vch_voucher.codattivazione, 
       				  DE_VCH_MOTIVO_ANNULLAMENTO.strdescrizione descrAnnull,  
       				  percorso.prgpercorso, percorso.prgcolloquio, percorso.prgazioni,
       				  (select count(*)
           				from vch_modello_voucher
           				where PRGAZIONI = percorso.prgazioni and FLGATTIVO = 'S') numModelloVoucher,
	       			 decode(or_vch_voucher.codstatovoucher, null, 'Nessun Voucher', de_vch_stato.strdescrizione) as descStatoVoucher,
	       			 apl.Datriferimento as dataRif, ragg.flg_dgr1959,
					  or_.CODSERVIZIO, to_char(or_.DATCOLLOQUIO,'dd/mm/yyyy') as dataInizioProg,
			         to_char(or_.DATFINEPROGRAMMA,'dd/mm/yyyy') as dataFineProg,  
					  serv.STRDESCRIZIONE as descrizioneProgramma, serv.CODMONOPROGRAMMA,
					  NVL(serv.FLGPROGRAMMA, 'N') as programmaSN
                 FROM or_colloquio or_, de_servizio serv,
                      or_percorso_concordato percorso,
                      de_azione de_,
                      de_azione_ragg ragg,
                      am_lav_patto_scelta ps_, de_esito des,
	                  am_patto_lavoratore apl, or_vch_voucher, de_vch_stato, DE_VCH_MOTIVO_ANNULLAMENTO
              WHERE ( (or_.prgcolloquio = percorso.prgcolloquio)
              	  AND (or_.codservizio = serv.codservizio)
                  AND (de_.prgazioni = percorso.prgazioni)
                  and de_.PRGAZIONERAGG = ragg.PRGAZIONIRAGG
                  AND (or_.cdnLavoratore = ?)
                  AND (ps_.codlsttab = 'OR_PER' and to_char(percorso.prgpercorso) = ps_.strchiavetabella)              
                  AND (percorso.CODESITO  = des.codesito (+) )
                  AND (percorso.prgpercorso = or_vch_voucher.prgpercorso (+) AND percorso.prgcolloquio = or_vch_voucher.prgcolloquio (+))
                  AND (or_vch_voucher.codstatovoucher = de_vch_stato.codstatovoucher (+))
                  AND (or_vch_voucher.CODVCHMOTIVOANNULLAMENTO = DE_VCH_MOTIVO_ANNULLAMENTO.CODVCHMOTIVOANNULLAMENTO (+))
                  and apl.PRGPATTOLAVORATORE = ps_.PRGPATTOLAVORATORE and apl.DATFINE is null                  
                  ) order by percorso.datStimata desc" />

<STATEMENT name="GET_MANSIONI"
	query="
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            1 as Ordine,'MANSIONE_PROF' as MANSIONE_PROF,
            '' as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta,
            to_char(ps_.datProtocollo , 'dd/mm/yyyy') as datProtocollo
        FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)            
            and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            )
            UNION
            SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            2 as Ordine,'CONTRATTO' as CONTRATTO,
            dec_.strdescrizione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
            FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_contratto dis_,
            de_contratto dec_
            WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codcontratto = dis_.codcontratto)
            )
            UNION
            SELECT distinct PR_.PRGMANSIONE, de_.strdescrizione as Mansione,
            3 as Ordine,'ORARIO' as ORARIO,
            dec_.strdescrizione 
            || 
            decode(dec_.codmonoorario,
            'T',' (Min: Full Time)',
            'P',' (Min: Part Time)',
            ' (Min: nessuna corrispondenza)') as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta,null as datProtocollo
            FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_orario dis_,
            de_orario dec_
            WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codorario = dis_.codorario)			
            )
            UNION
            SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            4 as Ordine,'TURNO' as TURNO,
            dec_.strdescrizione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile, pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
            FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_turno dis_,
            de_turno dec_
            WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codturno = dis_.codturno)
            )
            UNION
            SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            5 as Ordine,'COMUNE' as COMUNE,
            dec_.strdenominazione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo            
            FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_comune dis_,
            de_comune dec_
            WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codcom = dis_.codcom)
            )
            UNION
            SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            6 as Ordine,'PROVINCIA' as PROVINCIA,
            dec_.strdenominazione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione, pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
            FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_provincia dis_,
            de_provincia dec_
            WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codprovincia = dis_.codprovincia)
            )
            UNION
            SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            7 as Ordine,'REGIONE' as REGIONE,
            dec_.strdenominazione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
            FROM am_lav_patto_scelta ps_,pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_regione dis_,
            de_regione dec_
            WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codregione = dis_.codregione)
            )
            UNION
            SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            8 as Ordine,'STATO' as STATO,
            dec_.strdenominazione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
            FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_stato dis_,
            de_comune dec_
            WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codcom = dis_.codcom)
            )
            UNION
            SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            9 as Ordine,'MOBIL_GEOGR' as MOBIL_GEOGR,
            dec_.strdescrizione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            dis_.FLGDISPAUTO, dis_.flgDispMoto, dis_.flgPendolarismo, dis_.NUMOREPERC, dis_.FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
            FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_mobil_geogr dis_,
            de_trasferta dec_
            WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            AND (amp.datfine is null)
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.cdnLavoratore = ?
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codtrasferta = dis_.codtrasferta)
            )
            order by 1, 2, 3, 4, 5

" />
<!-- INDISPONIBILITA PRESSO AZIENDE LEGATE AD UN PATTO -->
<STATEMENT name="GET_INDISPONIBILITA"
	query="SELECT ind.strragsocialeazienda, aps.prglavpattoscelta
              FROM pr_indisponibilita ind,
                   am_lav_patto_scelta aps,
                   am_patto_lavoratore apl
             WHERE /* apl.PRGPATTOLAVORATORE =? */
             	apl.DATFINE is null 
				   and apl.CDNLAVORATORE = ?
             	/**/
               AND aps.strchiavetabella = ind.prgindisponibilita
               AND apl.prgpattolavoratore = aps.prgpattolavoratore
               and aps.CODLSTTAB='PR_IND' 
" />


<STATEMENT name="GET_PATTO_INF_STORICHE"
	query="SELECT distinct 
        	to_char(am_.datstipula, 'dd/mm/yyyy') as DATSTIPULA,  
        	am_.datstipula datasort,
            an.strcodicefiscale,
            an.strcognome, 
            an.strnome, 
            am_.prgpattolavoratore,
            am_.codcpi, 
            am_.cdnlavoratore, 
            am_.prgdichdisponibilita,            
            am_.codstatoatto,
            pg_utils.trunc_desc(desa.strdescrizione,15,'...') as STATOPATTO,
            am_.prgstatooccupaz,
            am_.flgcomunicazesiti, 
            am_.codmotivofineatto, 
			pg_utils.trunc_desc(demf_.STRDESCRIZIONE,20,'...') as motivofine,
            to_char(am_.datscadconferma, 'dd/mm/yyyy') as DATSCADCONFERMA,
			to_char(am_.datfine, 'dd/mm/yyyy') as DATFINE,
            am_.strnote,
            am_.cdnutins,
            am_.dtmins, 
            am_.cdnutmod,
            am_.dtmmod, 
            am_.numklopattolavoratore,
            nvl(am_.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) as flgpatto297,
            nvl(de_codifica_patto.strdescrizione, decode(am_.flgpatto297,'S','Patto 150','N','Accordo Generico')) as TIPOPATTO,
            am_.CODSEDE as codSedeEnte, am_.STRENTECODICEFISCALE as cfEnte, ente.STRDENOMINAZIONE as ragSocEnte,
			ente.STRINDIRIZZO as indirizzoEnte, de_comune.strdenominazione as comuneEnte, am_.Strnotaente,De_Provincia.Strtarga
        FROM 
            an_lavoratore an, 
            am_patto_lavoratore am_,
            am_elenco_anagrafico am,
            an_lav_storia_inf_coll  sc_,
            an_lav_storia_inf st_,
			de_motivo_fine_atto demf_,
            de_stato_atto desa,
            de_codifica_patto,
            an_vch_ente ente,
			de_comune,
            De_Provincia
        WHERE (
            (an.cdnlavoratore = am_.cdnlavoratore)
            AND  (am_.datFine  is not  null)
            AND (an.CDNLAVORATORE = am.CDNLAVORATORE)
            AND (am.prgElencoAnagrafico = sc_.strChiaveTabella)
            AND (sc_.codLstTab = 'EA') 
            AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
            and (desa.codstatoatto=am_.codstatoatto)
			and (am_.CODMOTIVOFINEATTO=demf_.CODMOTIVOFINEATTO(+))
			and (am_.codCodificaPatto = de_codifica_patto.codCodificaPatto(+))
			AND (am_.CODSEDE = ente.CODSEDE(+))  
 			AND (am_.STRENTECODICEFISCALE = ente.STRCODICEFISCALE(+))
			AND (ente.codcom = de_comune.codcom(+))
			AND (de_comune.Codprovincia = de_provincia.Codprovincia(+))
            AND (an.cdnlavoratore=?)
        )ORDER BY am_.datstipula desc
" />

<STATEMENT name="GET_PATTO_INF_STORICHE_297"
	query="SELECT distinct 
        	to_char(am_.datstipula, 'dd/mm/yyyy') as DATSTIPULA,  
        	am_.datstipula datasort,
            an.strcodicefiscale,
            an.strcognome, 
            an.strnome, 
            am_.prgpattolavoratore, am_.codtipopatto,
            am_.codcpi, 
            am_.cdnlavoratore, 
            am_.prgdichdisponibilita,            
            am_.codstatoatto,
            pg_utils.trunc_desc(desa.strdescrizione,15,'...') as STATOPATTO,
            am_.prgstatooccupaz,
            am_.flgcomunicazesiti, 
            am_.codmotivofineatto, 
			pg_utils.trunc_desc(demf_.STRDESCRIZIONE,20,'...') as motivofine,
            to_char(am_.datscadconferma, 'dd/mm/yyyy') as DATSCADCONFERMA,
			to_char(am_.datfine, 'dd/mm/yyyy') as DATFINE,
            am_.strnote,
            am_.cdnutins,
            am_.dtmins, 
            am_.cdnutmod,
            am_.dtmmod, 
            am_.numklopattolavoratore,
            nvl(am_.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) as flgpatto297,
            nvl(de_codifica_patto.strdescrizione, decode(am_.flgpatto297,'S','Patto 150','N','Accordo Generico')) as TIPOPATTO,
            am_.CODSEDE as codSedeEnte, am_.STRENTECODICEFISCALE as cfEnte, ente.STRDENOMINAZIONE as ragSocEnte,
			ente.STRINDIRIZZO as indirizzoEnte, de_comune.strdenominazione as comuneEnte, am_.Strnotaente, De_Provincia.Strtarga
        FROM 
            an_lavoratore an, 
            am_patto_lavoratore am_,
            am_elenco_anagrafico am,
            an_lav_storia_inf_coll  sc_,
            an_lav_storia_inf st_,
			de_motivo_fine_atto demf_,
            de_stato_atto desa,
            de_codifica_patto,
            an_vch_ente ente,
			de_comune,
            De_Provincia
        WHERE (
            (an.cdnlavoratore = am_.cdnlavoratore)
            AND  (am_.datFine  is not  null)
            AND (an.CDNLAVORATORE = am.CDNLAVORATORE)
            AND (am.prgElencoAnagrafico = sc_.strChiaveTabella)
            AND (sc_.codLstTab = 'EA') 
            AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
            and (desa.codstatoatto=am_.codstatoatto)
			and (am_.CODMOTIVOFINEATTO=demf_.CODMOTIVOFINEATTO(+))
			and (am_.codCodificaPatto = de_codifica_patto.codCodificaPatto(+))
			and (am_.flgpatto297 = 'S')
			AND (am_.CODSEDE = ente.CODSEDE(+))  
 			AND (am_.STRENTECODICEFISCALE = ente.STRCODICEFISCALE(+))
			AND (ente.codcom = de_comune.codcom(+))
			AND (de_comune.Codprovincia = de_provincia.Codprovincia(+))
            AND (an.cdnlavoratore=?)
        )ORDER BY am_.datstipula desc
" />

<!-- ricordati di cambiare la condizione am_.datcan is null in not is null 
	OPPURE an_lav_storia_inf not is null? inoltre si dovrebbe mettere questa 
	query nel file anag.xml!! -->
<STATEMENT name="GET_EL_ANAG_INF_STORICHE"
	query="SELECT 
        	to_char(am_.datinizio, 'dd/mm/yyyy') as DATAISCR, 
        	am_.datinizio, 
            an_.cdnlavoratore, 
            an_.strcodicefiscale,   
            an_.strcognome, 
            an_.strnome,   
            am_.prgelencoanagrafico,   
            to_char(am_.datcan, 'dd/mm/yyyy') as DATACAN,  
			PG_UTILS.trunc_desc(demf_.STRDESCRIZIONE,30,'...') as MOTIVOFINE,                         
            PG_UTILS.trunc_desc(CPI_.strdescrizione,20,'...') as CPI
        FROM 
            an_lavoratore an_,  
            am_elenco_anagrafico am_, 
            an_lav_storia_inf_coll  sc_, 
            an_lav_storia_inf st_,
			de_motivo_fine_atto demf_,
            de_cpi CPI_
        WHERE (
            (an_.cdnlavoratore = am_.cdnlavoratore)         
            AND (am_.datcan  is not null) 
            AND (am_.prgElencoAnagrafico = sc_.strChiaveTabella) 
            AND (sc_.codLstTab = 'EA') 
            AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
			and (an_.cdnlavoratore=?)
            AND (CPI_.codCPI(+) = st_.codCPITit)
			and (am_.CODTIPOCAN=demf_.CODMOTIVOFINEATTO(+))
         ) ORDER BY am_.datinizio desc
" />


<!-- ricordati di cambiare la condizione dispo.datFine is null in not is 
	null inoltre si dovrebbe mettere questa query nel file anag.xml!! -->
<STATEMENT name="GET_DISPO_INF_STORICHE"
	query="SELECT 
        		to_char(dispo.datdichiarazione, 'dd/mm/yyyy') as DATDICHIARAZIONE,
        		dispo.datdichiarazione datasort,
                AN.strnome , 
                AN.strcognome, 
                AN.strCodiceFiscale, 
                to_char(dispo.datfine, 'dd/mm/yyyy') as DATFINE,  
                dispo.prgDichDisponibilita,                        
                AN.cdnLavoratore as CDNLAVORATORE,              
                pg_utils.trunc_desc(demf_.STRDESCRIZIONE,20,'...') as MOTIVOFINE,
                pg_utils.trunc_desc(detd.strdescrizione,20,'...') AS TIPODICHIARAZIONE,
                to_char(dispo.datScadConferma, 'dd/mm/yyyy') as DATSCADCONFERMA,
                to_char(dispo.datScadErogazServizi, 'dd/mm/yyyy') as DATSCADEROGAZSERVIZI,
                desa.strdescrizione as STATOATTO,
				destocc.CODSTATOOCCUPAZ,
				destocc.STRDESCRIZIONE as stoccdescrizione,
				dispo.codMotivoFineAtto
            FROM 
                an_lavoratore AN, 
                am_elenco_anagrafico AM, 
                AM_dich_disponibilita dispo, 
                de_tipo_dich_disp DE ,
                an_lav_storia_inf_coll  sc_,
                an_lav_storia_inf st_,
                de_motivo_fine_atto demf_,
                de_tipo_dich_disp detd,
                de_stato_atto desa,
				de_stato_occupaz destocc,
				am_stato_occupaz stocc
            WHERE (    
                (AN.cdnlavoratore = AM.cdnlavoratore) 
                AND (AM.prgelencoanagrafico = dispo.prgelencoanagrafico) 
                AND (DE.codtipodichdisp = dispo.codtipodichdisp)
                AND (am.prgElencoAnagrafico = sc_.strChiaveTabella)
                AND (sc_.codLstTab = 'EA') 
                AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
                AND (dispo.datFine is not null)
                and (dispo.CODMOTIVOFINEATTO=demf_.CODMOTIVOFINEATTO(+))
                and (detd.codtipodichdisp=dispo.codTipoDichDisp)
                and (dispo.codstatoAtto=desa.codstatoatto)
                and (dispo.codstatoAtto='PR')
                and (AN.CDNLAVORATORE=?)
				and dispo.PRGSTATOOCCUPAZ = stocc.PRGSTATOOCCUPAZ(+)
				and stocc.CODSTATOOCCUPAZ = destocc.CODSTATOOCCUPAZ(+)
            ) ORDER BY dispo.datdichiarazione desc, prgDichDisponibilita desc
" />

<STATEMENT name="GET_PATTO_DETTAGLIO_INF_STORICHE"
	query="SELECT DISTINCT  am_.prgpattolavoratore,
                                    am_.cdnlavoratore,
                                    am_.prgdichdisponibilita,
                                    to_char(am_.datstipula , 'dd/mm/yyyy') as datstipula, to_char(am_.datstipulaorig, 'dd/mm/yyyy') AS datstipulaorig, 
                                    am_.codstatoatto,
                                    am_.prgstatooccupaz,
                                    am_.flgcomunicazesiti,
                                    am_.codmotivofineatto,
                                    to_char(am_.datscadconferma , 'dd/mm/yyyy') as datscadconferma,
                                    to_char(am_.datfine , 'dd/mm/yyyy') as datfine,
                                    am_.strnote,
                                    am_.cdnutins,
                                    to_char(am_.dtmins , 'dd/mm/yyyy hh24:mi') as dtmins,
                                    am_.cdnutmod,
                                    to_char(am_.dtmmod , 'dd/mm/yyyy hh24:mi') as dtmmod,
                                    am_.numklopattolavoratore,
                                    nvl(am_.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) as flgpatto297,
                                    nvl(am_.codcodificapatto, 'PT297') as codcodificapatto,
                                    cpi_.strdescrizione,
                                    (cpi_.strdescrizione || ' - ' || cpi_.codcpi) as descCPI,
                                    ts_.strcognome as CognIns,
                                    ts_.strnome NomIns,
                                    ts_utentemod.strcognome CognMod,
                                    ts_utentemod.strnome NomMod,
                                    an.strcognome,
                                    an.strnome,
                                    an.strcodicefiscale,
									demf_.STRDESCRIZIONE as MOTIVOFINE,
                                    to_char(dispo.datDichiarazione , 'dd/mm/yyyy') as datDichiarazione,
                                    to_char(am.datInizio , 'dd/mm/yyyy') as DATINIZIO,
                                    dso_.strdescrizione as DESCRIZIONESTATO,
                                    am_.codTipoPatto,
                                    am_.codServizio,
                                    to_char(am_.dtmins , 'dd/mm/yyyy hh24:mi') as dtminsOra,
                                    to_char(am_.dtmmod , 'dd/mm/yyyy hh24:mi') as dtmmodOra,
                                    am_.numindicesvantaggio, am_.numindicesvantaggio2, TO_CHAR (am_.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                                   	am_.codVCHProfiling, am_.decDoteProcessoAssegnato, am_.decDoteProcessoResidua, am_.decDoteRisultatoAssegnato, am_.decDoteRisultatoResidua,
                                   	am_.prglavoratoreprofilo,  am_.importoar, TO_CHAR (am_.DATANASPI, 'dd/mm/yyyy') AS datNaspi, am_.strnoteattivazione,
                                   	am_.NUMINDICESVANTAGGIO150, TO_CHAR (am_.DATRIFERIMENTO150, 'dd/mm/yyyy') AS DATRIFERIMENTO150, 
                                   	(case when to_number(nvl(
								           (select num from ts_config_loc where codtipoconfig = 'PROF_150' 
								           and strcodrif = (select codprovinciasil from ts_generale where prggenerale=1)), 0)) > 0 then 
								             de_profiling_150.strprofiling
								       else ''
								    end) as strprofiling, 
                                   	am_.CODSEDE as codSedeEnte, am_.STRENTECODICEFISCALE as cfEnte, ente.STRDENOMINAZIONE as ragSocEnte,
                					ente.STRINDIRIZZO as indirizzoEnte, de_comune.strdenominazione as comuneEnte, am_.Strnotaente,De_Provincia.Strtarga,
                					 am_.STRCODABIPORTALE,  TO_CHAR (am_.DTMINVIOPORTALE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMINVIOPORTALE,
                					 TO_CHAR (am_.DTMACCETTAZIONE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMACCETTAZIONE,
            					     am_.STRTIPOACCETTAZIONE, am_.CODMONOACCETTAZIONE, nvl(am_.FLGPATTOONLINE, 'N') FLGPATTOONLINE,
                 					TO_CHAR (am_.DTMULTIMASTAMPA, 'dd/mm/yyyy  hh24:mi:ss') AS DTMULTIMASTAMPA ,am_.FLGREINVIOPTONLINE
                               FROM am_patto_lavoratore am_, de_codifica_patto,
                                    an_lavoratore AN,
                                    am_elenco_anagrafico AM,
                                    AM_dich_disponibilita dispo,
                                    an_lav_storia_inf_coll sc_,
                                    an_lav_storia_inf st_,
                                    de_cpi CPI_,
                                    ts_utente ts_,
                                    ts_utente ts_utentemod,
                                    am_stato_occupaz so_,
                                    de_stato_occupaz dso_,
                                    de_stato_occupaz_ragg dsor_,
									de_motivo_fine_atto demf_,
									an_vch_ente ente, 
									de_comune,
               						De_Provincia,
                					de_profiling_150
                            WHERE (/*(am_.datFine is not null) AND*/
                                   (an.cdnlavoratore = am_.cdnlavoratore)AND
                                   (AM.prgelencoanagrafico(+) = dispo.prgelencoanagrafico) AND
                                   (am.prgElencoAnagrafico = sc_.strChiaveTabella(+))AND
                                   (sc_.codLstTab is null or sc_.codLstTab = 'EA')AND
                                   (sc_.prgLavStoriaInf = st_.prgLavStoriaInf(+))AND
                                   (CPI_.codCPI = am_.codCPI)AND
                                   (am_.cdnUtIns = ts_.cdnut)AND
                                   (am_.cdnUtMod = ts_utentemod.cdnut)AND
                                   (dispo.prgdichdisponibilita(+) = am_.prgdichdisponibilita)AND
                                   (am_.prgStatoOccupaz = so_.prgstatooccupaz(+))AND
                                   (am_.codCodificaPatto = de_codifica_patto.codCodificaPatto(+))AND
                                   (so_.codstatooccupaz = dso_.codstatooccupaz(+))AND
                                   (dso_.codstatooccupazragg = dsor_.codstatooccupazragg(+))AND
								   (am_.CODMOTIVOFINEATTO=demf_.CODMOTIVOFINEATTO(+)) and
								   (am_.CODSEDE = ente.CODSEDE(+)) and
								   (am_.STRENTECODICEFISCALE = ente.STRCODICEFISCALE(+)) and
								   (ente.codcom = de_comune.codcom(+)) and
								   (de_comune.Codprovincia = de_provincia.Codprovincia(+)) and
								   (am_.numProfiling = de_profiling_150.numProfiling(+)) and 
                                   (am_.prgPattoLavoratore = ?)   
								   )
" />

<!-- 16/06/2004 Utilizzata la query: GET_AN_DISPO (query di selezione tramite 
	prg) -->
<STATEMENT name="GET_DISPO_DETTAGLIO_INF_STORICHE"
	query="SELECT 
            AN.strnome,   
            AN.strcognome,  
            AN.cdnLavoratore,
            dispo.prgdichDisponibilita, 				 
            to_char(dispo.datdichiarazione, 'dd/mm/yyyy') as datdichiarazione,
            dispo.prgelencoanagrafico,
            dispo.codstatoAtto,
            dispo.codTipoDichDisp,
            dispo.codUltimoContratto,
            dispo.prgStatoOccupaz,				 				 				 				 				 				                 
            to_char(dispo.datScadConferma, 'dd/mm/yyyy') as datScadConferma,
            to_char(dispo.datScadErogazServizi, 'dd/mm/yyyy') as datScadErogazServizi,   
            dispo.strnote,
            dispo.codMotivofineatto,
            to_char(dispo.datFine, 'dd/mm/yyyy') as datFine ,				 				 				           
            dispo.cdnUtIns,
            to_char(dispo.dtmIns, 'dd/mm/yyyy') as  dtmIns,				  
            dispo.cdnUtMod,           
            to_char(dispo.dtmMod, 'dd/mm/yyyy') as  dtmMod,
            dispo.numKloDichDisp,
            to_char(AM.datInizio, 'dd/mm/yyyy') as  datInizio,
            CPI_.codCPI as codCPI, 
            CPI_.strdescrizione as descCPI,
            tsu1.strCognome as CognIns,
            tsu1.strNome as NomIns,				   
            tsu2.strCognome as CognMod,
            tsu2.strNome as NomMod	,
            dso_.codStatoOccupaz	   ,
            demf_.STRDESCRIZIONE as MOTIVOFINE
        FROM 
            an_lavoratore AN, 
            am_elenco_anagrafico AM, 
            AM_dich_disponibilita dispo,
            an_lav_storia_inf_coll  sc_,
            an_lav_storia_inf st_,
            de_cpi CPI_,
            ts_utente tsu1,
            ts_utente tsu2,
            am_stato_occupaz aso_,
            de_stato_occupaz dso_,
            de_motivo_fine_atto demf_
        WHERE 
            (AN.cdnlavoratore = AM.cdnlavoratore) 
            AND ( dispo.datFine is not null)
            AND (AM.prgelencoanagrafico = dispo.prgelencoanagrafico) 
            AND (am.prgElencoAnagrafico = sc_.strChiaveTabella)
            AND (sc_.codLstTab = 'EA')
            AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
            AND (CPI_.codCPI(+) = st_.codCPITit)
            AND (dispo.cdnUtIns = tsu1.cdnut)
            AND (dispo.cdnUtMod = tsu2.cdnut)
            AND (aso_.prgStatoOccupaz = dispo.prgStatoOccupaz)
            AND (aso_.codStatoOccupaz = dso_.codStatoOccupaz)
            and (am.CODTIPOCAN=  demf_.CODMOTIVOFINEATTO(+))
            AND (dispo.prgDichDisponibilita= ?)
" />


<!-- 16/06/2004 Utilizzata la query: GET_ELANAG (query di selezione tramite 
	prg) -->
<STATEMENT name="GET_EL_ANAG_DETTAGLIO_INF_STORICHE"
	query="SELECT am_.prgelencoanagrafico,
                          am_.cdnlavoratore, 
                          to_char(am_.datinizio, 'dd/mm/yyyy') as datinizio,
                          am_.strnote,
                          to_char(am_.datcan, 'dd/mm/yyyy') as dtmcan,
                          am_.codtipocan, 
                          am_.cdnutins,
                          to_char(am_.dtmins,  'dd/mm/yyyy') as dtmins,
                          am_.cdnutmod,
                          to_char(am_.dtmmod,  'dd/mm/yyyy') as dtmmod,
                          am_.numkloelencoanag, 
                          an_.strcodicefiscale, 
                          an_.strcognome,
                          an_.strnome,
                          tsu1.strCognome as CognIns,
                          tsu1.strNome as NomIns,				   
                          tsu2.strCognome as CognMod,
                          tsu2.strNome as NomMod,
                          CPI_.codCPI as codCPI, 
						  demf_.STRDESCRIZIONE as MOTIVOFINE,
                          CPI_.strdescrizione as descCPI,
                          st_.prgLavStoriaInf as PRGINSERTCOLL,
            						  to_char(an_.DATNASC, 'dd/mm/yyyy') as DATNASC
                     FROM am_elenco_anagrafico am_, 
                          an_lavoratore an_,
                          ts_utente tsu1,
                          ts_utente tsu2,
                          an_lav_storia_inf_coll  sc_,
                          an_lav_storia_inf st_,
                          de_cpi CPI_,
						  de_motivo_fine_atto demf_				             
                  WHERE (     (am_.cdnlavoratore = an_.cdnlavoratore) 
                          AND (am_.datcan is not null)
                          AND (am_.cdnUtIns = tsu1.cdnut)
                          AND (am_.cdnUtMod = tsu2.cdnut)
                          AND (am_.prgElencoAnagrafico = sc_.strChiaveTabella)
                          AND (sc_.codLstTab = 'EA')
                          AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf)
                          AND (CPI_.codCPI(+) = st_.codCPITit)
						  and (demf_.CODMOTIVOFINEATTO(+)=am_.CODTIPOCAN)
                          AND (am_.prgElencoAnagrafico=?)
						  )
" />
<!-- Cancellazione di un patto -->
<STATEMENT name="DEL_PATTO_LAVORATORE"
	query="DELETE FROM AM_PATTO_LAVORATORE WHERE PRGPATTOLAVORATORE=?
" />
<!-- Cancellazione dei record di associazione tra il patto e le altre tabelle -->
<STATEMENT name="DEL_PATTO_SCELTA"
	query="DELETE FROM AM_LAV_PATTO_SCELTA WHERE PRGPATTOLAVORATORE=?
" />
<!-- Cancellazione di una dichiarazione disponibilta' -->
<STATEMENT name="DEL_PATTO_DICH_DISP"
	query="DELETE FROM AM_DICH_DISPONIBILITA WHERE PRGDICHDISPONIBILITA=?
" />
<STATEMENT name="GET_NEW_AM_LAV_PATTO_SCELTA"
	query="SELECT s_am_lav_patto_scelta.nextval as prgLavPattoScelta from dual" />
<STATEMENT name="DEL_LAV_PATTO_SCELTA"
	query="DELETE FROM AM_LAV_PATTO_SCELTA WHERE PRGLAVPATTOSCELTA=?
" />
<STATEMENT name="DEL_LAV_PATTO_SCELTA_PRGMOBILITA"
	query="DELETE FROM AM_LAV_PATTO_SCELTA WHERE STRCHIAVETABELLA = ? AND CODLSTTAB = 'AM_MB_IS'
" />
<STATEMENT name="INS_LAV_PATTO_SCELTA_COMPLETO"
	query="
        	INSERT INTO AM_LAV_PATTO_SCELTA (
	        	prglavpattoscelta,
	        	prgpattolavoratore,
	        	codlsttab,
	        	strchiavetabella,
	        	strchiavetabella2,
	        	prglavpattosceltainfcoll,
	        	strchiavetabella3
	        )
	        VALUES(s_am_lav_patto_scelta.nextval,?,?,?,?,null, ?)
" />
<STATEMENT name="INS_LAV_PATTO_SCELTA"
	query="
        	INSERT INTO AM_LAV_PATTO_SCELTA (
	        	prglavpattoscelta,
	        	prgpattolavoratore,
	        	codlsttab,
	        	strchiavetabella,	        	
	        	prglavpattosceltainfcoll	        	
	        )
	        VALUES(s_am_lav_patto_scelta.nextval,?,?,?,null)
" />

<STATEMENT name="GET_PATTO_APERTO"
	query="
        		SELECT a.PRGPATTOLAVORATORE, a.flgPatto297, 
            	to_char(a.DATSTIPULA,'DD/MM/YYYY') DATSTIPULA, a.codtipopatto,
            	to_char(a.DATSCADCONFERMA,'DD/MM/YYYY') DATSCADCONFERMA,
            	a.codStatoAtto, a.numklopattolavoratore, a.codcpi
				FROM AM_PATTO_LAVORATORE a 
				WHERE a.datfine is null and a.CDNLAVORATORE = ?
" />
<STATEMENT name="GET_DICH_DISP"
	query="
	        SELECT dich.PRGDICHDISPONIBILITA
			FROM am_dich_disponibilita dich, am_elenco_anagrafico anag
			WHERE dich.datfine IS NULL
			   AND dich.prgelencoanagrafico = anag.prgelencoanagrafico
			   AND anag.cdnlavoratore = ?
" />
<!-- indisponibilita' non legate al patto -->
<STATEMENT name="GET_INDISP_TEMP_NON_LEGATE"
	query="
			SELECT  distinct am_indisp_temp.prgindisptemp, 
				   am_indisp_temp.codindisptemp,
			       de_indisp_temp.strdescrizione descrizione,
			       TO_CHAR (am_indisp_temp.datinizio, 'DD/MM/YYYY') datinizio,
			       TO_CHAR (am_indisp_temp.datfine, 'DD/MM/YYYY') datfine,
			       am_indisp_temp.strnote,
			       TO_CHAR (am_indisp_temp.dtmins, 'DD/MM/YYYY') dtmins,
			       TO_CHAR (am_indisp_temp.dtmmod, 'DD/MM/YYYY') dtmmod,
			       am_indisp_temp.cdnutins, am_indisp_temp.cdnutmod       
			  FROM   am_indisp_temp, de_indisp_temp       
			  WHERE am_indisp_temp.cdnlavoratore = ?
				   AND (am_indisp_temp.codindisptemp = de_indisp_temp.codindisptemp)
				   AND NVL (am_indisp_temp.datfine, SYSDATE) &gt;= SYSDATE
				   and not exists (
				   	   select aps.prgpattolavoratore
					   from am_lav_patto_scelta aps, am_patto_lavoratore apl
					   where aps.CODLSTTAB='AM_IND_T'
					   		 and aps.STRCHIAVETABELLA=prgindisptemp
					   		 AND aps.prgpattolavoratore = apl.prgpattolavoratore
                             AND apl.datfine IS NULL
				   ) 
			order by datinizio desc
" />


<!-- collocamento mirato non legato al patto del lavoratore -->
<STATEMENT name="GET_AM_CM_ISCR_NON_LEGATE"
	query="  
			SELECT   i.prgcmiscr, i.codcmtipoiscr,
			          case   	   
	       			    when ma.cod_categoria is not null
	       			         then (de_cm_tipo_iscr.STRDESCRIZIONE || ' (Min: ' || mn.des_categoria || ')')	     
	       			    else de_cm_tipo_iscr.STRDESCRIZIONE || ' (Min: nessuna corrispondenza)'
	       			 end as descrizioneiscr,
			         TO_CHAR (i.datdatainizio, 'DD/MM/YYYY') datinizio,
			         TO_CHAR (i.datdatafine, 'DD/MM/YYYY') datfine, i.codtipoinvalidita,
			         de_cm_tipo_invalidita.strdescrizione AS descrizioneinv,
			         i.numpercinvalidita, i.strnote,
			         TO_CHAR (i.dtmins, 'DD/MM/YYYY') dtmins,
			         TO_CHAR (i.dtmmod, 'DD/MM/YYYY') dtmmod, i.cdnutins, i.cdnutmod,
			         i.numklocmiscr
			    FROM am_cm_iscr i, de_cm_tipo_iscr, de_cm_tipo_invalidita,
			         ma_cat_protette ma, mn_cat_protette mn
			   WHERE DECRYPT(i.CDNLAVORATORE, ?) = ?
			     AND i.codcmtipoiscr = de_cm_tipo_iscr.codcmtipoiscr(+)
			     AND i.codtipoinvalidita = de_cm_tipo_invalidita.codtipoinvalidita(+)
			     AND i.datdatafine IS NULL
			     and ma.codcmtipoiscr = de_cm_tipo_iscr.Codcmtipoiscr
                 and ma.cod_categoria = mn.cod_categoria (+)
			     AND NOT EXISTS (
			            SELECT aps.prgpattolavoratore
			              FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
			             WHERE aps.codlsttab = 'AM_CM_IS'
			               AND aps.strchiavetabella = i.prgcmiscr
			               AND aps.prgpattolavoratore = apl.prgpattolavoratore
                           AND apl.datfine IS NULL)
			ORDER BY datinizio DESC
" />



<STATEMENT name="GET_PR_STUDIO_NON_LEGATE"
	query="
			SELECT prs.prgstudio, prs.codtitolo, tit.strdescrizione AS destitolo,
				prs.codtipotitolo, tit2.strdescrizione AS destipotitolo,
				prs.strspecifica, prs.numanno numanno, prs.flgprincipale
			FROM pr_studio prs, de_titolo tit, de_titolo tit2
			WHERE cdnlavoratore = ?
				AND prs.codtitolo = tit.codtitolo
				AND prs.codtipotitolo = tit2.codtitolo
				AND NOT EXISTS (
					SELECT aps.prgpattolavoratore
						FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
					WHERE aps.codlsttab = 'PR_STU'
					AND aps.strchiavetabella = prs.prgstudio
					AND aps.prgpattolavoratore = apl.prgpattolavoratore
                    AND apl.datfine IS NULL)
" />




<STATEMENT name="GET_PR_ESP_LAVORO_NON_LEGATE"
	query="
			SELECT t1.prgesplavoro, t1.nummeseinizio, t1.numannoinizio, t3.codmansione,
			       t3.strdescrizione AS descrizionemans, t1.codcontratto,
			       t2.strdescrizione AS descrizionecontr,
			       (t1.numstipendio * 12) AS retribannua, t1.nummesefine, t1.numannofine,
			       t1.cdnutins, TO_CHAR (t1.dtmins, 'DD/MM/YYYY') dtmins, t1.cdnutmod,
			       TO_CHAR (t1.dtmmod, 'DD/MM/YYYY') dtmmod
			  FROM pr_esp_lavoro t1, de_contratto t2, de_mansione t3, pr_mansione prm
			 WHERE 
			 prm.CDNLAVORATORE=? and 
			 t1.codcontratto = t2.codcontratto
			   AND t1.prgmansione = prm.prgmansione
			   AND prm.codmansione = t3.codmansione
			   and not EXISTS (
								SELECT aps.prgpattolavoratore
									FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
								WHERE aps.codlsttab = 'PR_ESP_L'
								AND aps.strchiavetabella = t1.PRGESPLAVORO
								AND aps.prgpattolavoratore = apl.prgpattolavoratore
                                AND apl.datfine IS NULL)
" />

<STATEMENT name="GET_PR_CORSO_NON_LEGATE"
	query="
			SELECT DISTINCT de_corso.strdescrizione AS corso, p.numanno, p.flgcompletato,
			                p.prgcorso
			           FROM pr_corso p, de_corso
			          WHERE p.codcorso = de_corso.codcorso
			            AND p.cdnlavoratore = ?
			            AND NOT EXISTS (
			                   SELECT aps.prgpattolavoratore
			                     FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
			                    WHERE aps.codlsttab = 'PR_COR'
			                      AND aps.strchiavetabella = p.prgcorso
			                      AND aps.prgpattolavoratore = apl.prgpattolavoratore
                                  AND apl.datfine IS NULL)
" />


<STATEMENT name="GET_PR_MANSIONI_NON_LEGATE"
	query="
  SELECT de.strdescrizione, man.flgdisponibile, man.flgesperienza, man.flgpip,
       man.flgdispformazione, man.prgmansione
  FROM pr_mansione man, de_mansione de
  WHERE man.cdnlavoratore = ?
	   AND man.codmansione = de.codmansione
	   and (
	   	   nvl(man.flgdisponibile, 'N') IN ('S','P') 
		   or nvl(man.flgdispformazione, 'N') = 'S'
	   )
	   AND NOT EXISTS (
	          SELECT aps.prgpattolavoratore
	            FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
	           WHERE aps.codlsttab = 'PR_MAN'
	             AND aps.strchiavetabella = man.prgmansione
	             AND aps.prgpattolavoratore = apl.prgpattolavoratore
	             AND apl.datfine IS NULL)
  ORDER BY de.strdescrizione
" />
<STATEMENT name="GET_AM_MOBILITA_ISCR_NON_LEGATE"
	query="
        SELECT am_mobilita_iscr.prgmobilitaiscr,
       TO_CHAR (am_movimento.datiniziomov, 'DD/MM/YYYY') datiniziomov,
       TO_CHAR (am_movimento.datfinemov, 'DD/MM/YYYY') datfinemov,
       an_azienda.strragionesociale,
       TO_CHAR (am_mobilita_iscr.datinizio, 'DD/MM/YYYY') datinizio,
       case   	   
         when ma.codlistespec is not null
           then (DE_MB_TIPO.STRDESCRIZIONE || ' (Min: ' || mn.des_listespec|| ')' )	     
           else DE_MB_TIPO.STRDESCRIZIONE || ' (Min: nessuna corrispondenza)' 
       end as tipolista
  FROM am_mobilita_iscr,
       de_mb_tipo,
       am_movimento,
       an_azienda,
       an_unita_azienda,
       de_comune,
       de_mansione,
       ma_listespeciali ma,
       mn_listespeciali mn
 WHERE am_mobilita_iscr.codtipomob = de_mb_tipo.codmbtipo(+)
   AND am_movimento.prgmovimento = am_mobilita_iscr.prgmovimento
   AND an_azienda.prgazienda = an_unita_azienda.prgazienda
   AND am_movimento.prgazienda = an_unita_azienda.prgazienda
   AND am_movimento.prgunita = an_unita_azienda.prgunita
   AND am_movimento.codmansione = de_mansione.codmansione
   AND an_unita_azienda.codcom = de_comune.codcom
   AND am_mobilita_iscr.cdnlavoratore = ?   
   AND nvl(am_mobilita_iscr.datfine,SYSDATE) %gt;= SYSDATE
   AND NOT EXISTS (
          SELECT aps.prgpattolavoratore
            FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
           WHERE aps.codlsttab = 'AM_MB_IS'
             AND aps.strchiavetabella = am_mobilita_iscr.prgmobilitaiscr
             AND aps.prgpattolavoratore = apl.prgpattolavoratore
             AND apl.datfine IS NULL)
   and DE_MB_TIPO.codmbtipo = ma.codmbtipo 
   and ma.codlistespec = mn.cod_listespec(+)
        " />
<STATEMENT name="GET_AM_OBBLIGO_FORMATIVO_NON_LEGATE"
	query="
		SELECT cdnlavoratore, flgobbligoscolastico, flgobbligoformativo,
		am_obbligo_formativo.codmodalitaassolv,
		de_fo_modalita_assolv.strdescrizione AS descrizione, strnote, cdnutins,
		TO_CHAR (dtmins, 'dd/mm/yyyy') dtmins, cdnutmod,
		TO_CHAR (dtmmod, 'dd/mm/yyyy') dtmmod, numkloobbligoform
		FROM am_obbligo_formativo, de_fo_modalita_assolv
		WHERE cdnlavoratore = ?
		AND (am_obbligo_formativo.codmodalitaassolv =
		                               de_fo_modalita_assolv.codmodalitaassolv
		)
		AND NOT EXISTS (
		   SELECT aps.prgpattolavoratore
		   FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
		   WHERE aps.codlsttab = 'AM_OBBFO'
		     AND aps.strchiavetabella = am_obbligo_formativo.cdnlavoratore
		     AND aps.prgpattolavoratore = apl.prgpattolavoratore
		     AND apl.datfine IS NULL) 
" />
<!-- proprieta' (definite dalle singole provincie) delle pagine del patto 
	BISOGNA ANCORA GESTIRE IL CODICE DELLA PROVINCIA -->
<STATEMENT name="PROPRIETA_PAGINE_PATTO"
	query="
		SELECT gaa.prgposizione, gaa.codmonovisualizzazione,
			gaa.flgvisualizzastruttura, gaa.flgmostraelencostessariga,
			gaa.flginfcorrenti, att.codlsttab, att.strazione
		FROM  ts_generale gen,
			ts_gruppo_abi_attributo gaa,
			ts_attributo att,
			ts_componente com,
			ts_gruppo grp
		WHERE grp.strcodrif = gen.CODPROVINCIASIL
			AND com.strpage = ?
			AND grp.cdngruppo = gaa.cdngruppo
			AND gaa.prgattributo= att.prgattributo 
			AND att.cdncomponente= com.cdncomponente 
		ORDER BY gaa.PRGPOSIZIONE
" />

<STATEMENT name="GET_AM_EX_PS_NON_LEGATE"
	query="
	   SELECT   am_ex_perm_sogg.prgpermsogg,
	         TO_CHAR (datrichiesta, 'dd/mm/yyyy') datrichiesta,
	         TO_CHAR (datscadenza, 'dd/mm/yyyy') datscadenza, am_ex_perm_sogg.codmotivoril,
	         de_status_straniero.codstatus, de_status_straniero.strdescrizione statusDescr,
	         de_ex_motivo_ril.strdescrizione AS descrizionemot, codstatorichiesta,
	         de_stato_atto.strdescrizione AS descrizionerich, strnote, cdnutins,
	         TO_CHAR (dtmins, 'dd/mm/yyyy') dtmins, cdnutmod,
	         TO_CHAR (dtmmod, 'dd/mm/yyyy') dtmmod, numklopermsogg
	    FROM am_ex_perm_sogg, de_ex_motivo_ril, de_stato_atto, de_status_straniero
	    WHERE (am_ex_perm_sogg.codmotivoril = de_ex_motivo_ril.codmotivoril)
	       AND (am_ex_perm_sogg.codstatus = de_status_straniero.codstatus)
	       AND (am_ex_perm_sogg.codstatorichiesta = de_stato_atto.codstatoatto)
	       AND am_ex_perm_sogg.datrichiesta =
	                    (SELECT MAX (ex1.datrichiesta)
	                     FROM am_ex_perm_sogg ex1
	                     WHERE am_ex_perm_sogg.cdnlavoratore = ex1.cdnlavoratore)
	       AND cdnlavoratore = ?
	       AND NOT EXISTS (
	            SELECT aps.prgpattolavoratore
	            FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
	            WHERE aps.codlsttab = 'AM_EX_PS'
	               AND aps.strchiavetabella = am_ex_perm_sogg.prgpermsogg
	               AND aps.prgpattolavoratore = apl.prgpattolavoratore
	               AND apl.datfine IS NULL)
	    ORDER BY datscadenza DESC
	" />

<STATEMENT name="GET_PR_IND_NON_LEGATE"
	query="
        SELECT prgindisponibilita, prgazienda, strragsocialeazienda, strnota,
        cdnutins, dtmins, cdnutmod, dtmmod
        FROM pr_indisponibilita
        WHERE cdnlavoratore = ?
        AND NOT EXISTS (
          SELECT aps.prgpattolavoratore
            FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
           WHERE aps.codlsttab = 'PR_IND'
             AND aps.strchiavetabella = pr_indisponibilita.prgindisponibilita
             AND aps.prgpattolavoratore = apl.prgpattolavoratore
             AND apl.datfine IS NULL)
        " />

<STATEMENT name="GET_IMPEGNI_LEGATI_AL_PATTO"
	query="
	        select  imp.codImpegno, imp.strDescrizione, imp.codMonoImpegnoDi, 
          aps.prgLavPattoScelta, imp.flgesiti,aps.STRALTREINF
	        from de_impegno imp, am_lav_patto_scelta aps, am_patto_lavoratore apl,
	        de_impegno_patto imppatto
	        where imp.CODIMPEGNO = aps.STRCHIAVETABELLA and aps.CODLSTTAB='DE_IMPE'
			and aps.PRGPATTOLAVORATORE = apl.PRGPATTOLAVORATORE and apl.CDNLAVORATORE = ?
			and imp.CODIMPEGNO = imppatto.CODIMPEGNO
	        and imppatto.codcodificapatto = nvl(apl.codcodificapatto, 'PT297')
			and apl.DATFINE is null
			and (imp.codMonoLavAzienda in ('L','E'))
			order by imp.codImpegno
        " />
<STATEMENT name="GET_IMPEGNI_CPI_NON_LEGATI_AL_PATTO"
	query="
	        select  imp.codImpegno, imp.strDescrizione, imp.codMonoImpegnoDi
	        from de_impegno imp
	        where imp.CODMONOIMPEGNODI='C'	     
	        and (imp.codMonoLavAzienda in ('L','E'))         
	        and NOT EXISTS (
	          SELECT aps.prgpattolavoratore
	            FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
	           WHERE aps.codlsttab = 'DE_IMPE'
	             AND aps.strchiavetabella = imp.CODIMPEGNO
	             AND aps.prgpattolavoratore = apl.prgpattolavoratore
				 AND apl.CDNLAVORATORE = ?
	             AND apl.datfine IS NULL) 
	        order by imp.codImpegno
        " />
<STATEMENT name="GET_IMPEGNI_LAV_NON_LEGATI_AL_PATTO"
	query="
	        select  imp.codImpegno, imp.strDescrizione, imp.codMonoImpegnoDi
	        from de_impegno imp
	        where imp.CODMONOIMPEGNODI='S' 
	        and (imp.codMonoLavAzienda in ('L','E')) 
	        and NOT EXISTS (
	          SELECT aps.prgpattolavoratore
	            FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
	           WHERE aps.codlsttab = 'DE_IMPE'
	             AND aps.strchiavetabella = imp.CODIMPEGNO
	             AND aps.prgpattolavoratore = apl.prgpattolavoratore
				 AND apl.CDNLAVORATORE = ?
	             AND apl.datfine IS NULL) 
	        order by imp.codImpegno
        " />
<STATEMENT name="GET_DE_TIPO_PATTO"
	query="
	        SELECT codtipopatto AS codice,
			       pg_utils.trunc_desc (strdescrizione, 70, '...') || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
                 LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', 
                 '') AS descrizione
			FROM de_tipo_patto ORDER BY strdescrizione
        " />

<STATEMENT name="LOAD_ISCR_CIG"
	query="
		select prgAltraIscr as codice,
			'dal ' || to_char(cig.datInizio,'dd/mm/yyyy') || ' al ' || to_char(cig.datFine,'dd/mm/yyyy') || ' az. ' || az.strRagioneSociale || decode(stato.strDescrizione,null,'',' stato ' || stato.strDescrizione) as descrizione 
		from am_altra_iscr cig 
		left join an_azienda az on az.prgAzienda = cig.prgAzienda 
		inner join de_tipo_iscr t_isc on t_isc.codTipoIscr = cig.codTipoIscr
		left join de_stato_altra_iscr stato on stato.codstato = cig.codStato 
		where cig.cdnLavoratore = ? 
		and nvl(t_isc.flgCorso,'N') = 'S' 
" />

<STATEMENT name="DE_MOT_CHIUSURA"
	query="
		select CODMOTCHIUSURAPER as codice, STRDESCRIZIONE || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', '') as descrizione
		from DE_MOTIVO_CHIUSURAPER 
		ORDER BY STRDESCRIZIONE
" />

<STATEMENT name="DE_ESITO_COLL"
	query="
		select CODESITOCOLL as codice, STRDESCRIZIONE || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', '') as descrizione 			   
		from DE_ESITOCOLL 
		ORDER BY STRDESCRIZIONE
" />

<STATEMENT name="DE_LINEA_AZIONE"
	query="
		select CODLINEAAZ as codice, STRDESCRIZIONE || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', '') as descrizione 			   
		from DE_LINEA_AZIONE 
		ORDER BY STRDESCRIZIONE
" />

<!-- lista di decodifica per comboBox -->
<STATEMENT name="DE_LIST_SERVIZI"
	query="
		select CODSERVIZIO as codice, STRDESCRIZIONE  as descrizione,
			   		DECODE(SYSDATE,     GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 'SCADUTI',
       			 LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'SCADUTI',   'VALIDI') as gruppo,
        		DECODE(SYSDATE, GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 2,
           		LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 2, 1) as ordine_gruppo	   
		from de_servizio 
    ORDER BY ordine_gruppo, decode(codMonoProgramma, null, 0, 1) desc, STRDESCRIZIONE
" />

<STATEMENT name="Select_PrgSPI_Da_CDNUT"
	query="
		select prgspi
		from ts_utente
    where cdnut = ? 
" />
<!-- Controlla se il polo provinciale può gestire le informazioni CIG in 
	colloqui e percorsi -->
<STATEMENT name="CONFIGURAZIONE_CIG"
	query="
		select decode(count(*),0,'false','true') as canCIG
		from TS_CONFIG_LOC 
		where codtipoconfig = 'OR_CIG' 
		and num = 1 
		and strcodrif = (SELECT codprovinciasil FROM ts_generale)
" />

<!-- Controlla l'unicità dell'associazione colloquio-iscrizione cig se presente -->
<STATEMENT name="UNICO_CIG_COLLOQUIO"
	query="
		select count(*) AS numCigColl
		from or_colloquio coll 
		where coll.prgColloquio != ? 
		and coll.prgAltraIscr = ? 
		and coll.cdnLavoratore = ?
" />

<!-- Legge un colloquio specifico -->
<STATEMENT name="LOAD_COLLOQUIO"
	query="
		select to_char(coll.DATCOLLOQUIO, 'dd/mm/yyyy') as datcolloquio,
		       coll.PRGCOLLOQUIO,
		       scheda.STRAZIONICON,
		       to_char(coll.DATFINEPROGRAMMA, 'dd/mm/yyyy') as DATAFINEPROGRAMMA,
		       scheda.STROBIETTIVO,
		       scheda.STRVINCLAV,
		       scheda.STRVINCEST,
		       scheda.STRANALISILAVORO,
		       scheda.STRRISPOTENZ,
		       scheda.STRDESASPIR,
		       coll.prgSpi,
		       coll.cdnLavoratore,
		       coll.codServizio,
		       coll.strnote,
		       coll.cdnutins,
		       to_char(coll.dtmins, 'dd/mm/yyyy hh24:mi') as dtmins,
		       coll.cdnutmod,
		       to_char(coll.dtmmod, 'dd/mm/yyyy hh24:mi') as dtmmod,
		       coll.numklocolloquio,
		       coll.codcpi,
		       de_cod_cpi.STRDESCRIZIONE || ' - ' || coll.CODCPI descrcpi,
		       coll.PRGALTRAISCR,
		       to_char(coll.DATCHIUSURAPER, 'dd/mm/yyyy') as datChiusuraPer,
		       coll.CODMOTIVOCHIUSURAPER,
		       coll.CODESITOCOLL,
		       coll.CODLINEAAZ,
		       iscr.PRGACCORDO,
		       de_servizio.codmonoprogramma,
		       bd_ade.TIPODICHIARAZIONE,
		       to_char(bd_ade.DATADESIONE, 'dd/mm/yyyy') as datAdesione,
		       decode(de_servizio.FLGCONDIZIONALITA, null, 'No', 'N', 'No', 'Si') as flgCondizionalita,
		       (select count(1) from or_percorso_concordato perc
		       inner join de_esito e on (perc.codesito=e.codesito)
		       where perc.prgcolloquio=coll.prgcolloquio
		       and nvl(e.flgnegativo,'N')='S'
		       ) as numAttivitaNegativi,
		       (select count(1) from am_condizionalita cond
		       where cond.prgcolloquio=coll.prgcolloquio
		       ) as numEventiCondizionalita
		  from or_colloquio coll
		inner join or_scheda_colloquio scheda
		    on scheda.PRGCOLLOQUIO = coll.PRGCOLLOQUIO
		inner join de_servizio
		    on (coll.codServizio = de_servizio.codservizio)
		  left join am_altra_iscr iscr
		    on iscr.PRGALTRAISCR = coll.PRGALTRAISCR
		  left join bd_adesione bd_ade
		    on (bd_ade.cdnlavoratore = coll.cdnlavoratore and
		       bd_ade.codbandoprogramma = de_servizio.CODTSPROGRAMMA)
		INNER JOIN DE_CPI de_cod_cpi
		    on de_cod_cpi.CODCPI = coll.CODCPI
		 where coll.prgColloquio = ?
" />

<STATEMENT name="CHECK_CIG_IN_COLLOQUIO"
	query="
		select decode(coll.PRGALTRAISCR,null,'false','true') as checkCIGColl
		from or_colloquio coll 
		where coll.prgColloquio = ?
" />

<STATEMENT name="CHECK_OR_LAV_COLLOQUIO"
    query="
        select coll.PRGCOLLOQUIO
        from or_colloquio coll 
        where coll.prgColloquio = ?
        AND cdnlavoratore = ?
" />

<STATEMENT name="CHECK_OR_PERCORSO_CONCORDATO"
    query="
        select prgcolloquio,prgpercorso, CODESITO, FLG_NON_MODIFICARE
        from OR_PERCORSO_CONCORDATO  coll 
        where coll.prgColloquio = ? AND
        coll.prgpercorso = ?
" />

<!-- Inserisce un nuovo colloquio /* prgcontatto null e comunque non ci sara' 
	piu */ -->
<STATEMENT name="INSERT_COLLOQUIO"
	query="
	insert into or_colloquio  (
	   	prgColloquio,
	   	cdnLavoratore,
	   	codCpi,
	   	datColloquio,
	   	prgSpi,
	   	codServizio,
	   	strnote, 
		prgAltraIscr, 
		datChiusuraPer,
		codMotivoChiusuraPer,
		codEsitoColl, 
		codLineaAz, 	    
	   	cdnutins,
	   	dtmins,
	   	cdnutmod,
	   	dtmmod	   
	)
	 values (
	 	?,
	 	?,
	 	?,
	 	TO_DATE(?,'DD/MM/YYYY'),
	 	?,
	 	?,
	 	?,
		?, 
		TO_DATE(?,'DD/MM/YYYY'),
		?,
		?,	 	
	 	?, 
	 	?,
	 	SYSDATE,
	 	?,
	 	SYSDATE	 	
	 )		
" />
<STATEMENT name="INSERT_SCHEDA_COLLOQUIO"
	query="
	insert into or_scheda_colloquio  (
		prgColloquio,
		strDesAspir,
		strRisPotenz,
		strVincLav,
		strVincEst,
		strObiettivo,
		strAzioniCon, strAnalisiLavoro
	)
	values (?,?,?,?,?,?,?,?)
" />
<!-- Aggiorna un colloquio -->
<STATEMENT name="UPDATE_COLLOQUIO"
	query="
	update or_colloquio
	SET datcolloquio = TO_DATE (?, 'dd/mm/yyyy'),            /*null*/ 
		prgspi = ?,
	    codservizio = ?,
	    strnote = ?,                                                   /*null*/
		prgAltraIscr = ?, 
		datChiusuraPer = TO_DATE (?, 'dd/mm/yyyy'),
		codMotivoChiusuraPer = ?,
		codEsitoColl = ?,	
		codLineaAz = ?,	       
	    cdnutmod = ?,
	    dtmmod = SYSDATE,
		numklocolloquio=? 
	WHERE  prgcolloquio = ?
" />
<STATEMENT name="UPDATE_SCHEDA_COLLOQUIO"
	query="
	update or_scheda_colloquio
	SET 		
	       strDesAspir = ?,
	       strRisPotenz = ?,
	       strVincLav = ?,                                                   /*null*/
	       strVincEst = ?,
	       strObiettivo = ?,
		   strAzioniCon=?,
		   strAnalisiLavoro=?
	WHERE  prgColloquio = ?
" />
<STATEMENT name="DELETE_COLLOQUIO"
	query="
		delete FROM or_colloquio
		where prgColloquio = ?
" />
<STATEMENT name="DELETE_SCHEDA_COLLOQUIO"
	query="
		delete FROM or_scheda_colloquio
		where prgColloquio = ?
" />
<STATEMENT name="OR_COLLOQUIO_NEXTVAL"
	query="
	select s_or_colloquio.nextval as do_nextval from dual
" />
<!-- Percorsi concordati per un colloquio : ancora in fase di definizione............. 
	la lista dovra' estrarre sia i percorsi associati al patto aperto che quelli 
	non ancora associati quindi bisognera' passare la query al PattoManager come 
	nel caso, per esempio, delle indisponibilita' temporanee -->
<STATEMENT name="PERCORSI_CONCORDATI"
	query="
	SELECT conc.datstimata, conc.strnote, az.strdescrizione AS descrizioneazione,
	       to_char(az.datinizioval, 'dd/mm/yyyy') AS datainizioazione, 
		   to_char(az.datfineval, 'dd/mm/yyyy') AS datafineazione,
	       es.strdescrizione AS descrizioneesito,
	       to_char(es.datinizioval,'dd/mm/yyyy') AS datainizioesito, 
		   to_char(es.datfineval, 'dd/mm/yyyy') AS datafineesito,
	       to_char(coll.datcolloquio, 'dd/mm/yyyy') as dataColloquio	       
	  FROM or_colloquio coll,
	       or_percorso_concordato conc,
	       de_azione az,
	       de_esito es
	 WHERE coll.prgcolloquio = conc.prgcolloquio
	   AND conc.prgazioni = az.prgazioni
	   AND conc.codesito = es.codesito (+)
" />
<STATEMENT name="DELETE_PERCORSO"
	query="
	delete FROM or_percorso_concordato where prgPercorso = ?
" />
<STATEMENT name="GET_CORSO_CIG"
	query="
		select count(prgCorsoCi) as corsoCIG
		from ci_corso   
		where prgPercorso = ?
" />

<!-- RESTITUISCE true SE L'AZIONE E' UNA PIC con ESITO RENDICONTAZIONE = 
	EROGATO -->
<STATEMENT name="GET_PRESAINCARICO_CIG"
	query="
		select decode(decode(per.prgAzioni,151,'t','f') || decode(per.codesitorendicont,'E','t','f'),'tt','true','false') as presaincaricoCIG
		from or_percorso_concordato per   		
		where per.prgPercorso = ?
" />
<STATEMENT name="DE_PRESTAZIONI_CIG"
	query="
		select CODSERVIZICIG as codice, STRDESCRIZIONE || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', '') as descrizione 			   
		from DE_SERVIZICIG 
		ORDER BY STRDESCRIZIONE
" />

<STATEMENT name="GET_NUMMAXRIPETIZIONI_PRESTAZIONI"
	query="
		select NVL(numMaxRipetizioni,0) as numMaxRipetizioni 
		from DE_SERVIZICIG   
		where CODSERVIZICIG = ?
" />
<STATEMENT name="GET_NUMRIPETIZIONIESISTENTI_PRESTAZIONI_UPDATE"
	query="
		select count(*) as numRipetizioniEsistenti 
		from or_percorso_concordato pe		
		where pe.prgColloquio = ?
		and pe.CODSERVIZICIG = ? 
		and pe.prgPercorso != ? 
		and pe.codesitorendicont = 'E'
" />
<STATEMENT name="GET_NUMRIPETIZIONIESISTENTI_PRESTAZIONI_INSERT"
	query="
		select count(*) as numRipetizioniEsistenti 
		from or_percorso_concordato pe		
		where pe.prgColloquio = ?
		and pe.CODSERVIZICIG = ?  
		and pe.codesitorendicont = 'E'
" />
<!-- inserisce un percorso concordato -->
<STATEMENT name="INSERT_PERCORSO"
	query="
	insert into or_percorso_concordato(prgColloquio, prgPercorso, datStimata, prgAzioni, codEsito, datEffettiva, strNote, 
					cdnUtIns, dtmIns, cdnUtMod, dtmMod, codServiziCig, flgMediatore, flgAbilita, codEsitoRendicont, prgprogrammaq,
					CODTIPOLOGIADURATA, NUMYGDURATAMIN, NUMYGDURATAMAX, NUMYGDURATAEFF, FLGGRUPPO, NUMPARTECIPANTI, DATADESIONEGG, strCFDatoreLavoro,
					prgColloquioAdesione, prgPercorsoAdesione, datavvioazione, PRGSPIPROPOSTA, PRGSPIAVVIO, PRGSPICONCLUSIONE, DATDICHIARAZIONE, CODENTE, PRGRDC) 
		values(?,?,to_date(?,'dd/mm/yyyy'), ?, ?, to_date(?,'dd/mm/yyyy'), ?, ?, sysdate, ?, sysdate,?,?,?,?,? ,?,?,?,?,?,?,to_date(?,'dd/mm/yyyy'),?,
		?, ?, to_date(?,'dd/mm/yyyy'), ?,?,?, to_date(?,'dd/mm/yyyy'),?,?)
"/>

<!-- RECUPERA I PERCORSI CON DATA, COLLOQUIO ED AZIONE SPECIFICATI -->
<STATEMENT name="GET_AZIONE_PERCORSO"
	query="
        Select or_percorso_concordato.prgPercorso 
        From or_percorso_concordato, or_colloquio
        Where or_percorso_concordato.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO
              and or_colloquio.cdnlavoratore = ?
              and or_percorso_concordato.prgAzioni = ?
              and or_percorso_concordato.datStimata = to_date(?,'dd/mm/yyyy') " />

<!-- Controlla, prima dell'aggiornamento, se ci sono PERCORSI CON DATA, COLLOQUIO 
	ED AZIONE uguali -->
<STATEMENT name="CONTROLLA_ESISTENZA_AZIONE"
	query="
        Select or_percorso_concordato.prgPercorso
        From or_percorso_concordato, or_colloquio
        Where or_percorso_concordato.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO
              and or_colloquio.cdnlavoratore = ?
              and or_percorso_concordato.prgAzioni = ?
              and or_percorso_concordato.datStimata = to_date(?,'dd/mm/yyyy')
              and or_percorso_concordato.PRGPERCORSO != ?
              " />


<!-- lista dei percorsi legati e non legati al patto. A causa della presenza 
	di una chiave con due campi la select non viene gestita dal PattoManager 
	ma si provvede ad una gestione esplicita da codice -->
<STATEMENT name="LIST_PERCORSI_CONCORDATI"
	query="
	        SELECT DISTINCT per.prgcolloquio, per.prgpercorso, 
	       		to_char(per.datstimata, 'dd/mm/yyyy') as datstimata,
                az.prgazioni,
                az.strDescrizione || 
				(case when (nvl(az_ra.codServizio, '-') = 'NGG' and nvl(az.codAzioneSifer, '-') != '-' and '8' in (select codregionesil from ts_generale)) 
            	then ' - ' || az.codAzioneSifer end) as azione,
                case 
                	when de_vch_stato.strdescrizione is null then es.strDescrizione
                	else es.strDescrizione || '&lt;br&gt;' || de_vch_stato.strdescrizione
                end as esito,
                es.codesito,
                per.codEsitoRendicont as codesitorendicont,               
                to_char(per.dateffettiva, 'dd/mm/yyyy') as dateffettiva,                  
                az.prgAzioneRagg,        
                az_ra.strDescrizione as misura,
				leg.PRGpattolavoratore, leg.STRCHIAVETABELLA, 
				nvl (leg.prglavpattoscelta,-1) as prglavpattoscelta, leg.FLGPATTO297, 
				leg.statoatto || ' / ' || TO_CHAR (leg.datProtocollo, 'dd/mm/yyyy') as statoAttoDatProtInf,
				leg.statoatto || ' / ' || TO_CHAR (leg.datUltimoProtocollo, 'dd/mm/yyyy') as statoAtto,
				to_char(leg.datstipula, 'dd/mm/yyyy') as datstipula,
				to_char(leg.datScadConferma, 'dd/mm/yyyy') as datScadConferma,
				to_char(coll.DATCOLLOQUIO, 'dd/mm/yyyy') as datColloquio, 
				coll.PRGALTRAISCR as prgCigColloquio, 
				nvl(prest.strDescrizione,'') as prestazioneCIG,
				nvl(per.flg_non_modificare,'') as flgNonModificare, de_vch_stato.strdescrizione as descStatoVoucher, or_vch_voucher.prgvoucher,
				case
					when or_vch_voucher.prgvoucher is not null then to_char(or_vch_voucher.prgvoucher)
					else '0'
				end as prgvoucherhiddencolumn,
				case   	   
        			when per.datadesionegg is not null then to_char(per.datadesionegg, 'dd/mm/yyyy')
        			when perAdesione.datadesionegg is not null then to_char(perAdesione.datadesionegg, 'dd/mm/yyyy')
        			else null
        		end as datadesionegg,
        		decode(tabCondizionalita.counCond, null, '0',0,'0','1') as viewCondizionalita
           FROM or_percorso_concordato per,
                de_esito es,
                de_azione az,
                or_colloquio coll,
                de_azione_ragg az_ra, 
                DE_SERVIZICIG prest,
                or_percorso_concordato perAdesione,
                ( /* select interna che estrae i record legati al patto   */
					SELECT aps.prgpattolavoratore, am.datstipula, am.flgpatto297,
		                 des.strdescrizione AS statoatto, aps.prglavpattoscelta,
		                 aps.strchiavetabella, aps.STRCHIAVETABELLA2,
		                 am.datScadConferma, aps.datProtocollo, am.datUltimoProtocollo
		            FROM am_lav_patto_scelta aps,
		                 am_patto_lavoratore am,
		                 de_stato_atto des,
		                 or_percorso_concordato tab_ass,
						 or_colloquio tab_coll
		            WHERE aps.prgpattolavoratore = am.prgpattolavoratore
			             /*AND am.datfine IS NULL*/
			             AND am.codstatoatto = des.codstatoatto
			             AND tab_coll.cdnlavoratore = ?
						 and tab_ass.PRGcolloquio = tab_coll.prgColloquio
			             AND aps.strchiavetabella = tab_ass.PRGPERCORSO						 
			             AND (aps.codlsttab = 'OR_PER')				
				) leg, or_vch_voucher, de_vch_stato,
				 (  
			              SELECT NVL(COUNT(AM_CONDIZIONALITA.PRGCONDIZIONALITA),0) AS counCond , 
                     		or_colloquio.PRGCOLLOQUIO as prgColl ,
                     		or_percorso_concordato.PRGPERCORSO as prgPercorso
			              FROM or_colloquio      
                     		INNER JOIN or_percorso_concordato on (or_colloquio.PRGCOLLOQUIO = or_percorso_concordato.PRGCOLLOQUIO)
			              	left outer JOIN de_servizio  
			              		ON (de_servizio.CODSERVIZIO  = or_colloquio.CODSERVIZIO  AND (NVL(de_servizio.FLGCONDIZIONALITA, 'N') = 'S'))  
			               left outer JOIN  AM_CONDIZIONALITA   
			              	ON (or_colloquio.PRGCOLLOQUIO = AM_CONDIZIONALITA.PRGCOLLOQUIO       
                               		 and or_percorso_concordato.PRGPERCORSO = AM_CONDIZIONALITA.PRGPERCORSO )  
			              where or_colloquio.cdnlavoratore = ?               
			              group by or_colloquio.PRGCOLLOQUIO, or_percorso_concordato.PRGPERCORSO  				  
				) tabCondizionalita   
          WHERE per.prgcolloquio = coll.prgcolloquio
            AND coll.cdnlavoratore = ?
            AND per.codesito = es.codesito (+)
            AND per.prgpercorsoadesione = perAdesione.prgpercorso (+)
            AND per.prgcolloquioadesione = perAdesione.prgcolloquio (+) 
            AND per.prgazioni = az.prgazioni						
			and leg.STRCHIAVETABELLA (+) = per.PRGPERCORSO 
			and prest.codServiziCig (+) = per.codServiziCig
			AND (per.prgpercorso = or_vch_voucher.prgpercorso (+) AND per.prgcolloquio = or_vch_voucher.prgcolloquio (+))
            AND (or_vch_voucher.codstatovoucher = de_vch_stato.codstatovoucher (+))
			and per.prgcolloquio= ?
      AND az.prgAzioneRagg = az_ra.prgAzioniRagg 
      AND coll.prgcolloquio =  tabCondizionalita.prgColl
      AND per.prgpercorso = tabCondizionalita.prgPercorso
   	  order by datstimata
" />
<STATEMENT name="UPDATE_PERCORSO_CONCORDATO"
	query="
	update or_percorso_concordato set 
		datStimata = to_date(?,'dd/mm/yyyy'),
		prgAzioni = ?,
		codEsito = ?,
		codEsitoRendicont = ?,
		datEffettiva = to_date(?,'dd/mm/yyyy'),
		strNote = ?,
		dtmMod = sysdate,
		cdnUtMod = ?, 
		codServiziCig = ?, 
		flgMediatore = ?, 
		flgAbilita = ? ,
		prgprogrammaq = ? ,
		CODTIPOLOGIADURATA = ?,
		NUMYGDURATAMIN = ?,
		NUMYGDURATAMAX = ?,
		NUMYGDURATAEFF = ?,
		FLGGRUPPO = ?,
		NUMPARTECIPANTI = ?,
		STRCFDATORELAVORO = ?,
		DATADESIONEGG = to_date(?,'dd/mm/yyyy'),
		prgColloquioAdesione = ?,
		prgPercorsoAdesione = ?,
		datAvvioAzione = to_date(?,'dd/mm/yyyy'),
		PRGSPIPROPOSTA = ?,
		PRGSPIAVVIO = ?,  
		PRGSPICONCLUSIONE = ?, DATDICHIARAZIONE = to_date(?,'dd/mm/yyyy'), CODENTE = ?, PRGRDC = ?
	where prgPercorso = ?
"/>
<!-- il percorso concordato specifico di un lavoratore legato o meno al patto 
	(query esplicita non gestita dal pattomanager ) -->
<STATEMENT name="GET_PERCORSO_CONCORDATO"
	query="
		   SELECT DISTINCT per.prgcolloquio, per.prgpercorso, 
	       		to_char(per.datstimata, 'dd/mm/yyyy') as datstimata,
	       		to_char(per.datavvioazione, 'dd/mm/yyyy') as datavvioazione,
	       		to_char(per.datdichiarazione, 'dd/mm/yyyy') as datdichiarazione,
                az.prgazioni,                 
                az.strDescrizione as azione,
                az.flgFormazione as flgFormazione,
                nvl(ragg.flg_misurayei, 'N') flgMisuraYei, 
                es.strDescrizione as esito,
                es.codesito,
                re.codesitorendicont as codesitorendicont, per.codEnte,
                re.strdescrizione as esitorendicont,
				to_char(per.dateffettiva, 'dd/mm/yyyy') as dateffettiva,                                
                per.strNote,
                per.codServiziCIG, per.flgMediatore, per.flgAbilita, per.flgGruppo, per.numPartecipanti, 
				leg.PRGpattolavoratore, leg.STRCHIAVETABELLA, 
				leg.prglavpattoscelta, leg.FLGPATTO297, 
				leg.statoatto || ' / ' || TO_CHAR (leg.datUltimoProtocollo, 'dd/mm/yyyy') as statoAtto, 
				leg.statoatto || ' / ' || TO_CHAR (leg.datProtocollo, 'dd/mm/yyyy') as statoAttoDatProtInf,
				to_char(leg.datstipula, 'dd/mm/yyyy') as datstipula,
				to_char(leg.datscadconferma,'DD/MM/YYYY') datscadconferma,
				to_char(leg.datProtocollo, 'dd/mm/yyyy') as datProtocollo,
				per.prgProgrammaq,
				azienda.strragionesociale,
		        to_char(orp.datinizio, 'dd/mm/yyyy') as datinizio,
		        to_char(orp.datfine, 'dd/mm/yyyy') as datfine,
		        de_stato_programma.strdescrizione as descrstatoprog,
				orp.strtitolo,
				per.CDNUTINS, to_char(per.DTMINS, 'dd/mm/yyyy hh24:mi') as DTMINS,
				per.CDNUTMOD, to_char(per.DTMMOD, 'dd/mm/yyyy hh24:mi') as DTMMOD,				
				per.CODTIPOLOGIADURATA,
				per.NUMYGDURATAMIN,
				per.NUMYGDURATAMAX,
				per.NUMYGDURATAEFF,
				per.FLG_NON_MODIFICARE, per.STRCFDATORELAVORO AS CFENTEPROMOTORE,
				to_char(per.DATADESIONEGG, 'dd/mm/yyyy') as datAdesioneGG,
				per.codesitoformazione as CODESITOSIFER, to_char(DTMESITOFORMAZIONE, 'dd/mm/yyyy hh24:mi:ss') as DTMESITOFORMAZIONE,
				to_char(DATAVVIOATTIVITAFORMATIVA, 'dd/mm/yyyy') as DATAVVIOATTIVITAFORMATIVA,
				per.prgPercorsoAdesione || '-' || per.prgColloquioAdesione as codiceAdesioneGG,
				per.STRNOTEESITOFORMAZIONE,
				to_char(per.DATFINEAZIONEFORMAZIONE, 'dd/mm/yyyy') as DATFINEAZIONEFORMAZIONE,
				de_vch_stato.strdescrizione descStatoVoucher, or_vch_voucher.codstatovoucher, 
				trim(to_char(or_vch_voucher.decvaltot, '9999999.99')) decvaltot, 
				trim(to_char(or_vch_voucher.decspesaeffettiva, '9999999.99')) decspesaeffettiva, 
				to_char(or_vch_voucher.datassegnazione, 'dd/mm/yyyy') datassegnazione, to_char(or_vch_voucher.datattivazione, 'dd/mm/yyyy') datattivazione,
				or_vch_voucher.codAttivazione, to_char(or_vch_voucher.datfineerogazione, 'dd/mm/yyyy') datfineerogazione,
				to_char(or_vch_voucher.datmaxattivazione, 'dd/mm/yyyy') datmaxattivazione, to_char(or_vch_voucher.datmaxerogazione, 'dd/mm/yyyy') datmaxerogazione,
				utAss.strcognome || ' ' || utAss.strnome as utenteAssegna, utAtt.strcognome || ' ' || utAtt.strnome as utenteAttiva,
				utConc.strcognome || ' ' || utConc.strnome as utenteConcluso, or_vch_voucher.strcfenteaccreditato, or_vch_voucher.codsede,
				an_vch_ente.strdenominazione || ' ' || an_vch_ente.strindirizzo || ' ' || comEnte.strdenominazione as sedeEnteAccreditato,
				de_prestazione.strdescrizione as descrPrestazione,
                per.PRGSPIPROPOSTA, per.PRGSPIAVVIO, per.PRGSPICONCLUSIONE, de_cod_cpi.STRDESCRIZIONE || ' - ' || coll.CODCPI descrcpi, or_vch_voucher.flgcm,
                per.PRGRDC, amRdc.STRPROTOCOLLOINPS
           FROM or_percorso_concordato per,
           		de_esito_rendicont re,
                de_esito es,
                de_azione az,
                de_azione_ragg ragg,
                or_programma_q orp,
                de_stato_programma,
                an_unita_azienda aun,
                an_azienda azienda,
                or_colloquio coll,
                DE_CPI de_cod_cpi,
                AM_RDC amRdc,
                ( /* select interna che estrae i record legati al patto   */
					SELECT aps.prgpattolavoratore, am.datstipula, am.flgpatto297, am.DATSCADCONFERMA,
		                 des.strdescrizione AS statoatto, aps.prglavpattoscelta,
		                 aps.strchiavetabella, aps.STRCHIAVETABELLA2, aps.datProtocollo, am.datUltimoProtocollo
		            FROM am_lav_patto_scelta aps,
		                 am_patto_lavoratore am,
		                 de_stato_atto des,
		                 or_percorso_concordato tab_ass,
						 or_colloquio tab_coll
		            WHERE aps.prgpattolavoratore = am.prgpattolavoratore
			             /*AND am.datfine IS NULL*/
			             AND am.codstatoatto = des.codstatoatto
			             AND tab_coll.cdnlavoratore = ?
						 and tab_ass.PRGcolloquio = tab_coll.prgColloquio
			             AND aps.strchiavetabella = tab_ass.PRGPERCORSO
			             AND (aps.codlsttab = 'OR_PER')				
				) leg, or_vch_voucher, de_vch_stato, ts_utente utAss, ts_utente utAtt, ts_utente utConc, an_vch_ente, de_comune comEnte,
				MA_azione_prestazione, de_prestazione
          WHERE per.prgcolloquio = coll.prgcolloquio
            AND de_cod_cpi.CODCPI = coll.CODCPI
            AND coll.cdnlavoratore = ?
            AND per.prgPercorso = ?
            AND per.codesito = es.codesito (+)
            and per.prgprogrammaq = orp.prgprogrammaq (+)
            and orp.codstatoprogramma =  de_stato_programma.codstatoprogramma (+)            
            and orp.prgazienda = aun.prgazienda (+)
            and orp.prgunita= aun.prgunita  (+) 
            and aun.prgazienda = azienda.prgazienda  (+)
            AND per.codesitorendicont = re.codesitorendicont (+)
            AND per.prgazioni = az.prgazioni	
            and az.prgazioneragg = ragg.prgazioniragg 					
			and leg.STRCHIAVETABELLA(+) = per.PRGPERCORSO
			AND (per.prgpercorso = or_vch_voucher.prgpercorso (+) AND per.prgcolloquio = or_vch_voucher.prgcolloquio (+))
			AND (or_vch_voucher.codstatovoucher = de_vch_stato.codstatovoucher (+))
			AND (or_vch_voucher.cdnutass = utAss.cdnut (+))
			AND (or_vch_voucher.cdnutatt = utAtt.cdnut (+))
			AND (or_vch_voucher.cdnutconc = utConc.cdnut (+))
			AND (or_vch_voucher.strcfenteaccreditato = an_vch_ente.strcodicefiscale (+) AND or_vch_voucher.codsede = an_vch_ente.codsede (+))
			AND (an_vch_ente.codcom = comEnte.codcom (+))
			AND (per.prgazioni = MA_azione_prestazione.prgazioni(+))
      		AND (MA_azione_prestazione.PRGPRESTAZIONE = de_prestazione.PRGPRESTAZIONE (+))
      		AND (amRdc.PRGRDC (+) = per.PRGRDC )
" />
<STATEMENT name="DELETE_PERCORSI"
	query="
	delete FROM or_percorso_concordato where prgColloquio = ?
" />
<STATEMENT name="GET_DE_AZIONE"
	query="
	select de_azione.prgAzioni as codice, de_azione.strDescrizione as descrizione, de_azione.datinizioval, de_azione.datfineval, de_azione.prgAzioneRagg,
               nvl(ma_azione_tipoattivita.codtipoattivita, '-') as codtipoattivita, de_azione.flgFormazione,
               nvl(de_azione.flgrinnovopatto, 'N') as flgrinnovopatto,MA_azione_prestazione.prgprestazione, MA_azione_prestazione.prgazioni as prgAzPrest, 
               de_prestazione.strdescrizione as descrizionePrestazione, nvl(de_azione.codprogetto, '-') codprogetto,
        DECODE(SYSDATE,
      GREATEST(SYSDATE, de_azione.DATINIZIOVAL, de_azione.DATFINEVAL), 'SCADUTE',
        LEAST(SYSDATE, de_azione.DATINIZIOVAL, de_azione.DATFINEVAL),'SCADUTE', 
        'VALIDE') as gruppo,DECODE(SYSDATE,
      GREATEST(SYSDATE, de_azione.DATINIZIOVAL, de_azione.DATFINEVAL), 2,
        LEAST(SYSDATE, de_azione.DATINIZIOVAL, de_azione.DATFINEVAL), 2, 
        1) as ordine_gruppo
               from de_azione
               left join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni and
               		trunc(sysdate) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval))
               left join MA_azione_prestazione on (de_azione.prgazioni = MA_azione_prestazione.PRGAZIONI) 
               left join de_prestazione on (MA_azione_prestazione.PRGPRESTAZIONE = de_prestazione.PRGPRESTAZIONE)	
               order by ordine_gruppo, de_azione.strDescrizione 
" />
<STATEMENT name="GET_DE_AZIONE_NOGROUP"
	query="
	select de_azione.prgAzioni as codice, de_azione.strDescrizione || 
				(case when (nvl(de_azione_ragg.codServizio, '-') = 'NGG' and nvl(de_azione.codAzioneSifer, '-') != '-' and '8' in (select codregionesil from ts_generale)) 
            	then ' - ' || de_azione.codAzioneSifer end) || DECODE(SYSDATE,GREATEST(SYSDATE, de_azione.datinizioval, de_azione.datfineval), ' (scaduto)',
               LEAST(SYSDATE, de_azione.datinizioval, de_azione.datfineval),' (scaduto)', 
               '') as descrizione, de_azione.datinizioval, de_azione.datfineval, de_azione.prgAzioneRagg, nvl(de_azione_ragg.codServizio, '-') codServizio, 
               nvl(ma_azione_tipoattivita.codtipoattivita, '-') as codtipoattivita, de_azione.flgFormazione,
               nvl(de_azione.flgrinnovopatto, 'N') as flgrinnovopatto,MA_azione_prestazione.prgprestazione, MA_azione_prestazione.prgazioni as prgAzPrest, 
               de_prestazione.strdescrizione as descrizionePrestazione, nvl(de_azione.codprogetto, '-') codprogetto,
        DECODE(SYSDATE,
      GREATEST(SYSDATE, de_azione.DATINIZIOVAL, de_azione.DATFINEVAL), 'SCADUTE',
        LEAST(SYSDATE, de_azione.DATINIZIOVAL, de_azione.DATFINEVAL),'SCADUTE', 
        'VALIDE') as gruppo,DECODE(SYSDATE,
      GREATEST(SYSDATE, de_azione.DATINIZIOVAL, de_azione.DATFINEVAL), 2,
        LEAST(SYSDATE, de_azione.DATINIZIOVAL, de_azione.DATFINEVAL), 2, 
        1) as ordine_gruppo
               from de_azione
               inner join de_azione_ragg on de_azione_ragg.prgAzioniRagg = de_azione.prgAzioneRagg
               left join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni and
               		trunc(sysdate) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval))
               left join MA_azione_prestazione on (de_azione.prgazioni = MA_azione_prestazione.PRGAZIONI) 
               left join de_prestazione on (MA_azione_prestazione.PRGPRESTAZIONE = de_prestazione.PRGPRESTAZIONE)	
               order by ordine_gruppo, de_azione.strDescrizione 
" />
<STATEMENT name="GET_DE_AZIONE_BYCOD"
    query="
    select prgAzioni as codice, codazionesifer , strDescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', 
               '') as descrizione, datinizioval, datfineval, prgAzioneRagg, flgFormazione 
               from de_azione
               WHERE codazionesifer = ?
               order by strdescrizione
" />

<STATEMENT name="GET_DE_AZIONE_BYPRG"
    query="
    select az.prgAzioni as codice, az.codazionesifer , az.strDescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, az.DATINIZIOVAL, az.DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, az.DATINIZIOVAL, az.DATFINEVAL),'(scaduto)', 
               '') as descrizione, az.datinizioval, az.datfineval, az.prgAzioneRagg, az.flgFormazione, az.FLGADESIONEGG,
               ragg.CODMONOPACCHETTO, nvl(ragg.flg_misurayei, 'N') flg_misurayei, az.codprogetto, ma_azione_tipoattivita.codtipoattivita
               from de_azione az
               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
               left join ma_azione_tipoattivita on (az.prgazioni = ma_azione_tipoattivita.prgazioni and
			   			trunc(sysdate) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval))
               WHERE az.prgazioni = ?
" />

<STATEMENT name="GET_DE_ESITO"
	query="
	select codEsito as codice, 
strDescrizione as descrizione,
                datinizioval, datfineval, nvl(numValore,0) as numValore, codEsitoRendicont, flgFormazione,
                    DECODE(SYSDATE,
      GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 'SCADUTI',
        LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'SCADUTI', 
        'VALIDI') as gruppo,DECODE(SYSDATE,
      GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 2,
        LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 2, 
        1) as ordine_gruppo 
               from de_esito
               order 
               by ordine_gruppo, decode(codEsito,'PRO',1,'RIF',2,'RES',3,'AVV',4,
               'INT',5,'FC',6,'NA',7,'ANT',8,'CAN',9 ,'INF',10,'NG',11, 'NI',12,13),
               descrizione
" />

<STATEMENT name="GET_DE_ESITORENDICONT"
	query="
	select  codesitorendicont as codice, strdescrizione as descrizione, 
			to_char(datinizioval,'dd/mm/yyyy') as datinizioval, to_char(datfineval,'dd/mm/yyyy') as datfineval
	from de_esito_rendicont 
	order by numordine
" />


<STATEMENT name="OR_PERCORSO_CONCORDATO_NEXTVAL"
	query="
	select s_or_percorso_concordato.nextval as do_nextval from dual
" />
<STATEMENT name="PATTO_APERTO_NOTE"
	query="
	SELECT p.strnoteambitoprof, p.strnoteazioni, p.strnoteimpegni, p.flgPatto297,
	   p.strnotesituazioneamm, p.PRGPATTOLAVORATORE, p.CDNLAVORATORE, p.numklopattolavoratore,	   
	   to_char(p.datStipula, 'dd/mm/yyyy') as datStipula, 
	   to_char(p.datScadConferma, 'dd/mm/yyyy') as datScadenzaConferma,
	   p.codStatoAtto, p.codTipoPatto 
	FROM am_patto_lavoratore p
	WHERE p.datfine IS NULL AND p.cdnlavoratore = ?
" />
<STATEMENT name="GET_OR_PER_NON_LEGATE"
	query="
		  SELECT DISTINCT per.datstimata as dat , TO_CHAR (per.datstimata, 'dd/mm/yyyy') AS datstimata,
                per.prgcolloquio, per.prgpercorso, per.strNote, az.prgazioni,
                az.strdescrizione AS azione, es.strdescrizione AS esito,
                es.codesito,
				ragg.STRDESCRIZIONE as azione_ragg	,
		        to_char(am_patto_lavoratore.DATSCADCONFERMA,'dd/mm/yyyy') as datscadconferma, 
				to_char(am_patto_lavoratore.DATSTIPULA, 'dd/mm/yyyy') as datstipula
          FROM or_percorso_concordato per,
                de_esito es,
                de_azione az,
				de_azione_ragg ragg,
                or_colloquio coll,
				am_patto_lavoratore
          WHERE per.prgcolloquio = coll.prgcolloquio
            AND coll.cdnlavoratore = ?
            AND per.codesito = es.codesito(+)
            AND per.prgazioni = az.prgazioni
            and az.PRGAZIONERAGG = ragg.PRGAZIONIRAGG
			and am_patto_lavoratore.CDNLAVORATORE = coll.CDNLAVORATORE
			and am_patto_lavoratore.DATFINE is null
            AND NOT EXISTS (
                   SELECT aps.prgpattolavoratore
                     FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
                    WHERE aps.codlsttab = 'OR_PER'
                      AND aps.strchiavetabella = per.prgpercorso
                      AND aps.prgpattolavoratore = apl.prgpattolavoratore
                      /*AND apl.datfine IS NULL Savino 05/10/05: si evita di poter associare ad un patto una azione gia' associata ad un altro patto */
                      )
          ORDER BY dat DESC	
" />

<STATEMENT name="GET_APPUNTAMENTI_NON_LEGATI"
	query="
			SELECT to_char(ag_.DTMDATAORA,'dd/mm/yyyy') as data,
                to_char(ag_.DTMDATAORA, 'hh24:mi') as orario,
                ag_.numminuti as Durata, 
                de_.STRDESCRIZIONE AS DesServizio,
                ( nvl(esito.STRDESCRIZIONE,' ') ) AS DesEsito,
                lav.cdnLavoratore,
                lav.prgAppuntamento,
                lav.codCpi
            FROM ag_agenda ag_, 
                 de_servizio de_, 
                 ag_lavoratore lav,
                 de_esito_appunt esito                 
          	WHERE     (lav.codcpi = ag_.codcpi)
                 AND (lav.prgappuntamento = ag_.prgappuntamento)
                 and lav.codcpi = ag_.codcpi
                 AND (ag_.codservizio = de_.codservizio(+))
                 AND (ag_.CODESITOAPPUNT = esito.CODESITOAPPUNT (+))                               
                 AND (lav.cdnLavoratore = ?)
				 and not exists (
				   	   select aps.prgpattolavoratore
					   from am_lav_patto_scelta aps, am_patto_lavoratore apl
					   where aps.CODLSTTAB='AG_LAV'
					   	     and aps.STRCHIAVETABELLA=lav.CDNLAVORATORE
							 and aps.STRCHIAVETABELLA2 = lav.codcpi
							 and aps.STRCHIAVETABELLA3 = lav.prgappuntamento
					   		 AND aps.prgpattolavoratore = apl.prgpattolavoratore
                             AND apl.datfine IS NULL
				   ) 
				   order by data
" />
<STATEMENT name="GET_PATTO_INFO_GENERALI"
	query="
	 SELECT DISTINCT
       patto.prgpattolavoratore,
       patto.cdnlavoratore,
       TO_CHAR (patto.datstipula, 'dd/mm/yyyy') AS datstipula,
       patto.codstatoatto, nvl(patto.codcodificapatto, 'PT297') as codcodificapatto,
       nvl(patto.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) AS flgpatto297,
       patto.numindicesvantaggio, patto.numindicesvantaggio2, TO_CHAR (patto.datriferimento, 'dd/mm/yyyy') AS datriferimento,
       pr.strdircoordinatore,
       pr.strresponsabileuo,
       patto.strnote,
       patto.strnoteambitoprof,
       patto.strnotesituazioneamm,
       patto.strnoteazioni,
       patto.strnoteimpegni,
       TO_CHAR (did.datdichiarazione, 'dd/mm/yyyy') AS datdichiarazione,
       /* realmente usate nel report con api */
       TO_CHAR (patto.datscadconferma, 'dd/mm/yyyy') AS datscadconferma,
       lav.strsesso AS sessolavoratore,
       lav.strcognome AS cognomelavoratore,
       lav.strnome AS nomelavoratore,
       lav.strcodicefiscale,
       lav.codcomnas,
       cnasc.strdenominazione || ' (' || prnas.strtarga || ')' as com_nasc,
       TO_CHAR (lav.datnasc, 'dd/mm/yyyy') AS dat_nasc,
       lav.codcomdom,
       cdom.strdenominazione || ' (' || prdom.strtarga || ')' as com_dom,
       lav.strindirizzodom,
       lav.strteldom,
       lav.stremail,
       cpi.strresponsabile as responsabile, 
       cpi.strindirizzo AS indirizzo,
       cpi.strtel AS tel,
       cpi.strfax AS fax,
       cpi.stremail AS email,
       cpi.strdescrizione AS cpi,
       pr.strdenominazione AS provincia,
       depatto.strdescrizione AS detipopattomisura, 
       patto.codtipopatto,
       pr.strintestazionestampa,
       TO_CHAR (patto.Datanaspi, 'dd/mm/yyyy') AS dat_naspi,
       case 
          when nvl(patto.Importoar, 0) = 0 then '0.00' 
          else trim(to_char(patto.Importoar, '9999999.99')) 
        end Importoar,
       patto.Strnoteattivazione, patto.numindicesvantaggio150,
       to_char(patto.datriferimento150, 'dd/mm/yyyy') AS datriferimento150, 
       (case when to_number(nvl(
	           (select num from ts_config_loc where codtipoconfig = 'PROF_150' 
	           and strcodrif = (select codprovinciasil from ts_generale where prggenerale=1)), 0)) > 0 then 
	             de_profiling_150.strprofiling
	       else ''
	    end) as strprofiling150, 
       ente.strCodiceFiscale AS cfEnteAccr,  
       ente.strdenominazione AS ragSocEnte,
       ente.strIndirizzo AS indEnte,
       ente.strTel AS telEnte,
       cente.strdenominazione || ' (' || prente.strtarga || ')' as com_ente,
       patto.strNotaEnte AS notaEnte, patto.STRCODABIPORTALE,  TO_CHAR (patto.DTMINVIOPORTALE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMINVIOPORTALE,
       TO_CHAR (patto.DTMACCETTAZIONE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMACCETTAZIONE,
       patto.STRTIPOACCETTAZIONE, patto.CODMONOACCETTAZIONE, patto.FLGPATTOONLINE,
       TO_CHAR (patto.DTMULTIMASTAMPA, 'dd/mm/yyyy  hh24:mi:ss') AS DTMULTIMASTAMPA ,patto.FLGREINVIOPTONLINE
   FROM am_patto_lavoratore patto,
       an_lavoratore lav,
       am_dich_disponibilita did,
       am_elenco_anagrafico ea,
       de_cpi cpi,
       de_provincia pr,
       de_comune co,
       de_comune cnasc,
       de_provincia prnas,
       de_comune cdom,
       de_provincia prdom,
       am_stato_occupaz so,
       de_stato_occupaz deso,
       de_tipo_patto depatto,
       de_stato_occupaz_ragg desor,
       de_codifica_patto,
       an_vch_ente ente, 
       de_comune cente,
       de_provincia prente,
       de_profiling_150        
 WHERE lav.cdnlavoratore = ? and patto.datfine IS NULL and nvl(patto.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'S'
       AND lav.cdnlavoratore = patto.cdnlavoratore
       AND patto.cdnlavoratore = ea.cdnlavoratore
       AND ea.prgelencoanagrafico = did.prgelencoanagrafico(+)
       AND did.datfine IS NULL
       AND did.codstatoatto = 'PR'
       AND cpi.codcpi = patto.codcpi
       AND cpi.codcom = co.codcom
       AND co.codprovincia = pr.codprovincia
       AND patto.prgstatooccupaz = so.prgstatooccupaz(+)
       AND patto.codcodificapatto = de_codifica_patto.codcodificapatto(+)
       AND so.codstatooccupaz = deso.codstatooccupaz(+)
       AND deso.codstatooccupazragg = desor.codstatooccupazragg(+)  
       AND depatto.codtipopatto = patto.codtipopatto
       AND lav.codcomnas = cnasc.codcom
       AND cnasc.codprovincia = prnas.codprovincia
       AND lav.codcomdom = cdom.codcom
       AND cdom.codprovincia = prdom.codprovincia
       AND (patto.strEnteCodiceFiscale = ente.strCodiceFiscale(+) AND patto.codSede = ente.codSede(+))
       AND ente.codCom = cente.codCom(+)
       AND cente.codProvincia = prente.codProvincia(+)
       AND patto.numProfiling = de_profiling_150.numProfiling(+)
" />
<STATEMENT name="GET_PATTO_MOBILITA_INFO_GENERALI"
	query="
	   SELECT DISTINCT 
	   		patto.prgpattolavoratore,
			deso1.codstatooccupazragg,
			patto.cdnlavoratore,            
            TO_CHAR (patto.datstipula, 'dd/mm/yyyy') AS datstipula,
            patto.codstatoatto, nvl(patto.codcodificapatto, 'PT297') as codcodificapatto,
            nvl(patto.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) AS flgpatto297,
            patto.numindicesvantaggio, patto.numindicesvantaggio2, TO_CHAR (patto.datriferimento, 'dd/mm/yyyy') AS datriferimento,
            pr.strdircoordinatore, 
			pr.strresponsabileuo,   
			patto.strNote,
			patto.strNoteAmbitoProf, 
			patto.strNoteSituazioneAmm, 
			patto.strNoteAzioni,
			patto.strNoteImpegni,			
			case 
			   when mob.datInizio is not null then 'M'
			   else 'S'
			 end statoDichiarazione,
			case 
			   when mob.datInizio is not null then to_char(mob.datInizio, 'dd/mm/yyyy')
			   else to_char(so1.datanzianitadisoc, 'dd/mm/yyyy')
			 end datDichiarazione,
			/* realmente usate nel report con api */
            TO_CHAR (patto.datscadconferma,'dd/mm/yyyy') AS datScadConferma,
            lav.strsesso as sessoLavoratore,
            lav.strcognome as cognomeLavoratore, 
            lav.strnome as nomeLavoratore, 
            lav.strcodicefiscale,
            lav.codcomnas,
       		cnasc.strdenominazione || ' (' || prnas.strtarga || ')' as com_nasc,
       		TO_CHAR (lav.datnasc, 'dd/mm/yyyy') AS dat_nasc,
       		lav.codcomdom,
       		cdom.strdenominazione || ' (' || prdom.strtarga || ')' as com_dom,    
       		cpi.strresponsabile as responsabile, 
            cpi.STRINDIRIZZO as indirizzo, 
            cpi.STRTEL as tel,
            cpi.STRFAX as fax, 
            cpi.STREMAIL as email, 
            cpi.strdescrizione as Cpi, 
            pr.strdenominazione as Provincia, 
            depatto.strDescrizione as deTipoPattoMisura, patto.codtipopatto,
            pr.strintestazionestampa,
       		TO_CHAR (patto.Datanaspi, 'dd/mm/yyyy') AS dat_naspi,
			case 
			   when nvl(patto.Importoar, 0) = 0 then '0.00' 
			   else trim(to_char(patto.Importoar, '9999999.99')) 
			 end Importoar,
			patto.Strnoteattivazione, patto.numindicesvantaggio150, 
			to_char(patto.datriferimento150, 'dd/mm/yyyy') AS datriferimento150, 
			ente.strCodiceFiscale AS cfEnteAccr,  
			ente.strdenominazione AS ragSocEnte,
			ente.strIndirizzo AS indEnte,
			ente.strTel AS telEnte,
			cente.strdenominazione || ' (' || prente.strtarga || ')' as com_ente,
			patto.strNotaEnte AS notaEnte, patto.STRCODABIPORTALE,  TO_CHAR (patto.DTMINVIOPORTALE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMINVIOPORTALE,
       		TO_CHAR (patto.DTMACCETTAZIONE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMACCETTAZIONE,
       		patto.STRTIPOACCETTAZIONE, patto.CODMONOACCETTAZIONE, patto.FLGPATTOONLINE,
            TO_CHAR (patto.DTMULTIMASTAMPA, 'dd/mm/yyyy  hh24:mi:ss') AS DTMULTIMASTAMPA ,patto.FLGREINVIOPTONLINE
        FROM am_patto_lavoratore patto,
         	an_lavoratore lav, 
			am_mobilita_iscr mob,
			de_cpi cpi,
         	de_provincia pr,
         	de_comune co,
       		de_comune cnasc,
       		de_provincia prnas,
       		de_comune cdom,
       		de_provincia prdom,
         	am_stato_occupaz so,
			am_stato_occupaz so1,
         	de_stato_occupaz deso,
			de_stato_occupaz deso1,
			am_stato_occupaz soPatto,
			de_stato_occupaz desoPatto,
         	de_tipo_patto depatto,
         	de_stato_occupaz_ragg desor,
         	de_codifica_patto,
         	an_vch_ente ente, 
	       	de_comune cente,
	       	de_provincia prente  
		WHERE lav.cdnLavoratore = ? and patto.datfine IS NULL and nvl(patto.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'S'
			AND lav.cdnlavoratore = patto.cdnlavoratore
			AND patto.cdnLavoratore = mob.cdnLavoratore (+)
			and (
				 	(trunc(patto.DATSTIPULA) between trunc(mob.DATINIZIO) and trunc(mob.DATFINE))
					or
					(
						patto.DATSTIPULA &gt;= (select max(mobilita.DATINIZIO)
	               							   from am_mobilita_iscr mobilita
	               							  where mobilita.CDNLAVORATORE = lav.cdnLavoratore )
					)
					or
					( (trunc(patto.DATSTIPULA) between trunc(soPatto.DATINIZIO) and trunc(nvl(soPatto.DATFINE, patto.DATSTIPULA)))
					   and (desoPatto.codstatooccupazragg = 'D' or desoPatto.codstatooccupazragg = 'I')
					)
				)
			AND cpi.codcpi = patto.codcpi
			AND cpi.codcom = co.codcom
       		AND co.codprovincia = pr.codprovincia
			AND patto.prgstatooccupaz = so.prgstatooccupaz(+)
			AND patto.codcodificapatto = de_codifica_patto.codcodificapatto(+)
			AND so.codstatooccupaz = deso.codstatooccupaz(+)
			and so1.CDNLAVORATORE = patto.CDNLAVORATORE
			AND so1.codstatooccupaz = deso1.codstatooccupaz
			and so1.DATFINE is null
			AND deso.codstatooccupazragg = desor.codstatooccupazragg(+)
			and soPatto.CDNLAVORATORE = patto.CDNLAVORATORE
			and soPatto.codstatooccupaz = desoPatto.codstatooccupaz
			and depatto.codTipoPatto = patto.codTipoPatto
			AND lav.codcomnas = cnasc.codcom
       		AND cnasc.codprovincia = prnas.codprovincia
       		AND lav.codcomdom = cdom.codcom
       		AND cdom.codprovincia = prdom.codprovincia
       		AND (patto.strEnteCodiceFiscale = ente.strCodiceFiscale(+) AND patto.codSede = ente.codSede(+))
       		AND ente.codCom = cente.codCom(+)
       		AND cente.codProvincia = prente.codProvincia(+)       	 	
			AND (deso1.codstatooccupazragg = 'D' or deso1.codstatooccupazragg = 'I')
			order by datDichiarazione DESC 
" />
<STATEMENT name="GET_ACCORDO_GENERICO_INFO_GENERALI"
	query="
	   SELECT DISTINCT 
	   		patto.prgpattolavoratore,
			deso1.codstatooccupazragg,
			patto.cdnlavoratore,            
            TO_CHAR (patto.datstipula, 'dd/mm/yyyy') AS datstipula,
            patto.codstatoatto, nvl(patto.codcodificapatto, 'PT297') as codcodificapatto,
            nvl(patto.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) AS flgpatto297,
            patto.numindicesvantaggio, patto.numindicesvantaggio2, TO_CHAR (patto.datriferimento, 'dd/mm/yyyy') AS datriferimento,
            pr.strdircoordinatore, 
			pr.strresponsabileuo,   
			patto.strNote,
			patto.strNoteAmbitoProf, 
			patto.strNoteSituazioneAmm, 
			patto.strNoteAzioni,
			patto.strNoteImpegni,
            TO_CHAR (patto.datscadconferma,'dd/mm/yyyy') AS datScadConferma,
            lav.strsesso as sessoLavoratore,
            lav.strcognome as cognomeLavoratore, 
            lav.strnome as nomeLavoratore, 
            lav.strcodicefiscale,  
       		lav.codcomnas,
       		cnasc.strdenominazione || ' (' || prnas.strtarga || ')' as com_nasc,
       		TO_CHAR (lav.datnasc, 'dd/mm/yyyy') AS dat_nasc,
       		lav.codcomdom,
       		cdom.strdenominazione || ' (' || prdom.strtarga || ')' as com_dom,                    
            cpi.STRINDIRIZZO as indirizzo, 
            cpi.strresponsabile as responsabile, 
            cpi.STRTEL as tel,
            cpi.STRFAX as fax, 
            cpi.STREMAIL as email, 
            cpi.strdescrizione as Cpi, 
            pr.strdenominazione as Provincia, 
            depatto.strDescrizione as deTipoPattoMisura, 
            patto.codtipopatto,
            pr.strintestazionestampa,
            TO_CHAR (patto.Datanaspi, 'dd/mm/yyyy') AS dat_naspi,
	       	case 
	          when nvl(patto.Importoar, 0) = 0 then '0.00' 
	          else trim(to_char(patto.Importoar, '9999999.99')) 
	        end Importoar,
	       	patto.Strnoteattivazione, patto.numindicesvantaggio150, 
	       	to_char(patto.datriferimento150, 'dd/mm/yyyy') AS datriferimento150, 
			ente.strCodiceFiscale AS cfEnteAccr,  
			ente.strdenominazione AS ragSocEnte,
			ente.strIndirizzo AS indEnte,
			ente.strTel AS telEnte,
			cente.strdenominazione || ' (' || prente.strtarga || ')' as com_ente,
			patto.strNotaEnte AS notaEnte, patto.STRCODABIPORTALE,  TO_CHAR (patto.DTMINVIOPORTALE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMINVIOPORTALE,
       		TO_CHAR (patto.DTMACCETTAZIONE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMACCETTAZIONE,
       		patto.STRTIPOACCETTAZIONE, patto.CODMONOACCETTAZIONE, patto.FLGPATTOONLINE,
            TO_CHAR (patto.DTMULTIMASTAMPA, 'dd/mm/yyyy  hh24:mi:ss') AS DTMULTIMASTAMPA ,patto.FLGREINVIOPTONLINE
        FROM am_patto_lavoratore patto,
            an_lavoratore lav,
			de_cpi cpi,
            de_provincia pr,
            de_comune co,
       		de_comune cnasc,
       		de_provincia prnas,
       		de_comune cdom,
       		de_provincia prdom,
            am_stato_occupaz so,
			am_stato_occupaz so1,
            de_stato_occupaz deso,
			de_stato_occupaz deso1,
            de_tipo_patto depatto,
            de_stato_occupaz_ragg desor,
         	de_codifica_patto,
         	an_vch_ente ente, 
	       	de_comune cente,
	       	de_provincia prente
		WHERE lav.cdnLavoratore = ? and patto.datfine IS NULL and nvl(patto.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'N'
			AND lav.cdnlavoratore = patto.cdnlavoratore
			AND cpi.codcpi = patto.codcpi
			AND cpi.codcom = co.codcom
       		AND co.codprovincia = pr.codprovincia
			AND patto.prgstatooccupaz = so.prgstatooccupaz(+)
			AND patto.codcodificapatto = de_codifica_patto.codcodificapatto(+)
			AND so.codstatooccupaz = deso.codstatooccupaz(+)
			and so1.CDNLAVORATORE = patto.CDNLAVORATORE
			AND so1.codstatooccupaz = deso1.codstatooccupaz
			and so1.DATFINE is null
			AND deso.codstatooccupazragg = desor.codstatooccupazragg(+)             
			and depatto.codTipoPatto = patto.codTipoPatto
			AND lav.codcomnas = cnasc.codcom
       		AND cnasc.codprovincia = prnas.codprovincia
       		AND lav.codcomdom = cdom.codcom
       		AND cdom.codprovincia = prdom.codprovincia
       		AND (patto.strEnteCodiceFiscale = ente.strCodiceFiscale(+) AND patto.codSede = ente.codSede(+))
       		AND ente.codCom = cente.codCom(+)
       		AND cente.codProvincia = prente.codProvincia(+)        		
			AND (deso1.codstatooccupazragg = 'O' or deso1.codstatooccupazragg = 'A')
" />

<STATEMENT name="AUTORIZZAZIONE_PRIVACY"
	query="
	select prgprivacy, to_char(datinizio, 'dd/mm/yyyy') as datinizio, 
	flgautoriz, numkloprivacy, cdnutins, to_char(dtmins, 'dd/mm/yyyy hh24:mi') as dtmins,
	cdnutmod, to_char(dtmmod, 'dd/mm/yyyy hh24:mi') as dtmmod 
	from am_privacy 
	where cdnlavoratore = ? and datfine is null
" />

<STATEMENT name="UPDATE_PRIVACY"
	query="
	update am_privacy 	
	set flgAutoriz = ?, 
		datInizio= TO_DATE(?,'dd/mm/yyyy'),				
		cdnutmod = ?,
		dtmmod = SYSDATE,
		numkloprivacy = ?
	where prgPrivacy=? 
" />


<STATEMENT name="INSERT_PRIVACY"
	query="
	insert into am_privacy (prgPrivacy, cdnLavoratore, datInizio, datFine, flgAutoriz, cdnutins, dtmins,cdnutmod,dtmmod) 
	values (s_am_privacy.nextval,?,to_date(?,'dd/mm/yyyy'),to_date(?,'dd/mm/yyyy'),?, ?,SYSDATE,?,SYSDATE)
" />
<STATEMENT name="CHIUSURA_PATTO"
	query="
	update am_patto_lavoratore set datfine = 
		(case
			when to_date(?,'dd/mm/yyyy') &lt; trunc(datStipula) then datStipula
			else to_date(?,'dd/mm/yyyy')
		end),
	codMotivoFineAtto =	
	(case
		when ? = 'A30' then 'A7'
		else ?
	end),
	numklopattolavoratore=numklopattolavoratore+1,
	cdnutmod = ?, dtmmod = SYSDATE   
	where cdnLavoratore=? and datfine is null and flgpatto297='S'
" />
<STATEMENT name="CHIUSURA_DICH_DISP"
	query="
	update am_dich_disponibilita set datfine = 
		(case
			when to_date(?,'dd/mm/yyyy') &lt; trunc(datDichiarazione) then datDichiarazione
			else to_date(?,'dd/mm/yyyy')
		end),	
	codMotivoFineAtto = ?, 
	cdnutmod = ?, dtmMod = sysdate, numklodichdisp=numklodichdisp + 1
	where datfine is null and codStatoAtto = 'PR' and prgelencoanagrafico = (select dich.prgelencoanagrafico from am_dich_disponibilita dich, am_elenco_anagrafico anag
	where dich.PRGELENCOANAGRAFICO = anag.PRGELENCOANAGRAFICO and dich.datFine is null and anag.CDNLAVORATORE = ? AND dich.codstatoatto = 'PR')
" />
<STATEMENT name="GET_STATO_OCC_DISOC_INOC"
	query="
	select * from am_stato_occupaz 
	where cdnLavoratore = ? and datfine is null and codstatooccupaz in ('A21', 'A213','A212','B1', 'A22','A223')
" />
<STATEMENT name="INSERT_STATO_OCC_DEFAULT"
	query="
	INSERT INTO AM_STATO_OCCUPAZ 
	       (PRGSTATOOCCUPAZ, CDNLAVORATORE,DATINIZIO,CODSTATOOCCUPAZ,CDNUTINS,DTMINS,CDNUTMOD,DTMMOD, CODMONOPROVENIENZA, STRNOTE, FLGPENSIONATO)
	VALUES (S_AM_STATO_OCCUPAZ.NEXTVAL,?,TO_DATE(?,'DD/MM/YYYY'),?,?,SYSDATE,?,SYSDATE, ?, ?, ?)
" />
<STATEMENT name="INSERT_STATO_OCC_DEFAULT2"
	query="
	INSERT INTO AM_STATO_OCCUPAZ 
	       (PRGSTATOOCCUPAZ, CDNLAVORATORE,DATINIZIO,DATANZIANITADISOC, CODSTATOOCCUPAZ,CDNUTINS,DTMINS,CDNUTMOD,DTMMOD)
	VALUES (?,?,TO_DATE(?,'DD/MM/YYYY'),TO_DATE(?,'DD/MM/YYYY'),?,?,SYSDATE,?,SYSDATE)
" />

<STATEMENT name="GET_AZIONI_RAGG"
	query="
	SELECT prgAzioniRagg as codice, strDescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', 
               '') as descrizione, flg_misurayei, DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (scaduto)',
                               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (scaduto)', 
                               '') AS STRSCADUTO   
               FROM DE_AZIONE_RAGG
            order by DECODE(STRSCADUTO,'',0,1),STRDESCRIZIONE 
" />
  
<STATEMENT name="GET_AZIONI_RAGG_CODSERVIZIO"
	query="
	SELECT prgAzioniRagg as codice, strDescrizione as descrizione, flg_misurayei 
		FROM DE_AZIONE_RAGG 
               where (trunc(sysdate) BETWEEN  trunc(DATINIZIOVAL) AND trunc(DATFINEVAL)) and (codServizio = nvl(?,''))
               order by strDescrizione
" />

<STATEMENT name="GET_AZIONI_FROM_RAGG"
	query="
	SELECT prgAzioni as codice, strDescrizione || DECODE(SYSDATE,    
                                    GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (scaduto)',
                                    LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (scaduto)', 
                                    '') AS DESCRIZIONE, 
           DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (scaduto)',
                               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (scaduto)', '') AS STRSCADUTO  
		 FROM DE_AZIONE where prgAzioneRagg = ?
		  order by DECODE(STRSCADUTO,'',0,1),DESCRIZIONE
" />
<STATEMENT name="GET_AZIONI_FROM_AZIONE"
	query="
	SELECT a2.prgazioni AS codice, a2.strdescrizione AS descrizione, a2.prgazioneragg
  	FROM de_azione a, de_azione a2
 	WHERE a.prgazioni = ? AND a.prgazioneragg = a2.prgazioneragg
" />
<STATEMENT name="GET_NEXT_AM_STATO_OCC"
	query="
	SELECT s_am_stato_occupaz.nextval from dual
" />
<STATEMENT name="GET_NEXT_AM_ELENCO_ANAGRAFICO"
	query="
	SELECT s_am_ELENCO_ANAGRAFICO.nextval from dual
" />
<STATEMENT name="GET_ULTIMO_STORICO_DISPO"
	query="
	SELECT  distinct to_char(max (dispo.datfine),'dd/mm/yyyy') as datfine
    FROM an_lavoratore an,
         am_elenco_anagrafico am,
         am_dich_disponibilita dispo,
         an_lav_storia_inf_coll sc_,
         an_lav_storia_inf st_
   WHERE  (an.cdnlavoratore = am.cdnlavoratore)
          AND (am.prgelencoanagrafico = dispo.prgelencoanagrafico)
          AND (am.prgelencoanagrafico = sc_.strchiavetabella)
          AND (sc_.codlsttab = 'EA')
          AND (sc_.prglavstoriainf = st_.prglavstoriainf)
          AND (dispo.datfine IS NOT NULL)
          AND (an.cdnlavoratore = ?)   
" />
<STATEMENT name="GET_CARTA_IDENTITA_VALIDA"
	query="
	SELECT doc.prgdocumento, to_char(doc.datInizio,'dd/mm/yyyy') datInizio, to_char(doc.datfine,'dd/mm/yyyy') datfine
	FROM am_documento doc, de_doc_tipo det
	WHERE doc.cdnlavoratore = ?
		AND doc.CODTIPODOCUMENTO = det.CODTIPODOCUMENTO
		AND det.CODAMBITODOC = 'ID'
		AND doc.flgdocidentifp = 'S'
		AND trunc(nvl(doc.datfine, sysdate))&gt;=trunc(sysdate)
		AND doc.CODSTATOATTO = 'PR'
" />
<!-- <STATEMENT name="GET_CARTA_IDENTITA" query=" SELECT max(doc.prgdocumento) 
	as prgdocumento FROM am_documento doc, de_doc_tipo det WHERE doc.cdnlavoratore 
	= ? and doc.CODTIPODOCUMENTO = det.CODTIPODOCUMENTO AND det.CODAMBITODOC 
	= 'ID' AND doc.flgdocidentifp = 'S' AND nvl(doc.datfine, sysdate)&gt;=sysdate 
	AND doc.CODSTATOATTO = 'PR' "/> -->
<STATEMENT name="GET_PRIVACY_STORICO"
	query="
	select prgPrivacy, to_char(datInizio, 'dd/mm/yyyy') as datinizio, to_char(datfine, 'dd/mm/yyyy') as datfine,
			flgAutoriz, numkloprivacy, cdnutins, to_char(dtmins, 'dd/mm/yyyy') as dtmins,
			cdnutmod, to_char(dtmmod, 'dd/mm/yyyy') as dtmmod
			 from am_privacy where cdnLavoratore = ? and datFine is not null
" />

<STATEMENT name="GET_PRIVACY"
	query="
	select prgPrivacy, to_char(datInizio, 'dd/mm/yyyy') as datinizio, to_char(datfine, 'dd/mm/yyyy') as datfine,
			flgAutoriz, numkloprivacy from am_privacy where prgPrivacy = ? 
" />

<!-- *********************************************************************** -->
<STATEMENT name="RICERCA_OBBLIGO_FORMATIVO_PER_FUTURA_RICERCA_DINAMICA"
	query="
	SELECT obb.cdnlavoratore,
	  obb.flgobbligoscolastico,
	  obb.flgobbligoformativo,
	  obb.codmodalitaassolv,
	  DE_FO_MODALITA_ASSOLV.STRDESCRIZIONE as DESCRIZIONE,
	  obb.strnote,
	  obb.cdnutins,
	  to_char(obb.dtmins,'dd/mm/yyyy') dtmins,
	  obb.cdnutmod,
	  to_char(obb.dtmmod,'dd/mm/yyyy') dtmmod,
	  obb.numkloobbligoform,
	  to_char(lav.DATNASC, 'dd/mm/yyyy') as datnasc					  
	FROM  AM_OBBLIGO_FORMATIVO obb, DE_FO_MODALITA_ASSOLV, an_lavoratore lav  
	WHERE obb.CDNLAVORATORE&lt;&gt; 12 and 
		obb.CODMODALITAASSOLV = DE_FO_MODALITA_ASSOLV.CODMODALITAASSOLV(+)
		and lav.CDNLAVORATORE = obb.CDNLAVORATORE
		and (obb.FLGOBBLIGOFORMATIVO='N'
			and ( 
				trunc(MONTHS_BETWEEN(SYSDATE, lav.DATNASC)) &lt;= (15*12) and
				trunc (MONTHS_BETWEEN(SYSDATE, lav.DATNASC))&gt;= (18*12)				
			)
		)
		and (obb.FLGOBBLIGOSCOLASTICO='N'
			and trunc (MONTHS_BETWEEN(SYSDATE, lav.DATNASC))&lt;(15*12)				
		)  
" />
<STATEMENT name="DELETE_PRIVACY"
	query="
	delete FROM am_privacy where prgprivacy = ?
" />


<STATEMENT name="GET_PATTO_AZIENDA"
	query="

select AM_UA_PATTO.PRGAZIENDA,
    AM_UA_PATTO.PRGPATTOUNITAAZIENDA,
    AM_UA_PATTO.CODSTATOATTO,
		to_char(AM_UA_PATTO.DATSTIPULA, 'dd/mm/yyyy') as datstipula,
		to_char(AM_UA_PATTO.DATSCADCONFERMA, 'dd/mm/yyyy') as DATSCADCONFERMA,
		to_char(AM_UA_PATTO.DATFINE, 'dd/mm/yyyy') as datfine,
		AM_UA_PATTO.CODMOTIVOFINEATTO,
		AM_UA_PATTO.STRNOTE,
		AM_UA_PATTO.CDNUTINS,
    to_char(AM_UA_PATTO.DTMINS, 'dd/mm/yyyy') as dtmins,
    AM_UA_PATTO.CDNUTMOD,
    to_char(AM_UA_PATTO.DTMMOD, 'dd/mm/yyyy') as dtmmod,
		AM_UA_PATTO.NUMKLOPATTOUNITAAZIENDALE
		
from    AM_UA_PATTO
where	AM_UA_PATTO.DATFINE IS NULL AND PRGAZIENDA = ?
           
" />


<STATEMENT name="UPDATE_PATTOAZIENDA"
	query="UPDATE AM_UA_PATTO
                SET
                datStipula=TO_DATE(?,'DD/MM/YYYY'),                                                   
                codStatoAtto=?,
                DATSCADCONFERMA=TO_DATE(?,'DD/MM/YYYY'),                                 
                DATFINE=TO_DATE(?,'DD/MM/YYYY'),                                                   
                codMotivoFineAtto=?,                  
                strNote=?,
                NUMKLOPATTOUNITAAZIENDALE= ?
                WHERE 
                PRGPATTOUNITAAZIENDA= ? 
" />



<STATEMENT name="GET_IMPEGNI_AZIENDA_LEGATI_AL_PATTO"
	query="

              select  	imp.codImpegno, 
                    imp.strDescrizione, 
                    imp.codMonoImpegnoDi, 
                    aps.prgPattoSceltaUnitaAzienda
              from 
                    de_impegno imp, 
                    am_ua_patto_scelta aps, 
                    am_ua_patto apl
			
              where 		imp.CODIMPEGNO = aps.STRCHIAVETABELLA and aps.CODLSTTAB='DE_IMPE' 
                    and aps.PRGPATTOUNITAAZIENDA = apl.PRGPATTOUNITAAZIENDA and apl.PRGAZIENDA = ?
                    and apl.DATFINE is null
                    and (imp.codMonoLavAzienda in ('A','E'))
                    order by imp.codImpegno
" />

<STATEMENT name="PATTO_APERTO_NOTE_AZIENDA"
	query="
	SELECT p.strnoteazioni, 
         p.strnoteimpegni,
          p.PRGPATTOUNITAAZIENDA, p.PRGAZIENDA, p.numklopattoUnitaAziendale,	   
	   to_char(p.datStipula, 'dd/mm/yyyy') as datStipula, 
	   to_char(p.datScadConferma, 'dd/mm/yyyy') as datScadenzaConferma
	FROM am_ua_patto p
	WHERE p.datfine IS NULL AND p.prgAzienda = ?

" />

<STATEMENT name="UPDATE_NOTE_AZIENDA_PATTO"
	query="
    UPDATE AM_UA_PATTO
    SET STRNOTEIMPEGNI=?,
        CDNUTMOD= ?,
        DTMMOD=SYSDATE,
        NUMKLOPATTOUNITAAZIENDALE= ?
    WHERE PRGAZIENDA = ? AND datfine IS NULL
  " />

<STATEMENT name="DEL_AZIENDA_PATTO_SCELTA"
	query="DELETE FROM AM_UA_PATTO_SCELTA WHERE PRGPATTOSCELTAUNITAAZIENDA=?
" />

<STATEMENT name="GET_IMPEGNI_CPI_NON_LEGATI_AL_PATTO_AZIENDA"
	query="
	        select  imp.codImpegno, imp.strDescrizione, imp.codMonoImpegnoDi
	        from de_impegno imp
	        where imp.CODMONOIMPEGNODI='C'	     
	        and (imp.codMonoLavAzienda in ('A','E'))         
	        and NOT EXISTS (
	          SELECT aps.prgpattounitaazienda
	            FROM am_ua_patto_scelta aps, am_ua_patto apl
	           WHERE aps.codlsttab = 'DE_IMPE'
	             AND aps.strchiavetabella = imp.CODIMPEGNO
	             AND aps.prgpattounitaazienda = apl.prgpattounitaazienda
				 AND apl.PRGAZIENDA = ?
	             AND apl.datfine IS NULL) 
	        order by imp.codImpegno
        " />


<STATEMENT name="GET_PATTO_APERTO_AZIENDA"
	query="
        		SELECT prgpattounitaazienda
				FROM AM_UA_PATTO a
				WHERE a.datfine is null and a.prgAzienda = ?
" />


<STATEMENT name="GET_IMPEGNI_AZIENDA_NON_LEGATI_AL_PATTO"
	query="
	        select  imp.codImpegno, imp.strDescrizione, imp.codMonoImpegnoDi
	        from de_impegno imp
	        where imp.CODMONOIMPEGNODI='S' 
	        and (imp.codMonoLavAzienda in ('A','E')) 
	        and NOT EXISTS (
	          SELECT aps.prgpattounitaazienda
	            FROM am_ua_patto_scelta aps, am_ua_patto apl
	           WHERE aps.codlsttab = 'DE_IMPE'
	             AND aps.strchiavetabella = imp.CODIMPEGNO
	             AND aps.prgpattounitaazienda = apl.prgpattounitaazienda
				 AND apl.PRGAZIENDA = ?
	             AND apl.datfine IS NULL) 
	        order by imp.codImpegno
        " />

<STATEMENT name="INS_AZIENDA_PATTO_SCELTA"
	query="
        	INSERT INTO AM_UA_PATTO_SCELTA (
	        	prgpattosceltaunitaazienda,
	        	prgpattounitaazienda,
	        	codlsttab,
	        	strchiavetabella,
	        	strchiavetabella2,
	        	strchiavetabella3
	        )
	        VALUES(s_am_ua_patto_scelta.nextval,?,?,?,?,?)
" />
<STATEMENT name="UPDATE_COLLEGAMENTO_DICH_STATO_OCC"
	query="
        	UPDATE AM_DICH_DISPONIBILITA SET PRGSTATOOCCUPAZ = ?, 
        		   DTMMOD=SYSDATE, 
        		   CDNUTMOD=?,
        		numKloDichDisp = numKloDichDisp + 1
        	WHERE PRGDICHDISPONIBILITA = ?
" />


<!-- GET_INFO_STATO_OCCUPAZ_DIC -->
<STATEMENT name="GET_INFO_STATO_OCCUPAZ_DIC"
	query="Select AM_STATO_OCCUPAZ.FLGPENSIONATO,AM_DICH_DISPONIBILITA.CODSTATOOCCUPAZ,
                         AM_DICH_DISPONIBILITA.CODMONOCAT181LUNGADURATA,
                    	   AM_DICH_DISPONIBILITA.FLGINDENNIZZATO,AM_DICH_DISPONIBILITA.FLG40790,
                         AM_DICH_DISPONIBILITA.FLGCAT181DONNAREINSLAV,AM_DICH_DISPONIBILITA.NUMMESISOSP,
                         AM_DICH_DISPONIBILITA.NUMMESIANZIANITA,TO_CHAR(AM_DICH_DISPONIBILITA.DATANZIANITADISOC,'DD/MM/YYYY') DATANZIANITADISOC,
                         AM_DICH_DISPONIBILITA.CODMONOCAT181ETA,AM_DICH_DISPONIBILITA.NUMANZIANITAPREC297,
                         AM_DICH_DISPONIBILITA.CODMONOCALCOLOANZIANITAPREC297,TO_CHAR(AM_DICH_DISPONIBILITA.DATCALCOLOMESISOSP,'DD/MM/YYYY') DATCALCOLOMESISOSP,
                         TO_CHAR(AM_DICH_DISPONIBILITA.DATCALCOLOANZIANITA,'DD/MM/YYYY') DATCALCOLOANZIANITA,
                         AM_DICH_DISPONIBILITA.NUMMESISOSPPREC
                  From AM_DICH_DISPONIBILITA,AM_STATO_OCCUPAZ
                  where AM_DICH_DISPONIBILITA.PRGSTATOOCCUPAZ = AM_STATO_OCCUPAZ.PRGSTATOOCCUPAZ (+)
                        AND AM_DICH_DISPONIBILITA.PRGDICHDISPONIBILITA = ?" />


<!-- eSTRAZIONE nUMgg -->
<STATEMENT name="GET_DATI_GEN_DICH"
	query="select TS_GENERALE.NUMGGCOLLOQUIOOR, TS_GENERALE.NUMGGSTIPULAPATTO,
               TS_GENERALE.NUMGGSCADPATTO
               FROM TS_GENERALE" />
<!-- fine -->


<!-- DUPLICATE_AM_PATTO_LAV -->
<STATEMENT name="SELECT_AM_PATTO_LAV_ST"
	query="SELECT CODCPI, CDNLAVORATORE, NUMKLOPATTOLAVORATORE,
               PRGDICHDISPONIBILITA, to_char(DATSTIPULA,'DD/MM/YYYY') DATSTIPULA, CODSTATOATTO, 
               PRGSTATOOCCUPAZ, FLGCOMUNICAZESITI, CODMOTIVOFINEATTO, 
               to_char(DATSCADCONFERMA,'DD/MM/YYYY') DATSCADCONFERMA, to_char(DATFINE,'DD/MM/YYYY') DATFINE, STRNOTE, 
               CDNUTINS, to_char(DTMINS,'DD/MM/YYYY HH24:MI:SS') DTMINS, CDNUTMOD, 
               to_char(DTMMOD,'DD/MM/YYYY HH24:MI:SS') DTMMOD, FLGPATTO297, 
               CODTIPOPATTO, STRNOTEAMBITOPROF, STRNOTESITUAZIONEAMM, 
               STRNOTEAZIONI, STRNOTEIMPEGNI, CODSERVIZIO, STRENTECODICEFISCALE, CODSEDE,
               to_char(DATANASPI,'DD/MM/YYYY') DATANASPI, IMPORTOAR,
               NUMINDICESVANTAGGIO150, to_char(DATRIFERIMENTO150,'DD/MM/YYYY') DATRIFERIMENTO150
               FROM AM_PATTO_LAVORATORE 
               WHERE AM_PATTO_LAVORATORE.PRGPATTOLAVORATORE = ?" />

<STATEMENT name="DUPLICATE_AM_PATTO_LAV"
	query="INSERT INTO AM_PATTO_LAVORATORE (PRGPATTOLAVORATORE, CODCPI, CDNLAVORATORE, 
                      PRGDICHDISPONIBILITA, DATSTIPULA, CODSTATOATTO, 
                      PRGSTATOOCCUPAZ, FLGCOMUNICAZESITI, CODMOTIVOFINEATTO, 
                      DATSCADCONFERMA, DATFINE, STRNOTE, 
                      CDNUTINS, DTMINS, CDNUTMOD, 
                      DTMMOD, FLGPATTO297, 
                      CODTIPOPATTO, STRNOTEAMBITOPROF, STRNOTESITUAZIONEAMM, 
                      STRNOTEAZIONI, STRNOTEIMPEGNI, CODSERVIZIO) 
               VALUES ( ?, ?, ?,
                        ?, to_date(?,'DD/MM/YYYY'), ?,
                        ?, ?, ?,
                        to_date(?,'DD/MM/YYYY'), to_date(?,'DD/MM/YYYY'), ?,
                        ?, to_date(?,'DD/MM/YYYY HH24:MI:SS'), ?,
                        to_date(?,'DD/MM/YYYY HH24:MI:SS'), ?,
                        ?, ?, ?,
                        ?, ?, ?)" />
<!--S_AM_PATTO_LAVORATORE.NEXTVAL -->
<!-- DUPLICATE_AM_LAV_PATTO_SCELTA -->
<STATEMENT name="SELECT_AM_LAV_PATTO_SCELTA_ST"
	query="SELECT  PRGPATTOLAVORATORE, CODLSTTAB, 
               STRCHIAVETABELLA, STRCHIAVETABELLA2, PRGLAVPATTOSCELTAINFCOLL, 
               STRCHIAVETABELLA3, STRALTREINF 
               From AM_LAV_PATTO_SCELTA where 
               AM_LAV_PATTO_SCELTA.PRGPATTOLAVORATORE = ?" />
<STATEMENT name="DUPLICATE_AM_LAV_PATTO_SCELTA"
	query="INSERT INTO AM_LAV_PATTO_SCELTA (PRGLAVPATTOSCELTA, PRGPATTOLAVORATORE, 
                      CODLSTTAB, STRCHIAVETABELLA, STRCHIAVETABELLA2, 
                      PRGLAVPATTOSCELTAINFCOLL, STRCHIAVETABELLA3, STRALTREINF) 
               VALUES ( s_am_lav_patto_scelta.nextval, ?, 
                        ?, ?, ?, 
                        ?, ?, ?)" />

<!--S_AM_PATTO_LAVORATORE.CURRVAL -->


<STATEMENT name="UPDATE_NOTE_LAV_PATTO_SCELTA"
	query="Update AM_LAV_PATTO_SCELTA
                      SET STRALTREINF= ?
                      WHERE PRGLAVPATTOSCELTA = ?" />



<!-- Query per la selezione di alcuni campi dello stato occupaz per l'aggiornamento 
	della DID al momento dellla protocollazione -->
<STATEMENT name="GET_CAMPI_STATO_OCCUPAZ_PROT_DID"
	query="SELECT am_stato_occupaz.prgstatooccupaz, am_stato_occupaz.codstatooccupaz,
                        am_stato_occupaz.codcategoria181,
                        am_stato_occupaz.flgindennizzato, am_stato_occupaz.flgpensionato,
                        TO_CHAR (am_stato_occupaz.datanzianitadisoc,'DD/MM/YYYY') datanzianitadisoc,
                        am_stato_occupaz.numklostatooccupaz,
                    to_number(substr(pg_movimenti.MesiSospDecretoFornero2014(?, null, null), 1,
							  instr(pg_movimenti.MesiSospDecretoFornero2014(?, null, null), '-', 1)-1)) mesiSospFornero2014,
					pg_movimenti.MesiSospDecretoFornero2014(?, null, null) mesiSospFornero2014_completo,
			         case 
			              when de_stato_occupaz_ragg.CODSTATOOCCUPAZRAGG in ('D','I')
			              then MESISOSPPRECFORNERO(?, am_stato_occupaz.datcalcolomesisosp, null)
			              when de_stato_occupaz_ragg.CODSTATOOCCUPAZRAGG not in ('D','I') 
			              then 0
			         end
			         NUMMESISOSP,
                    case 
			    		when de_stato_occupaz_ragg.CODSTATOOCCUPAZRAGG in ('D','I')
			        	   then
			               (to_number(
										(to_char(sysdate,'yyyy')
			                             - to_char(am_stato_occupaz.datcalcoloanzianita,'yyyy')) * 12
				  						 + to_char(sysdate,'mm')
					                    - to_char(am_stato_occupaz.datcalcoloanzianita,'mm') + 1
									+ (case 
				   	 	  				   when ((to_char(sysdate,'yyyy') 
				                                  - to_char(am_stato_occupaz.datcalcoloanzianita,'yyyy')) * 12
				   		  	   			   	      + to_char(sysdate,'mm') 
					                              - to_char(am_stato_occupaz.datcalcoloanzianita,'mm') + 1) &gt; 1
										   then	  
				   						   		   -(case when
													 trunc(am_stato_occupaz.datcalcoloanzianita) &gt;= (select trunc(dat150) from ts_generale) 
														then 2 - (trunc( (
															(case 
															  when to_number(to_char(LAST_DAY(to_date('01/' || to_char(sysdate, 'mm') || '/' || to_char(sysdate, 'yyyy'), 'dd/mm/yyyy')), 'dd')) =
																   to_number(to_char(sysdate, 'dd'))
															  then 30
															  else to_number(to_char(sysdate, 'dd'))
															end) + (30 - 
																	(case
																	  when to_number(to_char(am_stato_occupaz.datcalcoloanzianita, 'dd')) &lt; 31 
																	  then to_number(to_char(am_stato_occupaz.datcalcoloanzianita, 'dd'))
																	  else 30
																	end) + 1
																  )) /30))
													 when
													 (30 - to_char(am_stato_occupaz.datcalcoloanzianita,'dd') + 1) &lt; 16
													 then 1
													 when
													 (30 - to_char(am_stato_occupaz.datcalcoloanzianita,'dd') + 1) &gt;= 15
													 then 0
											   	 end)
											   	 -(case when
													  trunc(am_stato_occupaz.datcalcoloanzianita) &lt; (select trunc(dat150) from ts_generale) and to_char(sysdate,'dd') &lt; 16
													  then 1
													  when
													  trunc(am_stato_occupaz.datcalcoloanzianita) &lt; (select trunc(dat150) from ts_generale) and to_char(sysdate,'dd') &gt;= 15
													  then 0
													  else 0
												 end)
						 				  when
						 	  			  	  ((to_char(sysdate,'yyyy') 
				                                - to_char(am_stato_occupaz.datcalcoloanzianita,'yyyy')) * 12
				   		  	  			  	  	+ to_char(sysdate,'mm') 
				                                - to_char(am_stato_occupaz.datcalcoloanzianita,'mm') + 1) = 1
						 				  then
						 				  	  -(case when
													trunc(am_stato_occupaz.datcalcoloanzianita) &gt;= (select trunc(dat150) from ts_generale) and 
													 (to_number(to_char(sysdate,'dd')) - to_number(to_char(am_stato_occupaz.datcalcoloanzianita,'dd')) + 1) =
													 to_number(to_char(LAST_DAY(to_date('01/' || to_char(sysdate, 'mm') || '/' || to_char(sysdate, 'yyyy'), 'dd/mm/yyyy')), 'dd'))
													 then 0
													 when
													 trunc(am_stato_occupaz.datcalcoloanzianita) &gt;= (select trunc(dat150) from ts_generale) and 
													 (to_number(to_char(sysdate,'dd')) - to_number(to_char(am_stato_occupaz.datcalcoloanzianita,'dd')) + 1) &lt;&gt;
													 to_number(to_char(LAST_DAY(to_date('01/' || to_char(sysdate, 'mm') || '/' || to_char(sysdate, 'yyyy'), 'dd/mm/yyyy')), 'dd'))
													 then 1
													 when trunc(am_stato_occupaz.datcalcoloanzianita) &lt; (select trunc(dat150) from ts_generale) and
													 (to_number(to_char(sysdate,'dd')) - to_number(to_char(am_stato_occupaz.datcalcoloanzianita,'dd')) + 1) &lt; 16 
													 then 1 
													 when trunc(am_stato_occupaz.datcalcoloanzianita) &lt; (select trunc(dat150) from ts_generale) and
													 (to_number(to_char(sysdate,'dd')) - to_number(to_char(am_stato_occupaz.datcalcoloanzianita,'dd')) + 1) &gt;= 15
													 then 0
										     end)
						 				  end)))	  	
			             when de_stato_occupaz_ragg.CODSTATOOCCUPAZRAGG not in ('D','I')
			             then
			                  0
         			 end 
					 mesi_anz_calc,
					 (case 
						when de_stato_occupaz_ragg.CODSTATOOCCUPAZRAGG in ('D','I')
						   then
								(case 
									when ((to_char(sysdate,'yyyy') 
										  - to_char(am_stato_occupaz.datcalcoloanzianita,'yyyy')) * 12
										  + to_char(sysdate,'mm') 
										  - to_char(am_stato_occupaz.datcalcoloanzianita,'mm') + 1) &gt; 1
									then	  
										   (case when
											 trunc(am_stato_occupaz.datcalcoloanzianita) &gt;= (select trunc(dat150) from ts_generale) 
												then mod(
												((case 
													  when to_number(to_char(LAST_DAY(to_date('01/' || to_char(sysdate, 'mm') || '/' || to_char(sysdate, 'yyyy'), 'dd/mm/yyyy')), 'dd')) =
														   to_number(to_char(sysdate, 'dd'))
													  then 30
													  else to_number(to_char(sysdate, 'dd'))
													end) + 
													(30 - 
														(case
														  when to_number(to_char(am_stato_occupaz.datcalcoloanzianita, 'dd')) &lt; 31 
														  then to_number(to_char(am_stato_occupaz.datcalcoloanzianita, 'dd'))
														  else 30
														end) + 1
													  )
												), 30)
											  else 0
											end)
									when
									  ((to_char(sysdate,'yyyy') 
										- to_char(am_stato_occupaz.datcalcoloanzianita,'yyyy')) * 12
										+ to_char(sysdate,'mm') 
										- to_char(am_stato_occupaz.datcalcoloanzianita,'mm') + 1) = 1
										then
											(case when
												trunc(am_stato_occupaz.datcalcoloanzianita) &gt;= (select trunc(dat150) from ts_generale) 
												  and (to_number(to_char(sysdate,'dd')) - to_number(to_char(am_stato_occupaz.datcalcoloanzianita,'dd')) + 1) =
													   to_number(to_char(LAST_DAY(to_date('01/' || to_char(sysdate, 'mm') || '/' || to_char(sysdate, 'yyyy'), 'dd/mm/yyyy')), 'dd'))
												then 0
												when
												  trunc(am_stato_occupaz.datcalcoloanzianita) &gt;= (select trunc(dat150) from ts_generale) 
												  and (to_number(to_char(sysdate,'dd')) - to_number(to_char(am_stato_occupaz.datcalcoloanzianita,'dd')) + 1) &lt;&gt;
													   to_number(to_char(LAST_DAY(to_date('01/' || to_char(sysdate, 'mm') || '/' || to_char(sysdate, 'yyyy'), 'dd/mm/yyyy')), 'dd'))
												then (to_number(to_char(sysdate,'dd')) - to_number(to_char(am_stato_occupaz.datcalcoloanzianita,'dd')) + 1)
												else 0
											end)
									else 0
								end)			  	
						 when de_stato_occupaz_ragg.CODSTATOOCCUPAZRAGG not in ('D','I')
						 then 0
					end)
					giorni_anz,
					 to_number(substr(PG_MOVIMENTI.MesiRischioDisoccupazione(am_stato_occupaz.cdnLavoratore, am_stato_occupaz.datcalcoloanzianita), 1,
					 instr(PG_MOVIMENTI.MesiRischioDisoccupazione(am_stato_occupaz.cdnLavoratore, am_stato_occupaz.datcalcoloanzianita), '-', 1)-1)) mesi_rischio_disocc,
		         	 PG_MOVIMENTI.MesiRischioDisoccupazione(am_stato_occupaz.cdnLavoratore, am_stato_occupaz.datcalcoloanzianita) mesi_rischio_disocc_completo,
                     to_number(am_stato_occupaz.NUMANZIANITAPREC297) mesi_anz_prec, am_stato_occupaz.CODMONOCALCOLOANZIANITAPREC297,
                     to_number(am_stato_occupaz.NUMMESISOSP) NUMMESISOSPPREC,
                     to_char(am_stato_occupaz.datcalcoloanzianita,'DD/MM/YYYY') datcalcoloanzianita, 
                     to_char(am_stato_occupaz.datcalcolomesisosp,'DD/MM/YYYY') datcalcolomesisosp,
                     inf.codcpitit, de_cpi.strdescrizione
                FROM am_stato_occupaz
                     LEFT JOIN de_stato_atto ON (am_stato_occupaz.codstatoatto = de_stato_atto.codstatoatto)
                     INNER JOIN de_stato_occupaz ON (am_stato_occupaz.codstatooccupaz = de_stato_occupaz.codstatooccupaz)
                     INNER JOIN de_stato_occupaz_ragg ON (de_stato_occupaz.codstatooccupazragg = de_stato_occupaz_ragg.codstatooccupazragg)
                     INNER JOIN an_lav_storia_inf inf ON (am_stato_occupaz.cdnlavoratore = inf.cdnlavoratore)
                     RIGHT JOIN de_cpi ON (de_cpi.codcpi = inf.codcpitit)		
               WHERE am_stato_occupaz.prgStatoOccupaz = (select max(so1.prgStatoOccupaz)
               											 from am_stato_occupaz so1, am_dich_disponibilita did1, am_elenco_anagrafico ea1
               											 where did1.prgelencoanagrafico = ea1.prgelencoanagrafico
               											 	   and ea1.cdnlavoratore = ?
               											 	   and did1.datFine is null
               											 	   and so1.CDNLAVORATORE = ea1.cdnlavoratore
               											 	   and so1.datInizio &lt;= did1.datdichiarazione
               											 	   and (so1.datFine is null or so1.datFine &gt;= did1.datdichiarazione)
               											)
					 AND am_stato_occupaz.cdnlavoratore = ?
                     AND inf.datfine IS NULL" />


<STATEMENT name="QUERY_UPDATE_DICH_DISP_IFO_STATO_OCCUPAZ"
	query="UPDATE AM_DICH_DISPONIBILITA 
                SET CODSTATOOCCUPAZ = ?,
                    CODMONOCAT181LUNGADURATA = ?,
                    FLGINDENNIZZATO = ?,
                    FLG40790 = ?,
                    FLGCAT181DONNAREINSLAV = ?,
                    NUMMESISOSP = ?,
                    NUMMESIANZIANITA = ?,
                    DATANZIANITADISOC = TO_DATE(?,'DD/MM/YYYY'),
                    CODMONOCAT181ETA = ?,
                    NUMANZIANITAPREC297 = ?,
                    CODMONOCALCOLOANZIANITAPREC297 = ?,
                    DATCALCOLOMESISOSP = TO_DATE(?,'DD/MM/YYYY'),
                    DATCALCOLOANZIANITA = TO_DATE(?,'DD/MM/YYYY'),
                    NUMMESISOSPPREC = ?,
                    numKloDichDisp = numKloDichDisp + 1
              	WHERE prgdichdisponibilita = ?" />

<STATEMENT name="UPDATE_COLL"
	query="Update AM_DOCUMENTO_COLL
                  Set STRCHIAVETABELLA=?
                  Where PRGDOCUMENTO=?
                        and cdnComponente = 25" />

<STATEMENT name="QUERY_NEXTVAL_STATEMENT"
	query="SELECT s_am_dich_disponibilita.nextval as DO_NEXTVAL from dual" />

<STATEMENT name="QUERY_NEXTVAL_AMDIDINPS"
	query="SELECT s_am_did_inps.nextval as DO_NEXTVAL from dual" />

<STATEMENT name="INSERT_AMDIDINPS" 
	query="INSERT INTO AM_DID_INPS
	(CDNLAVORATORE, CDNUTINS, CDNUTMOD, 
   CODMONOTIPOOPERAZIONE, CODUNIVOCO, DATDICHIARAZIONE, 
   DATINIZIOATTSUB, DATINIZIODISOCUPAZ, DATINVIO, 
   DATRICEZIONE, DECREDDITOLAVORO, DECREDDITOPREVISTO, 
   DTMINS, DTMMOD, NUMKLODIDINPS, 
   PRGDIDINPS, STRAZCODICEFISCALE, STRCELLULARE, 
   STRCODICEFISCALELAV, STRCOMUNICAZIONE, STRDENOMINAZIONE, 
   STREMAIL, STRPROTOCOLLOINPS, STRTELEFONO, STRULTIMAQUALIFICA, 
   STRNOME , STRCOGNOME, STRCITTADINANZA, STRCOMUNEDOM,
   STRCAPDOM, CODCOMDOM, STRPROVINCIADOM, STRINDIRIZZODOM,  STREMAILPATRONATO, 
   DECREDDITOACCESSORIO, DECREDDITOAUTONOMO, 
   DATINIZIOATTSUBORD, DATINIZIOATTAUTONOMA ,DATINIZIOATTACCESSORIA) 
VALUES ( ?,
 ?,
 ?,
 ?,
 ?,
 TO_DATE(?,'yyyy-mm-dd'),
 TO_DATE(?,'yyyy-mm-dd'),
 TO_DATE(?,'yyyy-mm-dd'),
 TO_DATE(?,'yyyy-mm-dd'),
 SYSDATE,
 ?,
 ?,
 SYSDATE,
 SYSDATE,
 0,
 S_AM_DID_INPS.nextval,
 ?,
 ?,
 ?,
 ?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?,
 TO_DATE(?,'yyyy-mm-dd'),
 TO_DATE(?,'yyyy-mm-dd'),
 TO_DATE(?,'yyyy-mm-dd'))" />

<STATEMENT name="INSERT_AM_DOC_COLL"
	query="INSERT INTO AM_DOCUMENTO_COLL (
                              PRGDOCUMENTOCOLL,
                              PRGDOCUMENTO,
                              STRCHIAVETABELLA,
                              STRCHIAVETABELLA2,
                              CDNCOMPONENTE,
                              STRCHIAVETABELLA3) 
                           VALUES(S_AM_DOCUMENTO_COLL.nextval,
                              ?,?,'',25,'')" />

<STATEMENT name="SELECT_COLL"
	query="SELECT col.prgdocumentocoll
               FROM am_documento doc, de_doc_tipo det, am_documento_coll col
               WHERE doc.cdnlavoratore = ?
                  	 AND DOC.PRGDOCUMENTO = COL.PRGDOCUMENTO(+)
                     AND NVL(COL.CDNCOMPONENTE,25) = 25 
                     /*AND nvl(COL.STRCHIAVETABELLA,'nessuna_chiave') = 'nessuna_chiave'*/
                     and doc.CODTIPODOCUMENTO = det.CODTIPODOCUMENTO	
                     AND det.CODAMBITODOC = 'ID'
                     AND doc.flgdocidentifp = 'S'
                     AND nvl(doc.datfine, sysdate)&gt;=sysdate" />

<STATEMENT name="GET_ULTIMO_AN_DISPO_DA_CDNLAV"
	query="select did.prgDichDisponibilita 
               from am_dich_disponibilita did
               inner join am_elenco_anagrafico ea on (did.prgelencoanagrafico = ea.prgelencoanagrafico)
               where did.datfine is null
               and did.codstatoatto in ('PR', 'PA')
               and ea.cdnlavoratore = ?" />


<STATEMENT name="ST_CHIUDI_DID"
	query="Update am_dich_disponibilita
               set datfine = to_date(?,'dd/mm/yyyy'),
               codMotivoFineAtto = ?,
               cdnUtMod = ?,
               dtmMod = SYSDATE,
               numkloDichDisp = TO_NUMBER(?) + 1
               where prgDichDisponibilita = ?" />

<STATEMENT name="PATTO_HAS_STOR_DID"
	query="SELECT did.prgDichDisponibilita 
				   FROM  (am_dich_disponibilita did INNER JOIN 
						  am_elenco_anagrafico ea on (did.prgElencoAnagrafico=ea.prgElencoAnagrafico))
				   		 INNER JOIN de_stato_atto desa on (did.codstatoatto = desa.codstatoatto)
				   WHERE ea.cdnLavoratore=? 
				   AND (did.datfine is not null OR 
				   (did.datfine is null and desa.CODMONOPRIMADOPOINS = 'D'))" />



<STATEMENT name="GET_STATO_OCC_ASSOCIATO_AL_MOTIVO_FINE_ATTO"
	query="
	select dfa.codStatoOccupaz, dfa.flgImpattiAmm, 
	       dfa.codLstTab, dfa.codMonoSpec, demfa.strDescrizione
	from de_mot_fine_atto_lst_tab dfa, de_motivo_fine_atto demfa
	where dfa.CODMOTIVOFINEATTO = ? and dfa.CODLSTTAB = ? and dfa.codMotivoFineAtto = demfa.codMotivoFineAtto
	and to_date(?, 'dd/mm/yyyy') &gt;= trunc(dfa.datinizioval) and to_date(?, 'dd/mm/yyyy') &lt; trunc(dfa.datfineval)
" />


<!-- RECUPERA GLI IMPEGNI ASSOCIATI ALLA SPECIFICA AZIONE -->
<STATEMENT name="GET_IMPEGNI_AZIONI_COL"
	query="
            Select DE_AZIONE_IMPEGNO.CODIMPEGNO
            From DE_AZIONE_IMPEGNO, or_percorso_concordato 
            WHERE DE_AZIONE_IMPEGNO.PRGAZIONI = or_percorso_concordato.PRGAZIONI
                and or_percorso_concordato.prgpercorso = ?
                AND SYSDATE between DE_AZIONE_IMPEGNO.DATINIZIOVAL 
                AND DE_AZIONE_IMPEGNO.DATFINEVAL" />

<!-- RECUPERA GLI IMPEGNI ASSOCIATI ALLO SPECIFICO SERVIZIO -->
<STATEMENT name="GET_IMPEGNI_SERVIZI_COL"
	query="
            Select DE_SERVIZIO_IMPEGNO.CODIMPEGNO
            From DE_SERVIZIO_IMPEGNO, ag_agenda, AG_LAVORATORE
            Where ag_agenda.CODSERVIZIO = de_servizio_impegno.CODSERVIZIO
                  AND AG_LAVORATORE.PRGAPPUNTAMENTO = AG_AGENDA.PRGAPPUNTAMENTO
                  and AG_LAVORATORE.CDNLAVORATORE = ?
                  and AG_LAVORATORE.CODCPI = ?
                  and AG_LAVORATORE.PRGAPPUNTAMENTO = ?  
                  AND SYSDATE between DE_SERVIZIO_IMPEGNO.DATINIZIOVAL
                  AND DE_SERVIZIO_IMPEGNO.DATFINEVAL" />

<!-- RECUPEA DA AM_LAV_PATTO_SCELTA L'IMPEGNO SPECIFICATO -->
<STATEMENT name="GET_IMPEGNO_PATTO"
	query="
           Select am_lav_patto_scelta.PRGLAVPATTOSCELTA
           from am_lav_patto_scelta
           where am_lav_patto_scelta.PRGPATTOLAVORATORE = ?
                 and am_lav_patto_scelta.CODLSTTAB = 'DE_IMPE'
                 and strchiavetabella = ?" />


<STATEMENT name="GET_INFO_LAV_PATTO_SCELTA"
	query="
           Select PRGPATTOLAVORATORE,PRGLAVPATTOSCELTA,CODLSTTAB,STRCHIAVETABELLA,
                  STRCHIAVETABELLA2,STRCHIAVETABELLA3
           from am_lav_patto_scelta
           where am_lav_patto_scelta.PRGLAVPATTOSCELTA = ?" />


<STATEMENT name="GET_IMPEGNI_LEGATI_AZIONE"
	query="
Select DE_AZIONE_IMPEGNO.PRGAZIONI,DE_AZIONE_IMPEGNO.CODIMPEGNO, am_lav_patto_scelta.PRGPATTOLAVORATORE
From DE_AZIONE_IMPEGNO, or_percorso_concordato, am_lav_patto_scelta 
WHERE DE_AZIONE_IMPEGNO.PRGAZIONI = or_percorso_concordato.PRGAZIONI
      and or_percorso_concordato.prgpercorso = am_lav_patto_scelta.STRCHIAVETABELLA
  	  and am_lav_patto_scelta.PRGLAVPATTOSCELTA = ?" />


<STATEMENT name="GET_IMPEGNI_LEGATI_SERVIZIO"
	query="
Select DE_SERVIZIO_IMPEGNO.CODSERVIZIO,DE_SERVIZIO_IMPEGNO.CODIMPEGNO, am_lav_patto_scelta.PRGPATTOLAVORATORE
From DE_SERVIZIO_IMPEGNO, ag_lavoratore, ag_agenda, am_lav_patto_scelta 
WHERE DE_SERVIZIO_IMPEGNO.CODSERVIZIO = ag_agenda.CODSERVIZIO
      and ag_agenda.PRGAPPUNTAMENTO = ag_lavoratore.PRGAPPUNTAMENTO
      and ag_agenda.CODCPI = ag_lavoratore.CODCPI
      and ag_lavoratore.CDNLAVORATORE = am_lav_patto_scelta.STRCHIAVETABELLA
      and ag_lavoratore.CODCPI = am_lav_patto_scelta.STRCHIAVETABELLA2
      and ag_lavoratore.PRGAPPUNTAMENTO = am_lav_patto_scelta.STRCHIAVETABELLA3
      and am_lav_patto_scelta.PRGLAVPATTOSCELTA = ?" />


<STATEMENT name="GET_IMPEGNI_SERVIZI"
	query="
                  SELECT AM_.PRGLAVPATTOSCELTA, DE_.CODSERVIZIO
                        FROM 
                          AM_LAV_PATTO_SCELTA AM_,
                          DE_SERVIZIO_IMPEGNO DE_,
                          AG_AGENDA AG_,
                          AG_LAVORATORE AG_LAV
                        WHERE 
                        ( AG_.PRGAPPUNTAMENTO = AG_LAV.PRGAPPUNTAMENTO )
                        AND ( AG_.CODCPI = AG_LAV.CODCPI )
                        AND ( AM_.STRCHIAVETABELLA = AG_LAV.CDNLAVORATORE )
                        AND ( AM_.STRCHIAVETABELLA2 = AG_LAV.CODCPI )
                        AND ( AM_.STRCHIAVETABELLA3 = AG_LAV.PRGAPPUNTAMENTO )
                        AND ( DE_.CODSERVIZIO = AG_.CODSERVIZIO )
          						  AND AG_LAV.cdnlavoratore = ?
                        AND DE_.CODIMPEGNO = ?
                        and AM_.prgpattolavoratore = ?
                        and AM_.CODLSTTAB &lt;&gt; 'DE_IMPE'
                        AND AM_.PRGLAVPATTOSCELTA &lt;&gt; ?" />


<STATEMENT name="GET_IMPEGNI_AZIONI"
	query="
                 SELECT AM_.PRGLAVPATTOSCELTA, DE_.PRGAZIONI
                        FROM AM_LAV_PATTO_SCELTA AM_,
                             DE_AZIONE_IMPEGNO DE_,
                             OR_PERCORSO_CONCORDATO OR_,
                             or_colloquio OR_C
                        WHERE 
                          ( AM_.STRCHIAVETABELLA = OR_.PRGPERCORSO )
                          AND (OR_C.PRGCOLLOQUIO = OR_.PRGCOLLOQUIO)
                          AND ( DE_.PRGAZIONI = OR_.PRGAZIONI )
            						  AND OR_C.cdnlavoratore = ?
                          AND DE_.CODIMPEGNO = ?
                          and AM_.prgpattolavoratore = ?
            						  and AM_.CODLSTTAB &lt;&gt; 'DE_IMPE'
                          AND AM_.PRGLAVPATTOSCELTA &lt;&gt; ?" />


<STATEMENT name="DELETE_IMPEGNO"
	query="
                 DELETE FROM 
                        AM_LAV_PATTO_SCELTA
                        WHERE PRGLAVPATTOSCELTA = ?" />

<!-- RECUPERA LE INFO DELL'AZIONE -->
<STATEMENT name="GET_DATI_AZIONE"
	query="
select to_char(or_percorso_concordato.DATSTIMATA,'dd/mm/yyyy') DATSTIMATA
from or_percorso_concordato
where or_percorso_concordato.PRGPERCORSO = ?" />

<STATEMENT name="SELECT_NUMKLO_PATTO_LAV"
	query="
Select NUMKLOPATTOLAVORATORE
from AM_PATTO_LAVORATORE
where PRGPATTOLAVORATORE = ? " />

<STATEMENT name="UPDATE_DATA_SCAD_PATTO"
	query="
                UPDATE AM_PATTO_LAVORATORE
                SET
                  DATSCADCONFERMA=TO_DATE(?,'DD/MM/YYYY'),                                 
                  NUMKLOPATTOLAVORATORE= ?
                WHERE 
                  PRGPATTOLAVORATORE=?" />

<STATEMENT name="GET_MODIFICHE_PATTO_AZIONI"
	query="
	select DISTINCT per.prgcolloquio, per.prgpercorso, 
		to_char(per.datstimata, 'dd/mm/yyyy') as datStimata,
		to_char(per.dateffettiva, 'dd/mm/yyyy') as datEffettiva,
		per.prgazioni,                 
		deaz.strDescrizione as azione,
		es.strDescrizione as esito,
		es.codesito,                
		per.strNote,
		deazr.STRDESCRIZIONE as azioneRagg,
		deazr.PRGAZIONIRAGG,
		to_char(pts.DATPROTOCOLLO, 'dd/mm/yyyy') as DATPROTOCOLLO,
		per.prgMod, 
		per.strTipoOp,
		per.cdnutmod,
		to_char(per.dtmmod, 'dd/mm/yyyy' ) as dtmmod
	from md_am_patto_lav_or_perc per, am_lav_patto_scelta pts, or_colloquio col, 
		am_patto_lavoratore apl, de_azione deaz, de_azione_ragg deazr, de_esito es
	where 		
		per.PRGPERCORSO = to_number(pts.STRCHIAVETABELLA)
		and pts.CODLSTTAB = 'OR_PER'
		and per.PRGCOLLOQUIO = col.PRGCOLLOQUIO	  
		and apl.PRGPATTOLAVORATORE = pts.PRGPATTOLAVORATORE		
		and apl.CODSTATOATTO = 'PR'
		and deaz.PRGAZIONI = per.PRGAZIONI
		and deaz.PRGAZIONERAGG = deazr.PRGAZIONIRAGG(+)
		and es.CODESITO(+) = per.CODESITO
		and col.CDNLAVORATORE = ?		
		and apl.prgPattoLavoratore = ?
union 
	select DISTINCT per.prgcolloquio, per.prgpercorso, 
		to_char(per.datstimata, 'dd/mm/yyyy') as datStimata,
		to_char(per.dateffettiva, 'dd/mm/yyyy') as datEffettiva,
		per.prgazioni,                 
		deaz.strDescrizione as azione,
		es.strDescrizione as esito,
		es.codesito,                
		per.strNote,
		deazr.STRDESCRIZIONE as azioneRagg,
		deazr.PRGAZIONIRAGG,
		to_char(pts.DATPROTOCOLLO, 'dd/mm/yyyy') as DATPROTOCOLLO,
        per.prgpercorso prgMod,
        'A' strTipoOp,
		per.cdnutmod,
		to_char(per.dtmmod, 'dd/mm/yyyy' ) as dtmmod
	from or_percorso_concordato per, am_lav_patto_scelta pts, or_colloquio col, 
		am_patto_lavoratore apl, de_azione deaz, de_azione_ragg deazr, de_esito es
	where 		
		per.PRGPERCORSO = to_number(pts.STRCHIAVETABELLA)
		and pts.CODLSTTAB = 'OR_PER'
		and per.PRGCOLLOQUIO = col.PRGCOLLOQUIO	  
		and apl.PRGPATTOLAVORATORE = pts.PRGPATTOLAVORATORE		
		and apl.CODSTATOATTO = 'PR'
		and deaz.PRGAZIONI = per.PRGAZIONI
		and deaz.PRGAZIONERAGG = deazr.PRGAZIONIRAGG(+)
		and es.CODESITO(+) = per.CODESITO
        and trunc(per.dtmmod) > trunc (apl.datultimoprotocollo )	
        and per.prgcolloquio||per.prgpercorso not in (select mplp.prgcolloquio||mplp.prgpercorso from md_am_patto_lav_or_perc mplp)
		and col.CDNLAVORATORE = ?		
		and apl.prgPattoLavoratore = ?
" />
<STATEMENT name="GET_MODIFICHE_PATTO_MANSIONI"
	query="
	select 
		man.PRGMANSIONE,
		man.CDNLAVORATORE,
		man.CODMANSIONE,
		deman.strDescrizione as desTipoMansione,
		man.FLGESPERIENZA,
		man.FLGESPFORM,
		man.FLGDISPONIBILE,
		man.FLGPIP,
		man.FLGDISPFORMAZIONE,
		man.CODMONOTEMPO,
		man.CDNUTMOD,
		TO_CHAR(man.DTMMOD, 'DD/MM/YYYY') DTMMOD,
		dm.STRDESCRIZIONE ||
	        DECODE(
	           SYSDATE, 
	           GREATEST(SYSDATE, dm.DATINIZIOVAL, dm.DATFINEVAL),
	           ' (scaduto)',
	           LEAST(SYSDATE, dm.DATINIZIOVAL, dm.DATFINEVAL),
	           ' (scaduto)', 
	           ''
	        ) AS DESC_MANSIONE,
		to_char(pts.DATPROTOCOLLO, 'dd/mm/yyyy') as DATPROTOCOLLO,
		man.prgMod, 
		man.strTipoOp
	from md_am_patto_lav_pr_mans man, am_lav_patto_scelta pts,  
		am_patto_lavoratore apl, de_mansione deman, de_mansione dm
	where 
		man.PRGMANSIONE = pts.STRCHIAVETABELLA
		and pts.CODLSTTAB = 'PR_MAN'
		and apl.PRGPATTOLAVORATORE = pts.PRGPATTOLAVORATORE		
		and apl.CODSTATOATTO = 'PR'
		and man.CODMANSIONE = dm.CODMANSIONE(+)
		and deman.codMansione(+)=substr(man.codmansione, 0, 5) || '00'
		and man.CDNLAVORATORE = ?
		and apl.prgPattoLavoratore = ?
" />

<STATEMENT name="GET_MODIFICHE_PATTO_AGENDA"
	query="
	SELECT distinct  ag.PRGMOD, ag.STRTIPOOP, ag.CODCPI, ag.PRGAPPUNTAMENTO, 
		to_char(ag.DTMDATAORA, 'dd/mm/yyyy') as dataAppuntamento, 
		to_char(ag.DTMDATAORA, 'hh24:mi') as orario,
		ag.NUMMINUTI, ag.CODSERVIZIO, ag.PRGSPI, ag.PRGSPIEFF,ag.NUMORAFINEEFF,ag.NUMORAINIZIOEFF,
		ag.TXTNOTE, ag.PRGTIPOPRENOTAZIONE, ag.STRTELRIF, 
		ag.STREMAILRIF, ag.STRTELMOBILERIF, ag.CODEFFETTOAPPUNT,
		ag.CODSTATOAPPUNTAMENTO, ag.PRGAMBIENTE, 
		ag.CODESITOAPPUNT, ag.CDNUTMOD, to_char(ag.DTMMOD, 'dd/mm/mmmm') as dtmmod, 
		to_char(alps.datProtocollo, 'dd/mm/yyyy') as datProtocollo
	FROM MD_AM_PATTO_LAV_AG_AGENDA ag, ag_lavoratore agl, 
		am_patto_lavoratore apl, am_lav_patto_scelta alps
	where 
	    agl.cdnlavoratore = alps.strChiaveTabella
		and agl.codCpi = alps.strChiaveTabella2
		and agl.PRGAPPUNTAMENTO = alps.strChiaveTabella3		
		and apl.prgPattoLavoratore = alps.prgPattoLavoratore 
		and apl.codStatoAtto = 'PR'
		and apl.cdnlavoratore = ?
		and apl.PRGPATTOLAVORATORE = ?
		and ag.CODCPI = agl.CODCPI
		and ag.PRGAPPUNTAMENTO = agl.PRGAPPUNTAMENTO
" />


<STATEMENT name="PATTO_PROTOCOLLATO_MODIFICATO"
	query="
	select * from (
		SELECT TO_CHAR (apl.datultimoprotocollo,'dd/mm/yyyy' ) AS datultimoprotocollo
           FROM am_lav_patto_scelta pts,         
                am_patto_lavoratore apl
           where                                       
	            apl.codstatoatto = 'PR'
	            AND apl.datfine IS NULL
	            and apl.cdnlavoratore = ?
				and (
					exists (
						select pts.codlsttab
						from md_am_patto_lav_pr_mans man 
						where man.prgmansione = pts.strchiavetabella
		                     and pts.codlsttab = 'PR_MAN'
		                     AND man.cdnlavoratore = apl.cdnlavoratore  
					)
					or exists (
						select pts.codlsttab
						from md_am_patto_lav_or_perc per			
						where per.prgpercorso = pts.strchiavetabella
		                     AND pts.codlsttab = 'OR_PER'
		                     AND per.prgcolloquio IN (
		                                              SELECT col.prgcolloquio
		                                                FROM or_colloquio col
		                                               WHERE col.cdnlavoratore = apl.cdnlavoratore)					 
					)
					or  exists (
						select pts.codlsttab
						from md_am_patto_lav_ag_agenda ag, ag_lavoratore agl		
						where agl.cdnlavoratore = pts.strchiavetabella
							  and agl.codcpi = pts.strchiavetabella2
							  and agl.PRGAPPUNTAMENTO = pts.strchiavetabella3
							  and ag.CODCPI = agl.CODCPI
							  and ag.PRGAPPUNTAMENTO = agl.PRGAPPUNTAMENTO
		                      and pts.codlsttab = 'AG_LAV'
		                      and agl.cdnlavoratore = apl.cdnlavoratore					 
					)
					or exists (
						select pts.codlsttab
						from or_percorso_concordato opc, or_colloquio c 
						where opc.prgcolloquio = c.prgcolloquio
                         AND c.cdnlavoratore = apl.cdnlavoratore  
                         and trunc(opc.dtmmod) &gt; trunc (apl.datultimoprotocollo )			 
				)
				)
				and apl.prgpattolavoratore = pts.prgpattolavoratore
		)  
		where 
		 	rownum =1
" />

<STATEMENT name="GET_PATTO_DA_ASSOCIAZIONE"
	query="
	select apl.PRGPATTOLAVORATORE, apl.flgPatto297, 
            to_char(apl.DATSTIPULA,'DD/MM/YYYY') DATSTIPULA, to_char(apl.DATSCADCONFERMA,'DD/MM/YYYY') DATSCADCONFERMA,
            apl.codStatoAtto, apl.codTipoPatto
	from am_patto_lavoratore apl, am_lav_patto_scelta apls
	where apl.prgPattoLavoratore = apls.prgPattoLavoratore
		and apls.prgLavPattoScelta = ?		
" />

<STATEMENT name="UPDATE_PATTO_DAT_ULTIMO_PROT"
	query="
	update am_patto_lavoratore set datUltimoProtocollo = to_date(?,'dd/mm/yyyy HH24:MI'), numKloPattoLavoratore = numKloPattoLavoratore + 1,
	PRGSTATOOCCUPAZ = ? where cdnLavoratore = ?	and datFine is null
" />
<STATEMENT name="UPDATE_PATTO_DAT_ULTIMO_PROT_STAMPA"
	query="	update am_patto_lavoratore 
			set datUltimoProtocollo = to_date(?,'dd/mm/yyyy HH24:MI'), 
				PRGSTATOOCCUPAZ = ?,
				numKloPattoLavoratore = ?
			where cdnLavoratore = ?	and datFine is null " />
<STATEMENT name="QUERY_UPDATE_NOTE_AZIONI"
	query="
	update am_patto_lavoratore set strnoteazioni = ?, numklopattolavoratore = numklopattolavoratore +1
	where prgpattolavoratore = ?
" />
<STATEMENT name="QUERY_UPDATE_NOTE_IMPEGNI"
	query="
	update am_patto_lavoratore set strnoteimpegni = ?, numklopattolavoratore = numklopattolavoratore +1
	where prgpattolavoratore = ?
" />
<STATEMENT name="QUERY_UPDATE_NOTE_AMBITO_PROF"
	query="
	update am_patto_lavoratore set strnoteambitoprof = ?, numklopattolavoratore = numklopattolavoratore +1
	where prgpattolavoratore = ?
" />
<STATEMENT name="QUERY_UPDATE_NOTE_SITUAZIONE_AMM"
	query="
	update am_patto_lavoratore set strnotesituazioneamm = ?, numklopattolavoratore = numklopattolavoratore +1
	where prgpattolavoratore = ?
" />

<STATEMENT name="QUERY_UPDATE_NOTE_FORMAZIONE_PROF"
	query="
	update am_patto_lavoratore set strnoteformprof = ?, numklopattolavoratore = numklopattolavoratore +1
	where prgpattolavoratore = ?
" />

<STATEMENT name="UPDATE_DAT_PROT_INF_LEGATE"
	query="
	update am_lav_patto_scelta  set DATPROTOCOLLO = to_date(?, 'dd/mm/yyyy HH24:MI') 
	where prgPattoLAvoratore = ?
" />
<STATEMENT name="GET_PATTI_STORICIZZATI"
	query="
	select cdnlavoratore
	from am_patto_lavoratore 
	where cdnlavoratore = ?
		AND DATFINE IS NOT NULL
" />
<!-- recupera gli impegni associati al patto -->
<STATEMENT name="GET_IMPEGNI_ASSOCIATI_PATTO"
	query="
	Select am_lav_patto_scelta.prglavpattoscelta, am_patto_lavoratore.CODSTATOATTO 
	from am_patto_lavoratore inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE)
	where am_lav_patto_scelta.PRGPATTOLAVORATORE = ?
	and am_lav_patto_scelta.CODLSTTAB = 'DE_IMPE' " />

<!-- recupera gli impegni associati al patto a partire dal cdnlav -->
<STATEMENT name="GET_IMPEGNI_ASSOCIATI_PATTO_DACDNLAV"
	query="
	Select am_lav_patto_scelta.prglavpattoscelta, am_patto_lavoratore.CODSTATOATTO 
	from am_patto_lavoratore inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE)
	where am_patto_lavoratore.cdnlavoratore = ?
	and am_patto_lavoratore.DATFINE is null
	and am_lav_patto_scelta.CODLSTTAB = 'DE_IMPE'
" />

<!-- Recupera i patti associati allo stato occupaz -->
<STATEMENT name="GET_PATTOSTATOOCCUPAZ"
	query="SELECT DISTINCT am_.prgpattolavoratore,
                                  am_.cdnlavoratore,
                                  am_.prgdichdisponibilita,
                                  to_char(am_.datstipula , 'dd/mm/yyyy') as datstipula,
                                  am_.codstatoatto,
                                  am_.prgstatooccupaz,
                                  am_.flgcomunicazesiti,
                                  am_.codmotivofineatto,
                                  to_char(am_.datscadconferma ,'dd/mm/yyyy') as datscadconferma,
                                  to_char(am_.datfine ,'dd/mm/yyyy') as datfine,
                                  am_.strnote,
                                  am_.cdnutins,
                                  to_char(am_.dtmins ,'dd/mm/yyyy') as dtmins,
                                  am_.cdnutmod,
                                  to_char(am_.dtmmod ,'dd/mm/yyyy') as dtmmod,
                                  am_.numklopattolavoratore,
                                  am_.flgpatto297,
                                  to_char(am_.DATULTIMOPROTOCOLLO,'dd/mm/yyyy') DATULTIMOPROTOCOLLO,
                                  (cpi_.strdescrizione || ' - ' || cpi_.codcpi) as descCPI,
                                  ts_.strcognome as CognIns,
                                  ts_.strnome NomIns,
                                  ts_utentemod.strcognome CognMod,
                                  ts_utentemod.strnome NomMod,
                                  an.strcognome,
                                  an.strnome,
                                  an.strcodicefiscale,
                                  to_char(dispo.datDichiarazione ,'dd/mm/yyyy') as datDichiarazione,
                                  dispo.codStatoAtto as codStatoAttoDid,
                                  to_char(am.datInizio ,'dd/mm/yyyy') as DATINIZIO,
                                  dso_.strdescrizione as DESCRIZIONESTATO,
                                  am_.codTipoPatto, am_.codServizio
                             FROM am_patto_lavoratore am_,
                                  an_lavoratore AN,
                                  am_elenco_anagrafico AM,
                                  AM_dich_disponibilita dispo,
                                  an_lav_storia_inf_coll sc_,
                                  an_lav_storia_inf st_,
                                  de_cpi CPI_,
                                  ts_utente ts_,
                                  ts_utente ts_utentemod,
                                  am_stato_occupaz so_,
                                  de_stato_occupaz dso_,
                                  de_stato_occupaz_ragg dsor_ 
                      WHERE ((an.cdnlavoratore = am_.cdnlavoratore)
                             AND (AM.prgelencoanagrafico (+)= dispo.prgelencoanagrafico) 
                             AND (am.prgElencoAnagrafico = sc_.strChiaveTabella(+))
                             AND (sc_.codLstTab is null or sc_.codLstTab = 'EA')
                             AND (sc_.prgLavStoriaInf = st_.prgLavStoriaInf(+))
                             AND (CPI_.codCPI = am_.codCPI)
                             AND (am_.cdnUtIns = ts_.cdnut)
                             AND (am_.cdnUtMod = ts_utentemod.cdnut)
                             AND (dispo.prgdichdisponibilita (+)= am_.prgdichdisponibilita)
                             AND (am_.prgStatoOccupaz = so_.prgstatooccupaz(+))
                             AND (so_.codstatooccupaz = dso_.codstatooccupaz(+))
                             AND (dso_.codstatooccupazragg = dsor_.codstatooccupazragg(+))
                             AND (am_.prgstatooccupaz = ?)
                             )" />

<STATEMENT name="GET_PERCORSI_COLLOQUIO"
	query="
		SELECT distinct per.PRGPERCORSO
        FROM or_percorso_concordato per,
            or_colloquio coll            
        WHERE per.prgcolloquio = coll.prgcolloquio
			and per.prgcolloquio= ?
        	AND coll.cdnlavoratore = ?
" />

<STATEMENT name="checkSePossibileRiaperturaDid"
	query="{ call ? := PG_GESTAMM.checkSePossibileRiaperturaDid(?,?) }" />

<STATEMENT name="riapriDid"
	query="update am_dich_disponibilita 
					set DATFINE = null, 
					NUMKLODICHDISP = ?,
					CODMOTIVOFINEATTO = null, 
					NUMDELIBERA = null,
					DTMMOD = SYSDATE, 
					CDNUTMOD = ?,
					STRNOTE = ?,
					CODMOTIVORIAPERTURAATTO = ?,
					prgelencoanagrafico = decode(?,null,prgelencoanagrafico,?)
					where PRGDICHDISPONIBILITA = ?" />

<STATEMENT name="GET_MOT_RIAPERTURADID"
	query="select ann.codmotannullamentoatto as codice, ann.strdescrizione as descrizione
				     from de_mot_annullamento_atto ann inner join
				   	      (de_mot_annull_atto_lst_tab mot inner join de_lst_tab cod on mot.codlsttab = cod.codlsttab)
						  on ann.codmotannullamentoatto = mot.codmotannullamentoatto	  
					 where (ann.codmonoriaperchius = 'R' or ann.codmonoriaperchius = 'E')
					 and cod.strnometabella = 'AM_DICH_DISPONIBILITA'" />

<STATEMENT name="GET_COD_STATO_ATTO_DID"
	query="select ann.codstatoatto as codice, ann.strdescrizione as descrizione, ann.CODMONOPRIMADOPOINS
				     from de_stato_atto ann inner join
				   	      (de_stato_atto_lst_tab mot inner join de_lst_tab cod on mot.codlsttab = cod.codlsttab)
						  on ann.codstatoatto = mot.codstatoatto	  
					 where (ann.codmonoprimadopoins = 'D' or ann.codmonoprimadopoins = 'E' or ann.codmonoprimadopoins = 'P')
					 and cod.strnometabella = 'AM_DICH_DISPONIBILITA'
					 order by descrizione" />

<STATEMENT name="GET_MOT_ANNULLAMENTO_DID"
	query="select ann.codmotannullamentoatto as codice, ann.strdescrizione as descrizione
				     from de_mot_annullamento_atto ann inner join
				   	      (de_mot_annull_atto_lst_tab mot inner join de_lst_tab cod on mot.codlsttab = cod.codlsttab)
						  on ann.codmotannullamentoatto = mot.codmotannullamentoatto	  
					 where (ann.codmonoriaperchius = 'C' or ann.codmonoriaperchius = 'E')
					 and cod.strnometabella = 'AM_DICH_DISPONIBILITA'" />

<STATEMENT name="annullaDid"
	query="update am_dich_disponibilita  
					set numklodichdisp = ? + 1,
					dtmmod = sysdate, 
					cdnutmod = ?,
					codstatoatto = ?,
					codmotannullamentoatto = ?,
					prgstatooccupaz = null
					where prgdichdisponibilita = ?" />

<STATEMENT name="annullaDocumento"
	query="update am_documento set codstatoatto = ?,
							dtmmod = sysdate,
							cdnutmod = ?,
							numklodocumento = numklodocumento + 1
							where prgdocumento = ?" />

<STATEMENT name="annullaPatto"
	query="update am_patto_lavoratore  
					set numklopattolavoratore = numklopattolavoratore + 1,
					dtmmod = sysdate, 
					cdnutmod = ?,
					codstatoatto = ?
					where prgpattolavoratore = ?" />
<STATEMENT name="Iscrizioni_Mobilita"
	query="
      select mb.PRGMOBILITAISCR,  
      		to_char(mb.DATINIZIO, 'dd/mm/yyyy')  as datInizio         
      from am_mobilita_iscr mb, de_mb_tipo  
      where mb.CDNLAVORATORE = ?       
      		and mb.CODTIPOMOB = de_mb_tipo.CODMBTIPO       
      		and de_mb_tipo.CODMONOATTIVA in ('A','S')
      		order by mb.DATINIZIO desc
" />
<STATEMENT name="STATI_OCCUPAZIONALI_INTERVALLI"
	query="
	select de_stato_occupaz.CODSTATOOCCUPAZRAGG, 
		to_char(am_stato_occupaz.datInizio, 'dd/mm/yyyy') as datInizio, 
		to_char(am_stato_occupaz.datFine,   'dd/mm/yyyy') as datFine
	from am_stato_occupaz , de_stato_occupaz
	where am_stato_occupaz.cdnLavoratore = ?
		and am_stato_occupaz.codStatoOccupaz = de_stato_occupaz.codStatoOccupaz
		order by am_stato_occupaz.datInizio desc
" />
<STATEMENT name="GET_INFO_DID"
	query="
	select CODSTATOATTO, FLGRISCHIODISOCCUPAZIONE, FLGLAVOROAUTONOMO
	from AM_DICH_DISPONIBILITA
	where PRGDICHDISPONIBILITA = ? 
" />

<STATEMENT name="GET_DID_PROTOCOLLATA_SUCCESSIVA"
	query="select did.PRGDICHDISPONIBILITA, did.codStatoAtto, to_char(did.datFine,'dd/mm/yyyy') datFine
					from AM_DICH_DISPONIBILITA did, am_elenco_anagrafico el
					where did.prgelencoanagrafico = el.prgelencoanagrafico
					and el.cdnlavoratore = ?
					and el.datcan is null
					and did.prgdichdisponibilita &gt; ?
					and did.codStatoAtto in ('PR','PA')
" />

<STATEMENT name="GET_DID_PA_APERTA"
	query="select did.PRGDICHDISPONIBILITA
					from AM_DICH_DISPONIBILITA did
					where did.prgelencoanagrafico = ?
					and did.codStatoAtto = 'PA'
					and did.datFine is null
" />


<!-- patto storicizzato nuova versione -->
<STATEMENT name="GET_PATTO_OBBLIGO_FORMATIVO_STORICO"
	query="
          SELECT aof.cdnlavoratore /* chiave pk */, 
		       aof.codmodalitaassolv,
		       aof.strnote,
		       aof.cdnutins, TO_CHAR (aof.dtmins, 'dd/mm/yyyy') dtmins, aof.cdnutmod,
		       TO_CHAR (aof.dtmmod, 'dd/mm/yyyy') dtmmod, numkloobbligoform,
		       aps.prglavpattoscelta,
		       flgobbligoformativo,
		       flgobbligoscolastico,
		       de_fo_modalita_assolv.strdescrizione AS descrizione
		 FROM am_obbligo_formativo aof,
		       de_fo_modalita_assolv,
		       am_lav_patto_scelta aps,
		       am_patto_lavoratore apl
		 WHERE apl.prgPattoLavoratore = ?
		   AND apl.prgpattolavoratore = aps.prgpattolavoratore
		   AND (aps.codlsttab = 'AM_OBBFO')
		   AND (aps.strchiavetabella = aof.cdnlavoratore)
		   AND (aof.codmodalitaassolv = de_fo_modalita_assolv.codmodalitaassolv)
" />
<STATEMENT name="GET_PATTO_PERM_SOGG_STORICO"
	query="
			SELECT   psogg.prgpermsogg, 
					 TO_CHAR (datrichiesta, 'dd/mm/yyyy') datrichiesta,
			         TO_CHAR (datscadenza, 'dd/mm/yyyy') datscadenza,
			         psogg.codmotivoril,
			         psogg.codstatus,
			         de_status_straniero.strdescrizione statusDescr,
			         de_ex_motivo_ril.strdescrizione AS descrizionemot, 
			         de_stato_atto.strdescrizione AS descrizionerich, 
			         psogg.strnote,
			         codstatorichiesta,
			         psogg.cdnutins, TO_CHAR (psogg.dtmins, 'dd/mm/yyyy') dtmins,
			         psogg.cdnutmod, TO_CHAR (psogg.dtmmod, 'dd/mm/yyyy') dtmmod,
			         psogg.numklopermsogg, aps.prglavpattoscelta
			    FROM am_ex_perm_sogg psogg,
			         de_ex_motivo_ril,
			         de_stato_atto,
			         am_lav_patto_scelta aps,
			         am_patto_lavoratore apl,
			         de_status_straniero
			   WHERE 
			         apl.prgpattolavoratore = aps.prgpattolavoratore
			     AND apl.prgPattoLavoratore = ?
			     /* */
			     AND aps.codlsttab = 'AM_EX_PS'
			     AND aps.strchiavetabella = psogg.prgpermsogg
			     AND (psogg.codmotivoril = de_ex_motivo_ril.codmotivoril)
			     AND (psogg.codstatus = de_status_straniero.codstatus)
			     AND (psogg.codstatorichiesta = de_stato_atto.codstatoatto)
			ORDER BY datscadenza DESC
" />
<STATEMENT name="GET_PATTO_STATO_OCCUPAZ_STORICO"
	query="
		  SELECT aso.codstatooccupaz, aso.prgstatooccupaz,
		       de_stato_occupaz.strdescrizione AS descrizionestato,		       
		       de_181_categoria.strdescrizione AS descrizione181,
		       aso.codcategoria181,
		       TO_CHAR (aso.datinizio, 'DD/MM/YYYY') datinizio,
		       TO_CHAR (aso.datfine, 'DD/MM/YYYY') datfine,
		       aso.flgindennizzato, aso.flgpensionato,
		       aso.nummesisosp,
		       TO_CHAR (aso.datanzianitadisoc,'DD/MM/YYYY') datanzianitadisoc,
		       aso.strnote,
		       TO_CHAR (aso.dtmins, 'DD/MM/YYYY') dtmins,
		       TO_CHAR (aso.dtmmod, 'DD/MM/YYYY') dtmmod,
		       aso.cdnutins, aso.cdnutmod,
		       aso.numreddito, aso.strnumatto,
		       TO_CHAR (aso.datatto, 'DD/MM/YYYY') datatto,
		       aso.codstatoatto,
		       de_stato_atto.strdescrizione AS descrizioneatto,
		       TO_CHAR (aso.datrichrevisione,'DD/MM/YYYY') datrichrevisione,
		       TO_CHAR (aso.datricorsogiurisdiz,'DD/MM/YYYY') datricorsogiurisdiz,
		       aso.prgstatooccupazprec,
		       aso.numklostatooccupaz,
		       TRUNC (MONTHS_BETWEEN (SYSDATE, aso.datanzianitadisoc)) AS mesi_anz
		  FROM am_stato_occupaz aso,
		       de_stato_occupaz,
		       de_181_categoria,
		       de_stato_atto,
		       am_patto_lavoratore amp,
		       am_patto_lavoratore apl
		 WHERE apl.prgPattoLavoratore = ?
		   AND apl.prgpattolavoratore = amp.prgpattolavoratore
		   AND aso.codcategoria181 = de_181_categoria.codcategoria181(+)
		   AND aso.codstatoatto = de_stato_atto.codstatoatto(+)
		   AND aso.codstatooccupaz = de_stato_occupaz.codstatooccupaz(+)		
		   AND amp.prgstatooccupaz = aso.prgstatooccupaz(+)
" />
<STATEMENT name="GET_PATTO_MOBILITA_ISCR_STORICO"
	query="
			SELECT DISTINCT am_mobilita_iscr.cdnutins, am_mobilita_iscr.cdnutmod,
                am_mobilita_iscr.codmotivodiff,
                am_mobilita_iscr.codmotivofine, am_mobilita_iscr.codtipomob,
                case   	   
                  when ma.codlistespec is not null
                    then (DE_MB_TIPO.STRDESCRIZIONE || ' (Min: ' || mn.des_listespec|| ')' )	     
                    else DE_MB_TIPO.STRDESCRIZIONE || ' (Min: nessuna corrispondenza)' 
                end as DESCRIZIONE,
                TO_CHAR (am_mobilita_iscr.datatto, 'DD/MM/YYYY') datatto,
                TO_CHAR (am_mobilita_iscr.datfine, 'DD/MM/YYYY') datfine,
                TO_CHAR (am_mobilita_iscr.datfineindennita,
                         'DD/MM/YYYY'
                        ) datfineindennita,
                TO_CHAR (am_mobilita_iscr.datinizio, 'DD/MM/YYYY') datinizio,
                TO_CHAR (am_mobilita_iscr.datinizioindennita,
                         'DD/MM/YYYY'
                        ) datinizioindennita,
                TO_CHAR (am_mobilita_iscr.datmaxdiff,
                         'DD/MM/YYYY') datmaxdiff,
                TO_CHAR (am_mobilita_iscr.dtmins, 'DD/MM/YYYY') dtmins,
                TO_CHAR (am_mobilita_iscr.dtmmod, 'DD/MM/YYYY') dtmmod,
                am_mobilita_iscr.flgdifferimento,
                am_mobilita_iscr.flgindennita, am_mobilita_iscr.numklomobiscr,
                am_mobilita_iscr.prgmobilitaiscr,
                am_mobilita_iscr.prgmovimento, am_mobilita_iscr.strnote,
                am_mobilita_iscr.strnumatto,
                TO_CHAR (am_movimento.datiniziomov,
                         'DD/MM/YYYY') datiniziomov,
                TO_CHAR (am_movimento.datfinemov, 'DD/MM/YYYY') datfinemov,
                de_mansione.strdescrizione AS mansione,
                an_unita_azienda.prgunita, an_unita_azienda.prgazienda,
                an_unita_azienda.strindirizzo, an_unita_azienda.strtel,
                an_azienda.strpartitaiva, an_azienda.strragionesociale,
                de_comune.strdenominazione AS comune, aps.prglavpattoscelta
           FROM am_mobilita_iscr,
                de_mb_tipo,
                am_movimento,
                an_azienda,
                an_unita_azienda,
                am_patto_lavoratore apl,
                de_comune,
                de_mansione,
                am_lav_patto_scelta aps,
                ma_listespeciali ma,
                mn_listespeciali mn
          WHERE apl.prgPattoLavoratore = ?
            AND apl.prgpattolavoratore = aps.prgpattolavoratore
            AND am_mobilita_iscr.codtipomob = de_mb_tipo.codmbtipo(+)
            AND am_movimento.prgmovimento = am_mobilita_iscr.prgmovimento
            AND an_azienda.prgazienda = an_unita_azienda.prgazienda
            AND am_movimento.prgazienda = an_unita_azienda.prgazienda
            AND am_movimento.prgunita = an_unita_azienda.prgunita
            AND am_movimento.codmansione = de_mansione.codmansione
            AND an_unita_azienda.codcom = de_comune.codcom
            AND aps.strchiavetabella = am_mobilita_iscr.prgmobilitaiscr
            AND aps.codlsttab = 'AM_MB_IS'    
            and DE_MB_TIPO.codmbtipo = ma.codmbtipo 
            and mn.cod_listespec= ma.codlistespec (+)           
" />
<STATEMENT name="GET_PATTO_INDISP_TEMP_STORICO"
	query="
			SELECT   am_indisp_temp.prgindisptemp, am_indisp_temp.codindisptemp,
			         de_indisp_temp.strdescrizione descrizione,
			         TO_CHAR (am_indisp_temp.datinizio, 'DD/MM/YYYY') datinizio,
			         TO_CHAR (am_indisp_temp.datfine, 'DD/MM/YYYY') datfine,
			         am_indisp_temp.strnote,
			         TO_CHAR (am_indisp_temp.dtmins, 'DD/MM/YYYY') dtmins,
			         TO_CHAR (am_indisp_temp.dtmmod, 'DD/MM/YYYY') dtmmod,
			         am_indisp_temp.cdnutins, am_indisp_temp.cdnutmod,
			         am_indisp_temp.numkloindisptemp, aps.prgpattolavoratore,
			         aps.prglavpattoscelta
			    FROM am_indisp_temp,
			         de_indisp_temp,
			         am_lav_patto_scelta aps,
			         am_patto_lavoratore apl
			   WHERE
			         apl.prgPattoLavoratore = ?
			     AND apl.prgpattolavoratore = aps.prgpattolavoratore
			     AND (am_indisp_temp.codindisptemp = de_indisp_temp.codindisptemp)	 
			     AND aps.strchiavetabella = am_indisp_temp.prgindisptemp
			     AND aps.codlsttab = 'AM_IND_T'
			ORDER BY am_indisp_temp.datinizio DESC
" />
<STATEMENT name="GET_PATTO_ESP_LAV_STORICO"
	query="
			 SELECT t1.prgesplavoro, t1.nummeseinizio, t1.numannoinizio, t3.codmansione,
			       t3.strdescrizione AS descrizionemans, t1.codcontratto,
			       t2.strdescrizione AS descrizionecontr,
			       (t1.numstipendio * 12) AS retribannua, t1.nummesefine, t1.numannofine,
			       t1.cdnutins, TO_CHAR (t1.dtmins, 'DD/MM/YYYY') dtmins, t1.cdnutmod,
			       TO_CHAR (t1.dtmmod, 'DD/MM/YYYY') dtmmod, aps.prglavpattoscelta,
			       aps.prgpattolavoratore
			  FROM pr_esp_lavoro t1,
			       de_contratto t2,
			       de_mansione t3,
			       am_lav_patto_scelta aps,
			       pr_mansione prm,
			       am_patto_lavoratore apl
			 WHERE apl.prgPattoLavoratore = ?
			   AND apl.prgpattolavoratore = aps.prgpattolavoratore
			   AND aps.codlsttab = 'PR_ESP_L'
			   AND aps.strchiavetabella = t1.prgesplavoro
			   AND t1.codcontratto = t2.codcontratto
			   AND t1.prgmansione = prm.prgmansione
			   AND prm.codmansione = t3.codmansione
" />
<STATEMENT name="GET_PATTO_LAVORATORE_TITOLI_STORICO"
	query="
			SELECT   prs.prgstudio, prs.codtitolo, tit.strdescrizione AS destitolo,
			         prs.codtipotitolo, tit2.strdescrizione AS destipotitolo,
			         prs.strspecifica, prs.numanno numanno, prs.flgprincipale,
			         aps.prglavpattoscelta, aps.prgpattolavoratore
			    FROM pr_studio prs,
			         am_lav_patto_scelta aps,
			         de_titolo tit,
			         de_titolo tit2,
			         am_patto_lavoratore apl
			   WHERE 
			         apl.prgPattoLavoratore = ?
			     AND apl.prgpattolavoratore = aps.prgpattolavoratore
			     AND aps.codlsttab = 'PR_STU'
			     AND aps.strchiavetabella = prs.prgstudio
			     AND prs.codtitolo = tit.codtitolo
			     AND prs.codtipotitolo = tit2.codtitolo
			ORDER BY NVL (prs.flgprincipale, ' ') DESC
" />
<STATEMENT name="GET_PATTO_CORSO_STORICO"
	query="
			SELECT DISTINCT de_corso.strdescrizione AS corso, pr_corso.numanno,
	                pr_corso.flgcompletato, aps.prglavpattoscelta
	           FROM pr_corso,
	                de_corso,
	                am_lav_patto_scelta aps,
	                am_patto_lavoratore apl
	          WHERE pr_corso.codcorso = de_corso.codcorso
	            AND apl.prgPattoLavoratore = ?
	            AND apl.prgpattolavoratore = aps.prgpattolavoratore
	            AND aps.strchiavetabella = pr_corso.prgcorso
	            AND aps.codlsttab = 'PR_COR'        
" />
<STATEMENT name="GET_PATTO_AM_CM_ISCR_STORICO"
	query="
			SELECT i.prgcmiscr, i.codcmtipoiscr,
			        case   	   
           			    when ma.cod_categoria is not null
           			         then (de_cm_tipo_iscr.STRDESCRIZIONE || ' (Min: ' || mn.des_categoria || ')')	     
           			    else de_cm_tipo_iscr.STRDESCRIZIONE || ' (Min: nessuna corrispondenza)'
           		   end as descrizioneiscr,
			       TO_CHAR (i.datdatainizio, 'DD/MM/YYYY') datinizio,
			       TO_CHAR (i.datdatafine, 'DD/MM/YYYY') datfine, 
			       i.codtipoinvalidita,
			       de_cm_tipo_invalidita.strdescrizione AS descrizioneinv,
			       i.numpercinvalidita, i.strnote,
			       TO_CHAR (i.dtmins, 'DD/MM/YYYY') dtmins,
			       TO_CHAR (i.dtmmod, 'DD/MM/YYYY') dtmmod, i.cdnutins, i.cdnutmod,
			       i.numklocmiscr, aps.prglavpattoscelta,
			       de_cm_tipo_iscr.codMonoTipoRagg
			  FROM am_cm_iscr i,
			       de_cm_tipo_iscr,
			       de_cm_tipo_invalidita,
			       am_lav_patto_scelta aps,
			       am_patto_lavoratore apl,
			       ma_cat_protette ma, mn_cat_protette mn
			 WHERE 
			       apl.prgPattoLavoratore = ?
			   AND apl.prgpattolavoratore = aps.prgpattolavoratore
			   AND aps.strchiavetabella = i.prgcmiscr
			   AND aps.codlsttab = 'AM_CM_IS'
			   AND i.codcmtipoiscr = de_cm_tipo_iscr.codcmtipoiscr(+)
			   and ma.codcmtipoiscr = de_cm_tipo_iscr.Codcmtipoiscr
               and ma.cod_categoria = mn.cod_categoria (+)
			   AND i.codtipoinvalidita = de_cm_tipo_invalidita.codtipoinvalidita(+)     
			   /* TODO Savino occhio a questa condizione GET_PATTO_AM_CM_ISCR_STORICO */
			   AND i.datdatafine is null   
" />

<STATEMENT name="NOTE_PATTO_STORICIZZATO"
	query="
	SELECT p.strnoteambitoprof, p.strnoteazioni, p.strnoteimpegni, p.flgPatto297,
	   p.strnotesituazioneamm, p.PRGPATTOLAVORATORE,  p.numklopattolavoratore,	   
	   to_char(p.datStipula, 'dd/mm/yyyy') as datStipula, 
	   to_char(p.datScadConferma, 'dd/mm/yyyy') as datScadenzaConferma,
	   p.codStatoAtto,
	   to_char(p.cdnLavoratore) as cdnLavoratore
	FROM am_patto_lavoratore p
	WHERE p.prgPattoLavoratore = ?
" />
<STATEMENT name="INFO_PROTOCOLLO_PATTO_STORICIZZATO"
	query="
SELECT   doc.prgdocumento prgdocumento, doc.cdnlavoratore cdnlavoratore, doc.datprotocollo,
         TO_CHAR (doc.datprotocollo, 'dd/mm/yyyy') datprot,
         TO_CHAR (doc.datprotocollo, 'HH24:MI') oraprot, doc.numannoprot annoprot,
         doc.numprotocollo numprotocollo, doc.strnomedoc strnomedoc, doc.codmonoio,
         de_doc_ambito.strdescrizione
    FROM am_documento doc,
         am_documento_coll doc_coll,
         ts_componente tsc,
         an_lavoratore anl,
         am_patto_lavoratore,
         de_doc_ambito,
         de_doc_tipo, de_codifica_patto
   WHERE doc.cdnlavoratore = anl.cdnlavoratore
     AND doc_coll.prgdocumento = doc.prgdocumento
     AND doc_coll.cdncomponente = tsc.cdncomponente
/*     AND doc.datfine IS NULL*/
     AND doc.codtipodocumento = de_doc_tipo.codtipodocumento
     AND de_doc_tipo.codambitodoc = de_doc_ambito.codambitodoc
     AND TO_NUMBER (doc_coll.strchiavetabella) = am_patto_lavoratore.prgpattolavoratore
     AND am_patto_lavoratore.codcodificapatto = de_codifica_patto.codcodificapatto(+)
/*     AND am_patto_lavoratore.datfine IS NULL*/
     AND UPPER (tsc.strpage) = 'PATTOLAVDETTAGLIOPAGE'
	 and am_patto_lavoratore.prgpattolavoratore=?
     AND doc.cdnlavoratore = am_patto_lavoratore.cdnlavoratore
     AND (   (doc.codtipodocumento = 'PT297' and nvl(am_patto_lavoratore.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'S') 
          OR (doc.codtipodocumento = 'ACLA' and nvl(am_patto_lavoratore.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'N')  )
     AND (   (doc.codstatoatto = 'PR' AND am_patto_lavoratore.codstatoatto = 'PR')
          OR (am_patto_lavoratore.codstatoatto = 'PP')
         )
ORDER BY doc.prgdocumento DESC
" />

<STATEMENT name="PATTO_ELENCO_MANSIONI_STORICO"
	query="
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            1 as Ordine,'MANSIONE_PROF',
            '' as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta,
            to_char(ps_.datProtocollo , 'dd/mm/yyyy') as datProtocollo
        FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)            */
            and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            )
        UNION
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            2 as Ordine,'CONTRATTO',
            dec_.strdescrizione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
        FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_contratto dis_,
            de_contratto dec_
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)*/
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codcontratto = dis_.codcontratto)
            )
        UNION
        SELECT distinct PR_.PRGMANSIONE, de_.strdescrizione as Mansione,
            3 as Ordine,'ORARIO',
            dec_.strdescrizione 
            || 
            decode(dec_.codmonoorario,
            'T',' (Min: Full Time)',
            'P',' (Min: Part Time)',
            ' (Min: nessuna corrispondenza)') as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta,null as datProtocollo
        FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_orario dis_,
            de_orario dec_
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)*/
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codorario = dis_.codorario)
            )
        UNION
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            4 as Ordine,'TURNO',
            dec_.strdescrizione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile, pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
        FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_turno dis_,
            de_turno dec_
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)*/
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codturno = dis_.codturno)
            )
        UNION
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            5 as Ordine,'COMUNE',
            dec_.strdenominazione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo            
        FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_comune dis_,
            de_comune dec_
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)*/
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codcom = dis_.codcom)
            )
        UNION
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            6 as Ordine,'PROVINCIA',
            dec_.strdenominazione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione, pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
        FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_provincia dis_,
            de_provincia dec_
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)*/
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codprovincia = dis_.codprovincia)
            )
        UNION
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            7 as Ordine,'REGIONE',
            dec_.strdenominazione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
        FROM am_lav_patto_scelta ps_,pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_regione dis_,
            de_regione dec_
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)*/
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codregione = dis_.codregione)
            )
        UNION
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            8 as Ordine,'STATO',
            dec_.strdenominazione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            null as FLGDISPAUTO, null as flgDispMoto, null as flgPendolarismo, null as NUMOREPERC, null as FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
         FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_dis_stato dis_,
            de_comune dec_
         WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)*/
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codcom = dis_.codcom)
            )
        UNION
        SELECT distinct PR_.PRGMANSIONE,
            de_.strdescrizione as Mansione,
            9 as Ordine,'MOBIL_GEOGR',
            dec_.strdescrizione as Vincolo,
            pr_.flgesperienza as Esperienza,
            pr_.flgDisponibile,
            pr_.flgDispFormazione,
            pr_.flgPIP,
            pr_.CODMONOTEMPO as Tempo,
            dis_.FLGDISPAUTO, dis_.flgDispMoto, dis_.flgPendolarismo, dis_.NUMOREPERC, dis_.FLGMOBSETT,
            ps_.prgLavPattoScelta, null as datProtocollo
        FROM am_lav_patto_scelta ps_,
            pr_mansione pr_,
            de_mansione de_,
            am_patto_lavoratore amp,
            pr_mobil_geogr dis_,
            de_trasferta dec_
        WHERE ( (pr_.prgmansione = ps_.strchiavetabella)
            AND (ps_.codlsttab = 'PR_MAN')
            AND (ps_.prgpattolavoratore = amp.prgPattoLavoratore)
            /*AND (amp.datfine is null)*/
            AND (amp.prgPattoLavoratore=ps_.prgPattoLavoratore) AND amp.prgPattoLavoratore = ?
			and amp.cdnlavoratore = pr_.cdnlavoratore	
            AND (de_.codmansione = pr_.codmansione)
            AND (pr_.prgmansione = dis_.prgmansione)
            AND (dec_.codtrasferta = dis_.codtrasferta)
            )
            order by 1, 2, 3, 4, 5" />

<STATEMENT name="PATTO_ELENCO_INDISPONIBILITA_STORICO"
	query="SELECT ind.strragsocialeazienda, aps.prglavpattoscelta
              FROM pr_indisponibilita ind,
                   am_lav_patto_scelta aps,
                   am_patto_lavoratore apl
             WHERE              	
				   apl.prgPattoLavoratore = ?
             	/**/
               AND aps.strchiavetabella = ind.prgindisponibilita
               AND apl.prgpattolavoratore = aps.prgpattolavoratore
               and aps.CODLSTTAB='PR_IND' 
" />

<STATEMENT name="PATTO_AZIONI_STORICO"
	query="SELECT de_.STRDESCRIZIONE Descrizione, or_.codcpi,
                      to_char(de_.datFineVal, 'dd/mm/yyyy') as  entroIl,
                      des.strdescrizione as Esito, ps_.prglavpattoscelta,
       				  TO_CHAR (percorso.DATSTIMATA, 'dd/mm/yyyy') AS dataPercorso,
       				  TO_CHAR (percorso.DATEFFETTIVA, 'dd/mm/yyyy') AS dataEffettiva,
       				  ragg.STRDESCRIZIONE as azione_ragg, percorso.strNote STRNOTE,
       				  to_char(ps_.datProtocollo, 'dd/mm/yyyy') as datProtocollo,
       				  or_vch_voucher.prgvoucher, or_vch_voucher.codstatovoucher, or_vch_voucher.codattivazione, 
       				  DE_VCH_MOTIVO_ANNULLAMENTO.strdescrizione as descrAnnull, 
       				  percorso.prgpercorso, percorso.prgcolloquio, percorso.prgazioni,
       				  (select count(*)
           				from vch_modello_voucher
           				where PRGAZIONI = percorso.prgazioni and FLGATTIVO = 'S') numModelloVoucher,
           			  decode(or_vch_voucher.codstatovoucher, null, 'Nessun Voucher', de_vch_stato.strdescrizione) as descStatoVoucher 
                 FROM or_colloquio or_,
                      or_percorso_concordato percorso,
                      de_azione de_,
                      de_azione_ragg ragg,
                      am_lav_patto_scelta ps_, de_esito des,
	                  am_patto_lavoratore apl, or_vch_voucher, de_vch_stato, DE_VCH_MOTIVO_ANNULLAMENTO
              WHERE or_.prgcolloquio = percorso.prgcolloquio
                  AND de_.prgazioni = percorso.prgazioni
                  and de_.PRGAZIONERAGG = ragg.PRGAZIONIRAGG
                  AND or_.cdnLavoratore = apl.cdnLavoratore
                  AND apl.prgPattoLavoratore = ?
                  AND (ps_.codlsttab = 'OR_PER' and to_char(percorso.prgpercorso) = ps_.strchiavetabella)
                  AND percorso.CODESITO  = des.codesito (+) 
                  AND (percorso.prgpercorso = or_vch_voucher.prgpercorso (+) AND percorso.prgcolloquio = or_vch_voucher.prgcolloquio (+))
                  AND (or_vch_voucher.codstatovoucher = de_vch_stato.codstatovoucher (+))
                  AND (or_vch_voucher.CODVCHMOTIVOANNULLAMENTO = DE_VCH_MOTIVO_ANNULLAMENTO.CODVCHMOTIVOANNULLAMENTO (+))
                  and apl.PRGPATTOLAVORATORE = ps_.PRGPATTOLAVORATORE
              order by percorso.datStimata desc" />

<STATEMENT name="PATTO_ELENCO_APPUNTAMENTI_STORICO"
	query="
SELECT TO_CHAR (ag_.dtmdataora, 'dd/mm/yyyy') AS DATA, TO_CHAR (ag_.dtmdataora,'hh24:mi') AS orario,
       ag_.numminuti AS durata, de_.strdescrizione AS desservizio,
       (NVL (esito.strdescrizione, ' ')) AS desesito, ps_.prglavpattoscelta,
       TO_CHAR (ps_.datprotocollo, 'dd/mm/yyyy') AS datprotocollo
  FROM ag_agenda ag_,
       de_servizio de_,
       ag_lavoratore lav,
       de_esito_appunt esito,
       am_lav_patto_scelta ps_,
       am_patto_lavoratore apm
 WHERE lav.codcpi = ag_.codcpi
   AND lav.prgappuntamento = ag_.prgappuntamento
   AND lav.codcpi = ag_.codcpi
   AND ag_.codservizio = de_.codservizio
   AND ag_.codesitoappunt = esito.codesitoappunt(+)
   AND apm.cdnlavoratore = lav.cdnlavoratore
   AND apm.prgpattolavoratore = ps_.prgpattolavoratore
   AND lav.cdnlavoratore = ps_.strchiavetabella
   AND lav.codcpi = ps_.strchiavetabella2
   AND lav.prgappuntamento = ps_.strchiavetabella3
   AND ps_.codlsttab = 'AG_LAV'
   and apm.prgPattoLavoratore=?
   /*AND (
   	   upper(nvl(?, '1'))='TRUE' or
   	   TO_DATE (ag_.dtmdataora, 'dd/mm/yyyy') &gt;= TO_DATE (SYSDATE, 'dd/mm/yyyy')
   )*/
" />

<STATEMENT name="PATTO_IMPEGNI_STORICO"
	query="
	     select  imp.codImpegno, imp.strDescrizione, imp.codMonoImpegnoDi, 
            aps.prgLavPattoScelta, imp.flgesiti,aps.STRALTREINF
	     from de_impegno imp, am_lav_patto_scelta aps, am_patto_lavoratore apl
	     where imp.CODIMPEGNO = aps.STRCHIAVETABELLA and aps.CODLSTTAB='DE_IMPE' 
			and aps.PRGPATTOLAVORATORE = apl.PRGPATTOLAVORATORE and apl.prgPattoLavoratore = ?			
			and (imp.codMonoLavAzienda in ('L','E'))
			order by imp.codImpegno
" />

<STATEMENT name="GET_DID_LAVORATORE_PA_PR"
	query="select did.PRGDICHDISPONIBILITA, did.codStatoAtto, to_char(did.datFine,'dd/mm/yyyy') datFine
					from AM_DICH_DISPONIBILITA did, am_elenco_anagrafico el
					where did.prgelencoanagrafico = el.prgelencoanagrafico
					and el.cdnlavoratore = ?
					and el.datcan is null
					and did.codStatoAtto in ('PR','PA')
					and did.datFine is null
" />

<STATEMENT name="GET_MAX_DATA_FINE_PATTO_STORICIZZATO"
	query="select to_char(max(tab.DATFINE),'dd/mm/yyyy') datFineMax
					from am_patto_lavoratore tab
					where tab.prgPattoLavoratore != ?
					and tab.DATFINE is not null
					and tab.CDNLAVORATORE = ?
" />

<STATEMENT name="CHECK_LAV_CM_ISCR_CHIUSE"
	query="{ call ? := PG_COLL_MIRATO.checkIscrLavCMSoloChiuse(?, ?, ?) }" />

<STATEMENT name="CM_ISCR_VERB_ACC"
	query="SELECT V.prgVerbaleAcc AS CODICE, TO_CHAR(V.datverbaleprimaist,'dd/mm/yyyy') || ' - ' || SUBSTR(V.strverbaleprimaist, 0, 50) AS DESCRIZIONE
				FROM CM_VERBALE_ACCERT V
				WHERE V.PRGVERBALEACC = ?" />

<STATEMENT name="GET_CAT_181_DA_STORED" query="{ call ? := GETCAT181PERSTAMPA(?, ?) }" />

<STATEMENT name="GET_CODREGIONE"
	query="select de_provincia.codregione 
					from de_provincia
					inner join ts_generale on (ts_generale.CODPROVINCIASIL = de_provincia.CODPROVINCIA) where ts_generale.prggenerale = 1" />

<STATEMENT name="GET_OPERATORE"
	query="select spi.STRCOGNOME,spi.STRNOME, spi.stremail, spi.strteloperatore, 
				ut.strcognome strcognomeutente, ut.strnome strnomeutente
					from ts_utente ut
					left join an_spi spi on (spi.prgspi= ut.prgspi )
					where ut.cdnut = ? " />

<STATEMENT name="GET_RPTDID"
	query="select strvalore as rptdid
                from ts_config_loc
                where codtipoconfig = 'RPT_DID' and strcodrif = (select codprovinciasil from ts_generale)" />



<STATEMENT name="ST_CONF_STAMPA_PATTO"
	query="select nvl(to_char(ts_config_loc.num),0) num
        from ts_config_loc, de_tipo_config, ts_generale
        where ts_generale.codprovinciasil = ts_config_loc.strcodrif
        and de_tipo_config.codtipoconfig = ts_config_loc.codtipoconfig
        and ts_config_loc.codtipoconfig = 'STP_PAT'" />

<STATEMENT name="GET_AN_LAV_CITTADINANZA"
	query="select codcittadinanza, codcittadinanza2 from an_lavoratore where cdnlavoratore = ?" />

<STATEMENT name="GET_NUM_CONFIG_LOC_PARAM"
	query="select nvl( (select to_char(ts_config_loc.num) num from ts_config_loc
             where strcodrif=(select ts_generale.codprovinciasil from ts_generale where prggenerale=1) and codtipoconfig=?) , 0) as num,
         (select ts_generale.codprovinciasil from ts_generale where prggenerale=1) as codprovinciasil
       from dual" />

<STATEMENT name="GET_NUM_CONFIG_LOC"
	query="select nvl( (select to_char(ts_config_loc.num) num from ts_config_loc
             where strcodrif=(select ts_generale.codprovinciasil from ts_generale) and codtipoconfig='PI3PROT') , 0) as num,
         (select ts_generale.codprovinciasil from ts_generale) as codprovinciasil
       from dual" />

<STATEMENT name="GET_DATA_ISCRIZIONE_LISTA_PATTO"
	query="SELECT CASE
          WHEN prgdichdisponibilita IS NULL THEN TO_CHAR (max_iniz_iscr_mob, 'dd/mm/yyyy') 
          ELSE  TO_CHAR (datdichiarazione, 'dd/mm/yyyy')
       END
          AS data_iscrizione_lista
  FROM (SELECT plav.prgdichdisponibilita,
               dichdisp.datdichiarazione,
               (SELECT MAX (iscr.datinizio)
                  FROM am_mobilita_iscr iscr
                 WHERE iscr.cdnlavoratore = lav.cdnlavoratore
                       AND plav.datstipula &gt;= iscr.datinizio)
                  max_iniz_iscr_mob
          FROM am_patto_lavoratore plav
               INNER JOIN an_lavoratore lav
                  ON plav.cdnlavoratore = lav.cdnlavoratore
               LEFT OUTER JOIN am_dich_disponibilita dichdisp
                  ON dichdisp.prgdichdisponibilita =
                        plav.prgdichdisponibilita
         WHERE plav.prgpattolavoratore = ? AND lav.cdnlavoratore = ?)" />

<STATEMENT name="GET_DOCUMENTO_IDENTITA_DA_PORTALE"
	query="
	SELECT doc.prgdocumento, to_char(doc.datInizio,'dd/mm/yyyy') datInizio, to_char(doc.datfine,'dd/mm/yyyy') datfine
	FROM am_documento doc
	WHERE doc.cdnlavoratore = ?
		AND doc.CODTIPODOCUMENTO = 'VP'
		AND doc.CODSTATOATTO = 'PR'
		AND trunc(nvl(doc.datfine, sysdate))&gt;=trunc(sysdate)
		
" />

<STATEMENT name="SELECT_COLL_IDENTITA_DA_PORTALE"
	query="SELECT col.prgdocumentocoll
               FROM am_documento doc, de_doc_tipo det, am_documento_coll col
               WHERE doc.cdnlavoratore = ?
                  	 AND DOC.PRGDOCUMENTO = COL.PRGDOCUMENTO(+)
                     AND NVL(COL.CDNCOMPONENTE,25) = 25
                     AND doc.CODTIPODOCUMENTO = det.CODTIPODOCUMENTO	
                     AND det.CODAMBITODOC = 'ID'
                     AND doc.flgdocidentifp = 'N'
                     AND doc.CODTIPODOCUMENTO = 'VP'
                     AND doc.CODSTATOATTO = 'PR'
                     AND nvl(doc.datfine, sysdate)&gt;=sysdate" />

<STATEMENT name="UPDATE_COLL_IDENTITA_DA_PORTALE"
	query="UPDATE AM_DOCUMENTO_COLL
                  SET STRCHIAVETABELLA=?
                  WHERE PRGDOCUMENTOCOLL=?
" />

<STATEMENT name="INSERT_COLL_IDENTITA_DA_CONFERIMENTO"
	query="INSERT INTO AM_DOCUMENTO_COLL (PRGDOCUMENTOCOLL, PRGDOCUMENTO, STRCHIAVETABELLA, CDNCOMPONENTE)
			VALUES (?, ?, ?, (SELECT CDNCOMPONENTE FROM TS_COMPONENTE WHERE UPPER(STRPAGE) = 'DISPODETTAGLIOPAGE'))
" />

<STATEMENT name="GET_CPI_AN_LAVORATORE_COMPETENTE_DATA"
	query=" SELECT TAB.cpicomp, TAB.codmonotipocpi
        		FROM (
        		SELECT ai.codcpitit AS cpicomp, ai.codmonotipocpi
			    FROM an_lav_storia_inf ai
			    inner join de_cpi on (ai.codcpitit = de_cpi.codcpi)
			    left join de_comune on (de_cpi.codcom = de_comune.codcom)
				left join de_provincia prov on (de_comune.codProvincia = prov.codProvincia)
				left join ts_generale on (prov.codProvincia = ts_generale.codprovinciasil)
   				WHERE ai.cdnlavoratore = ? 
   				and trunc(ai.datinizio) &lt;= to_date(?, 'dd/mm/yyyy') 
   				and trunc(nvl(ai.datfine, sysdate)) &gt;= to_date(?, 'dd/mm/yyyy')
   				order by ai.dtmins desc
   				) TAB
   				WHERE ROWNUM = 1
" />

<STATEMENT name="GET_DID_APERTA_DA_PORTALE"
	query="select did.PRGDICHDISPONIBILITA
					from AM_DICH_DISPONIBILITA did
					where did.prgelencoanagrafico = ?
					and did.codStatoAtto in ('PA', 'PR')
					and did.datFine is null
" />






<!-- lista di Programmi -->
<STATEMENT name="DE_Programmi"
	query="
		select orp.prgprogrammaq as codice,
       orp.strtitolo as descrizione  from 
 or_programma_q orp where orp.codstatoprogramma = 'ATT'
" />


<STATEMENT name="DE_corsi_iscritti"
	query="
select orc.strtitolocorso, 
       to_char(orc.datiniziocorso, 'dd/mm/yyyy') as datiniziocorso ,       
       to_char(orc.datfinecorso, 'dd/mm/yyyy') as datfinecorso,       
       orc.stredizionecorso,       
       orc.strsedeformazione,
       orc.numore
from
or_corso  orc
inner join or_iscr_corso oic on oic.prgcorso = orc.prgcorso
inner join or_percorso_concordato opc on (opc.prgcolloquio= oic.prgcolloquio and opc.prgpercorso = oic.prgpercorso)
inner join or_programma_q orpq on (orpq.prgprogrammaq = opc.prgprogrammaq and orpq.prgprogrammaq = orc.prgprogrammaq)
where opc.prgcolloquio = ? and opc.prgpercorso =  ? " />



<STATEMENT name="GET_INFO_ISCR_CORSO"
	query="
select count(*) as numcorso
from  or_iscr_corso oic 
inner join or_corso  orc on orc.prgcorso = oic.prgcorso
inner join or_percorso_concordato opc on (opc.prgcolloquio= oic.prgcolloquio and opc.prgpercorso = oic.prgpercorso)
where opc.prgpercorso = ? " />


<STATEMENT name="INS_APP_DA_DID_ONLINE"
	query="{ call ? := PG_AGENDA.pdAppuntamentoDidOnline(
?,?,?,?,?,
?,?,?,?,?,
?,?,?,?,?,
?,?,?,?) }" />

<STATEMENT name="INSERT_EVIDENZA_DID_ONLINE"
	query="

	insert into AN_EVIDENZA (
      prgevidenza,
      cdnlavoratore,
      datdatascad,
      strevidenza,
      cdnutins,
      dtmins,
      cdnutmod,
      dtmmod,
      prgtipoevidenza
    ) values (
      S_AN_EVIDENZA.nextval,
      ?,
      trunc(sysdate) + 30,
      ?,
      150,
      sysdate,
      150,
      sysdate,
      (select prgtipoevidenza from de_tipo_evidenza where codtipoevidenza = 'ON')
    )
	
" />

<STATEMENT name="SELECT_EMAIL_SPECS_DID_ONLINE"
	query="
	
	select * from ts_email where codtipoemail = 'DIDONL'
	
" />

<STATEMENT name="SELECT_PRGSPI_DID_ONLINE"
	query="
	
	select prgspi from ts_utente where cdnut = 150
	
" />

<STATEMENT name="SELECT_FLG_APP_DID_ONLINE"
	query="
	
	select strvalore
	from ts_config_loc 
	where codtipoconfig = 'APP_AUTO'
	and strcodrif = (select ts_generale.codprovinciasil from ts_generale)
	
" />

<STATEMENT name="GET_PATTO_DOCUMENTO_IDENTITA"
	query="
	
	select 
		tipo.strdescrizione, 
		doc.strnumdoc, 
		TO_CHAR(doc.datinizio, 'DD/MM/YYYY') datinizio, 
		TO_CHAR(doc.datfine, 'DD/MM/YYYY') datfine, 
		doc.strenterilascio
	from am_documento doc
	inner join de_doc_tipo tipo on tipo.codtipodocumento = doc.codtipodocumento
	where doc.cdnlavoratore = ?
	and tipo.codambitodoc = 'ID'
	and doc.codstatoatto  = 'PR'
	and trunc(doc.datinizio) &lt;= trunc(SYSDATE)
	and trunc(nvl(doc.datfine, SYSDATE)) &gt;= trunc(SYSDATE)
	order by doc.datinizio desc
	
" />

<STATEMENT name="GET_CPI_AN_LAVORATORE_COMPETENTE_VA18"
	query=" SELECT TAB.cpicomp, TAB.codmonotipocpi
        		FROM (
        		SELECT ai.codcpitit AS cpicomp, ai.codmonotipocpi
			    FROM an_lav_storia_inf ai
			    inner join de_cpi on (ai.codcpitit = de_cpi.codcpi)
			    left join de_comune on (de_cpi.codcom = de_comune.codcom)
				left join de_provincia prov on (de_comune.codProvincia = prov.codProvincia)
				left join ts_generale on (prov.codProvincia = ts_generale.codprovinciasil)
   				WHERE ai.cdnlavoratore = ? 
   				and trunc(nvl(ai.datfine, sysdate)) &gt;= trunc(sysdate)
   				order by ai.dtmins desc
   				) TAB
   				WHERE ROWNUM = 1
" />

<STATEMENT name="INSERT_DISPO_VA18"
	query="INSERT INTO AM_DICH_DISPONIBILITA
                      ( prgDichDisponibilita,
                        datDichiarazione,
                        prgElencoAnagrafico,
                        prgStatoOccupaz,
                        codTipoDichDisp,
                        CodUltimoContratto,
                        datScadConferma,
                        datScadErogazServizi,
                        datFine,
                        codStatoAtto,
                        codMotivoFineAtto,
                        strNote,
                        cdnUtIns, dtmIns,
                        cdnUtmod, dtmmod,
                        CODMONOCAT181ETA,
                        NUMDELIBERA, PRGDIDCOLL)
                VALUES( ?,
                        TO_DATE(?,'DD/MM/YYYY'),                    
                        ?, ?, ?, ?,                 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        TO_DATE(?,'DD/MM/YYYY'), 
                        ?, ?, ?, 
                        ?,SYSDATE, 
                        ?,SYSDATE,
                        ?,
                        ?, ?           
                       )
" />

<STATEMENT name="GET_PROFILING_PATTO"
	query="
select pt.numindicesvantaggio, pt.numindicesvantaggio2, pt.strindicesvantaggioold, TO_CHAR (pt.datriferimento, 'dd/mm/yyyy') AS datriferimento
from  am_patto_lavoratore  pt
where (pt.cdnlavoratore = ?) and (pt.numindicesvantaggio is not null or pt.numindicesvantaggio2 is not null or pt.datriferimento is not null)
order by pt.datriferimento desc, pt.dtmmod desc
" />

<STATEMENT name="GET_MN_YG_TIPOLOGIA_DURATA"
	query="

	SELECT codtipologiadurata as codice, 
		strDescrizione || 
    DECODE(SYSDATE,
      GREATEST(SYSDATE, DATINIZIO, DATFINE), '(scaduto)',
        LEAST(SYSDATE, DATINIZIO, DATFINE),'(scaduto)', 
        '') as descrizione 
    FROM mn_yg_tipologia_durata
    order by strDescrizione

" />

<STATEMENT name="CHECK_MN_YG_TIPOLOGIA_DURATA"
    query="

    SELECT codtipologiadurata as codice, 
        strDescrizione || 
    DECODE(SYSDATE,
      GREATEST(SYSDATE, DATINIZIO, DATFINE), '(scaduto)',
        LEAST(SYSDATE, DATINIZIO, DATFINE),'(scaduto)', 
        '') as descrizione 
    FROM mn_yg_tipologia_durata
    WHERE codtipologiadurata = ?
    order by strDescrizione

" />

<STATEMENT name="GET_DE_AZIONE_RAGG_BY_PRG"
	query="
	select *
	from DE_AZIONE_RAGG
	where prgAzioniRagg = ?
" />

<STATEMENT name="RIASSOCIA_APRI_PATTO_VA18"
	query="update am_patto_lavoratore  
					set prgdichdisponibilita = ?,
					datfine = null, codmotivofineatto = null,
					numklopattolavoratore = ?,
					dtmmod = sysdate, 
					cdnutmod = ?
					where prgpattolavoratore = ?" />

<STATEMENT name="GET_UltimoPattoLav_No_Accordo"
	query="
		SELECT DISTINCT pt.prgpattolavoratore, pt.cdnlavoratore,
                pt.prgdichdisponibilita, nvl(pt.codcodificapatto, 'PT297') as codcodificapatto,
                TO_CHAR (pt.datstipula, 'dd/mm/yyyy') AS datstipula, TO_CHAR (pt.datstipulaorig, 'dd/mm/yyyy') AS datstipulaorig,
                pt.codstatoatto, pt.prgstatooccupaz, pt.flgcomunicazesiti,
                pt.codmotivofineatto,
                TO_CHAR (pt.datscadconferma,
                         'dd/mm/yyyy') AS datscadconferma,
                TO_CHAR (pt.datfine, 'dd/mm/yyyy') AS datfine, pt.strnote,
                pt.cdnutins,
                TO_CHAR (pt.dtmins, 'dd/mm/yyyy hh24:mi') AS dtmins,
                TO_CHAR (pt.dtmins, 'dd/mm/yyyy hh24:mi') AS dtminsora,
                pt.cdnutmod,
                TO_CHAR (pt.dtmmod, 'dd/mm/yyyy hh24:mi') AS dtmmod,
                TO_CHAR (pt.dtmmod, 'dd/mm/yyyy hh24:mi') AS dtmmodora,
                pt.numklopattolavoratore, 
                nvl(pt.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) as flgpatto297,
                de_codifica_patto.strdescrizione strdescrizionepatto,
                case   	   
       			    when nvl(pt.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'S'
       			         	then 'PT297'	     
       			    else 'ACLA'
       			end as tipoDocPatto,
                TO_CHAR (pt.datultimoprotocollo,
                         'dd/mm/yyyy'
                        ) datultimoprotocollo,
                (cpi_.strdescrizione || ' - ' || cpi_.codcpi) AS desccpi,
                ts_.strcognome AS cognins, ts_.strnome nomins,
                ts_utentemod.strcognome cognmod, ts_utentemod.strnome nommod,
                an.strcognome, an.strnome, an.strcodicefiscale,
                TO_CHAR (dispo.datdichiarazione,
                         'dd/mm/yyyy'
                        ) AS datdichiarazione,
                dispo.codstatoatto AS codstatoattodid,
                TO_CHAR (ea.datinizio, 'dd/mm/yyyy') AS datinizio,
                dso_.strdescrizione AS descrizionestato,
                pt.codtipopatto, pt.codservizio, pt.strnoteformprof, pt.numindicesvantaggio, pt.numindicesvantaggio2, 
                pt.strindicesvantaggioold, TO_CHAR (pt.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                pt.codVCHProfiling, pt.decDoteProcessoAssegnato, pt.decDoteProcessoResidua, pt.decDoteRisultatoAssegnato, pt.decDoteRisultatoResidua,
                pt.prglavoratoreprofilo, pt.importoar, TO_CHAR (pt.DATANASPI, 'dd/mm/yyyy') AS datNaspi, pt.strnoteattivazione,
                pt.NUMINDICESVANTAGGIO150, TO_CHAR (pt.DATRIFERIMENTO150, 'dd/mm/yyyy') AS DATRIFERIMENTO150,
                pt.CODSEDE as codSedeEnte, pt.STRENTECODICEFISCALE as cfEnte, ente.STRDENOMINAZIONE as ragSocEnte,
                ente.STRINDIRIZZO as indirizzoEnte, ente.strTel as strTelEnte, de_comune.strdenominazione as comuneEnte, pt.Strnotaente,De_Provincia.Strtarga,
                TO_CHAR(pt.NUMPROFILING)  AS NUMPROFILING, 
				(case when to_number(nvl(
			           (select num from ts_config_loc where codtipoconfig = 'PROF_150' 
			           and strcodrif = (select codprovinciasil from ts_generale where prggenerale=1)), 0)) > 0 then 
			             de_profiling_150.strprofiling
			       else ''
			    end) as strprofiling,
			     pt.STRCODABIPORTALE,  TO_CHAR (pt.DTMINVIOPORTALE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMINVIOPORTALE,
                 TO_CHAR (pt.DTMACCETTAZIONE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMACCETTAZIONE,
                 pt.STRTIPOACCETTAZIONE, pt.CODMONOACCETTAZIONE, pt.FLGPATTOONLINE,
                 TO_CHAR (pt.DTMULTIMASTAMPA, 'dd/mm/yyyy  hh24:mi:ss') AS DTMULTIMASTAMPA ,pt.FLGREINVIOPTONLINE
               FROM am_patto_lavoratore pt,
                an_lavoratore an,
                am_elenco_anagrafico ea,
                am_dich_disponibilita dispo,
                /* an_lav_storia_inf_coll sc_, */
                /*  an_lav_storia_inf st_, */
                de_cpi cpi_,
                ts_utente ts_,
                ts_utente ts_utentemod,
                am_stato_occupaz so_,
                de_stato_occupaz dso_,
                de_stato_occupaz_ragg dsor_,
                de_codifica_patto,
                an_vch_ente ente,
                de_comune,
                De_Provincia,
                de_profiling_150
          WHERE pt.datfine IS NULL AND pt.flgpatto297 = 'S'
                 AND an.cdnlavoratore = pt.cdnlavoratore 
                 /* AND (ea.prgelencoanagrafico = sc_.strchiavetabella(+)) */
                 /* AND (sc_.codlsttab IS NULL OR sc_.codlsttab = 'EA') */
                 /* AND (sc_.prglavstoriainf = st_.prglavstoriainf(+)) */
                 /*	and st_.cdnlavoratore = ea.cdnlavoratore*/
				 AND ea.prgelencoanagrafico(+) = dispo.prgelencoanagrafico
                 /* and ea.cdnlavoratore = pt.cdnlavoratore /*
                 /* and st_.DATFINE is null */
                 AND cpi_.codcpi = pt.codcpi
                 AND pt.cdnutins = ts_.cdnut
                 AND pt.cdnutmod = ts_utentemod.cdnut
                 AND dispo.prgdichdisponibilita(+) = pt.prgdichdisponibilita
                 AND pt.prgstatooccupaz = so_.prgstatooccupaz(+)
                 AND so_.codstatooccupaz = dso_.codstatooccupaz(+)
                 AND dso_.codstatooccupazragg = dsor_.codstatooccupazragg(+)
                 AND pt.codcodificapatto = de_codifica_patto.codcodificapatto(+)
                 AND pt.CODSEDE = ente.CODSEDE(+) 
                 AND pt.STRENTECODICEFISCALE = ente.STRCODICEFISCALE(+)
                 AND ente.codcom = de_comune.codcom(+)
                 AND de_comune.Codprovincia = de_provincia.Codprovincia(+)
                 AND pt.numProfiling = de_profiling_150.numProfiling(+)
                 AND an.cdnlavoratore = ?
                " />


<STATEMENT name="GET_PattoLav_No_Accordo"
	query="SELECT DISTINCT  am_.prgpattolavoratore,
                                    am_.cdnlavoratore,
                                    am_.prgdichdisponibilita,
                                    to_char(am_.datstipula , 'dd/mm/yyyy') as datstipula, TO_CHAR (am_.datstipulaorig, 'dd/mm/yyyy') AS datstipulaorig,
                                    am_.codstatoatto,
                                    am_.prgstatooccupaz,
                                    am_.flgcomunicazesiti,
                                    am_.codmotivofineatto,
                                    to_char(am_.datscadconferma , 'dd/mm/yyyy') as datscadconferma,
                                    to_char(am_.datfine , 'dd/mm/yyyy') as datfine,
                                    am_.strnote,
                                    am_.cdnutins,
                                    to_char(am_.dtmins , 'dd/mm/yyyy') as dtmins,
                                    am_.cdnutmod,
                                    to_char(am_.dtmmod , 'dd/mm/yyyy') as dtmmod,
                                    to_char(am_.dtmmod,  'dd/mm/yyyy hh24:mi') as dtmmodora, 
                                    to_char(am_.dtmins,  'dd/mm/yyyy hh24:mi') as dtminsora,
                                    am_.numklopattolavoratore,
                                    nvl(am_.codcodificapatto, 'PT297') as codcodificapatto,
                                    nvl(am_.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) as flgpatto297,
                                    de_codifica_patto.strdescrizione strdescrizionepatto,
                                    case   	   
					       			    when nvl(am_.flgpatto297, nvl(de_codifica_patto.flgpatto297, 'S')) = 'S'
					       			         	then 'PT297'	     
					       			    else 'ACLA'
					       			end as tipoDocPatto,
                                    to_char(am_.DATULTIMOPROTOCOLLO,'dd/mm/yyyy') DATULTIMOPROTOCOLLO,
                                    cpi_.strdescrizione,
                                    (cpi_.strdescrizione || ' - ' || cpi_.codcpi) as descCPI,
                                    ts_.strcognome as CognIns,
                                    ts_.strnome NomIns,
                                    ts_utentemod.strcognome CognMod,
                                    ts_utentemod.strnome NomMod,
                                    an.strcognome,
                                    an.strnome,
                                    an.strcodicefiscale,
                                    to_char(dispo.datDichiarazione , 'dd/mm/yyyy') as datDichiarazione,
                                    dispo.codStatoAtto as codStatoAttoDid,
                                    to_char(am.datInizio , 'dd/mm/yyyy') as DATINIZIO,
                                    dso_.strdescrizione as DESCRIZIONESTATO,
                  					am_.codTipoPatto, am_.codServizio, am_.strnoteformprof,
                  					am_.numindicesvantaggio, am_.numindicesvantaggio2,
                  					am_.strindicesvantaggioold, TO_CHAR (am_.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                  					am_.codVCHProfiling, am_.decDoteProcessoAssegnato, am_.decDoteProcessoResidua, am_.decDoteRisultatoAssegnato, am_.decDoteRisultatoResidua,
                  					am_.prglavoratoreprofilo, am_.importoar, TO_CHAR (am_.DATANASPI, 'dd/mm/yyyy') AS datNaspi, am_.strnoteattivazione,
                  					am_.NUMINDICESVANTAGGIO150, TO_CHAR (am_.DATRIFERIMENTO150, 'dd/mm/yyyy') AS DATRIFERIMENTO150,
                  					am_.CODSEDE as codSedeEnte, am_.STRENTECODICEFISCALE as cfEnte, ente.STRDENOMINAZIONE as ragSocEnte,
                					ente.STRINDIRIZZO as indirizzoEnte, ente.strTel as strTelEnte, de_comune.strdenominazione as comuneEnte, am_.Strnotaente,De_Provincia.Strtarga,
                					TO_CHAR(am_.NUMPROFILING)  AS NUMPROFILING, 
                					(case when to_number(nvl(
								           (select num from ts_config_loc where codtipoconfig = 'PROF_150' 
								           and strcodrif = (select codprovinciasil from ts_generale where prggenerale=1)), 0)) > 0 then 
								             de_profiling_150.strprofiling
								       else ''
								    end) as strprofiling,
								     am_.STRCODABIPORTALE,  TO_CHAR (am_.DTMINVIOPORTALE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMINVIOPORTALE,
                 					TO_CHAR (am_.DTMACCETTAZIONE, 'dd/mm/yyyy  hh24:mi:ss') AS DTMACCETTAZIONE,
                 					am_.STRTIPOACCETTAZIONE, am_.CODMONOACCETTAZIONE, am_.FLGPATTOONLINE,
                 					TO_CHAR (am_.DTMULTIMASTAMPA, 'dd/mm/yyyy  hh24:mi:ss') AS DTMULTIMASTAMPA, am_.FLGREINVIOPTONLINE
                               FROM am_patto_lavoratore am_,
                                    an_lavoratore AN,
                                    am_elenco_anagrafico AM,
                                    AM_dich_disponibilita dispo,
                                    an_lav_storia_inf_coll sc_,
                                    an_lav_storia_inf st_,
                                    de_cpi CPI_,
                                    ts_utente ts_,
                                    ts_utente ts_utentemod,
                                    am_stato_occupaz so_,
                                    de_stato_occupaz dso_,
                                    de_stato_occupaz_ragg dsor_,
                                    de_codifica_patto,
                                    an_vch_ente ente,
               						de_comune,
               						De_Provincia,
               						de_profiling_150
                            WHERE ((am_.datFine is null) AND (am_.flgpatto297 = 'S') AND
                                   (an.cdnlavoratore = am_.cdnlavoratore) AND
                                   (AM.prgelencoanagrafico(+) = dispo.prgelencoanagrafico) AND
                                   (am.prgElencoAnagrafico = sc_.strChiaveTabella(+)) AND
                                   (sc_.codLstTab is null or sc_.codLstTab = 'EA') AND
                                   (sc_.prgLavStoriaInf = st_.prgLavStoriaInf(+)) AND
                                   (CPI_.codCPI = am_.codCPI) AND
                                   (am_.cdnUtIns = ts_.cdnut) AND
                                   (am_.cdnUtMod = ts_utentemod.cdnut) AND
                                   (dispo.prgdichdisponibilita(+) = am_.prgdichdisponibilita) AND
                                   (am_.prgStatoOccupaz = so_.prgstatooccupaz(+)) AND
                                   (so_.codstatooccupaz = dso_.codstatooccupaz(+)) AND
                                   (dso_.codstatooccupazragg = dsor_.codstatooccupazragg(+)) AND
                                   (am_.codcodificapatto = de_codifica_patto.codcodificapatto(+)) AND
								   (am_.CODSEDE = ente.CODSEDE(+)) AND 
								   (am_.STRENTECODICEFISCALE = ente.STRCODICEFISCALE(+)) AND 
								   (ente.codcom = de_comune.codcom(+)) AND
								   (de_comune.Codprovincia = de_provincia.Codprovincia(+)) AND
								   (am_.numProfiling = de_profiling_150.numProfiling(+)) AND 
								   (am_.prgPattoLavoratore = ?)     
                            ) " />
                            
<STATEMENT name="GET_TIPO_ATTIVITA_AZIONE"
	query="SELECT CODTIPOATTIVITA
		FROM MA_AZIONE_TIPOATTIVITA 
		WHERE PRGAZIONI = ? and trunc(sysdate) between trunc(MA_AZIONE_TIPOATTIVITA.datinizioval) and trunc(MA_AZIONE_TIPOATTIVITA.datfineval)" />
		
		<STATEMENT name="GET_Partecipante_GG_CondObb"
    query="SELECT
                    COUNT(pc.prgazioni) AS azioni
           FROM
                    or_percorso_concordato pc
                    JOIN de_azione az ON az.prgazioni = pc.prgazioni
                    JOIN de_azione_ragg ragg ON az.prgazioneragg = ragg.prgazioniragg
                    JOIN or_colloquio co ON pc.prgcolloquio = co.prgcolloquio
           WHERE	co.cdnlavoratore = ?
                    AND az.codazionesifer in ('A02', 'A2R') AND az.flgformazione = 'S'
                    AND pc.codesito = 'FC'
                    AND nvl(ragg.codmonopacchetto, 'ZZ') != 'OR' " />
                    
<STATEMENT name="GET_Partecipante_GG_CondObb_UMBRIA"
    query="SELECT
                    az.codazionesifer
           FROM
                    or_percorso_concordato pc
                    JOIN de_azione az ON az.prgazioni = pc.prgazioni
                    JOIN de_azione_ragg ragg ON az.prgazioneragg = ragg.prgazioniragg
                    JOIN or_colloquio co ON pc.prgcolloquio = co.prgcolloquio
           WHERE	co.cdnlavoratore = ?
                    AND az.codazionesifer in ('A01', 'A02') AND az.flgformazione = 'S'
                    AND pc.codesito = 'FC'
                    AND nvl(ragg.codmonopacchetto, 'ZZ') = 'OR' " /> 
                    
<STATEMENT name="GET_Partecipante_Dote_CondObb"
    query="SELECT
                    COUNT(pc.prgazioni) AS azioni
           FROM
                    or_percorso_concordato pc
                    inner JOIN or_colloquio co ON pc.prgcolloquio = co.prgcolloquio
                    inner JOIN de_azione az ON az.prgazioni = pc.prgazioni
                    inner JOIN de_azione_ragg ragg ON az.prgazioneragg = ragg.prgazioniragg                   
           WHERE    co.cdnlavoratore = ?
                    AND az.codazionesifer is not null
                    AND NVL(AZ.FLGFORMAZIONE, 'N') = 'S'
                    AND pc.codesito &lt;&gt; 'PRO'
                    AND nvl(ragg.flg_misurayei, 'N') = 'N' " />                               
                    
<STATEMENT name="GET_Partecipante_GG_DatiGiovane_anlav"
    query="SELECT
                    an.cdnlavoratore, an.strcodicefiscale,
                    an.strcognome, 
                    an.strnome strnome, 
                    an.strsesso strsesso,
                    to_char(an.datnasc, 'dd/mm/yyyy') AS datnasc,
                    an.codcomnas,
                    an.codcittadinanza,
                    an.codcittadinanza2,
                    an.strcell,
                    an.stremail,
                    an.codcomres,
                    an.strindirizzores,
                    an.strcapres,
                    an.strtelres,
                    an.codcomdom,
                    an.strindirizzodom,
                    an.strcapdom,
                    an.strteldom,
                    (select count(*) 
                    from am_cm_iscr cm
                    inner join de_cm_tipo_iscr tis on (cm.codcmtipoiscr = tis.codcmtipoiscr)
                    where encrypt(an.cdnlavoratore, ?) = cm.cdnlavoratore
                    and cm.codstatoatto = 'PR' and trunc(nvl(cm.datdatafine, sysdate)) &gt;= trunc(sysdate)
                    and tis.codmonotiporagg = 'D') numIscrDisabili
           FROM
                    an_lavoratore an
           WHERE
                    an.cdnlavoratore = ? " />
                    
<STATEMENT name="GET_Partecipante_GG_DatiGiovane_perm_sogg"
    query="SELECT
                    ex.codstatus,
                    ex.strnumdocumento,
                    to_char(ex.datscadenza, 'dd/mm/yyyy') AS datscadenza,
                    ex.codmotivoril
           FROM
                    am_ex_perm_sogg ex
           WHERE
                    nvl(ex.datscadenza, SYSDATE + 1) &gt; SYSDATE
                    AND ex.cdnLavoratore = ? " />
                    
<STATEMENT name="GET_Partecipante_GG_DatiGiovane_codprovincia"
    query="SELECT
                    de_provincia.codmin 
           FROM
                    ts_generale,
                    de_provincia
           WHERE
                    ts_generale.CODProvinciaSil = de_provincia.codprovincia " />
                    
<STATEMENT name="GET_Partecipante_GG_DatiGiovane_titstudio"
    query="SELECT
                    pg_sil_monit.pdMaxTitoloStudio(?) AS codtitolo
            FROM
                    dual " />

<STATEMENT name="GET_Partecipante_GG_DatiProfiling_patto"
    query="SELECT
                    pl.prgpattolavoratore,
                    pl.numindicesvantaggio,
                    pl.numindicesvantaggio2,
                    pl.codtipopatto, to_char(pl.datscadconferma, 'dd/mm/yyyy') AS datscadconferma,
                    (SELECT TO_CHAR(MAX(DID1.DATDICHIARAZIONE), 'DD/MM/YYYY') 
		            FROM AM_DICH_DISPONIBILITA DID1
		            INNER JOIN AM_ELENCO_ANAGRAFICO ELENCO1 ON (DID1.PRGELENCOANAGRAFICO = ELENCO1.PRGELENCOANAGRAFICO)
		            WHERE ELENCO1.CDNLAVORATORE = pl.cdnlavoratore AND TRUNC(DID1.DATDICHIARAZIONE) &lt;=
		            (select max(pt.DATADESIONEPA) from am_patto_lavoratore pt where pt.cdnlavoratore = pl.cdnlavoratore and pt.codstatoatto = 'PR')
		            AND DID1.CODSTATOATTO = 'PR') AS datdichiarazione,
                    to_char(pl.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                    to_char(pl.datstipula, 'dd/mm/yyyy') AS datstipula,
                    pl.codcpi,
                    to_char(pl.datfine, 'dd/mm/yyyy') AS datfine,
                    pl.codmotivofineatto,
                    (case
                      when
                        (select t.numprotocollo numprotocollo
                        from
                        (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                am_doc.numannoprot numannoprot
                        from am_patto_lavoratore patto
                        inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                        inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                        am_doc.cdnlavoratore = patto.cdnlavoratore)
                        where patto.cdnlavoratore = ? and
                        ( (patto.codtipopatto in ('MGG','MGO30','MGO45','MINAT','MGGU')) or
                          (getEsisteProgrammaPatto(patto.prgpattolavoratore, '''MGG'',''MGO30'',''MGO45'',''MINAT'',''MGGU''') &gt; 0)
                        )
                        and patto.codstatoatto = 'PR'
                        and am_doc.codtipodocumento in ('PT297', 'ACLA')
                        and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                        group by patto.prgpattolavoratore, am_doc.numannoprot
                        order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                        where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                      ) is not null then (select t.numprotocollo numprotocollo
                                          from
                                          (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                          		  am_doc.numannoprot numannoprot
                                          from am_patto_lavoratore patto
                                          inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                                          inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                                          am_doc.cdnlavoratore = patto.cdnlavoratore)
                                          where patto.cdnlavoratore = ? and
                                          ( (patto.codtipopatto in ('MGG','MGO30','MGO45','MINAT','MGGU')) or
					                        (getEsisteProgrammaPatto(patto.prgpattolavoratore, '''MGG'',''MGO30'',''MGO45'',''MINAT'',''MGGU''') &gt; 0)
					                      )
                                          and patto.codstatoatto = 'PR'
                                          and am_doc.codtipodocumento in ('PT297', 'ACLA')
                                          and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                                          group by patto.prgpattolavoratore, am_doc.numannoprot
                                          order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                                          where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                                        )
                           else do.numprotocollo
                      end) AS numprotocollo,
                    so.codstatooccupaz
           FROM
                    am_patto_lavoratore pl
                    INNER JOIN am_stato_occupaz so ON so.cdnlavoratore = pl.cdnlavoratore
                    INNER JOIN am_documento_coll dc ON to_number(dc.strchiavetabella) = pl.prgpattolavoratore
                    INNER JOIN am_documento do ON do.prgdocumento = dc.prgdocumento AND do.cdnlavoratore = pl.cdnlavoratore
           WHERE
           			pl.cdnlavoratore = ? AND
                    ( (pl.codtipopatto in ('MGG','MGO30','MGO45','MINAT','MGGU')) or
                      (getEsisteProgrammaPatto(pl.prgpattolavoratore, '''MGG'',''MGO30'',''MGO45'',''MINAT'',''MGGU''') &gt; 0)
                    )
                    AND do.codtipodocumento in ('PT297', 'ACLA')
                    AND pl.codstatoatto = 'PR'
                    AND do.codstatoatto = 'PR'
                    AND so.datinizio &lt;= pl.datstipula
                    AND (so.datfine is null OR so.datfine &gt;= pl.datstipula)" />
                       
<STATEMENT name="GET_Partecipante_GG_DatiProfiling_patto_WS"
    query="SELECT
                    pl.prgpattolavoratore,
                    pl.numindicesvantaggio2,
                    pl.codtipopatto, to_char(pl.datscadconferma, 'dd/mm/yyyy') AS datscadconferma,
                    to_char(pl.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                    to_char(pl.datstipula, 'dd/mm/yyyy') AS datstipula,
                    pl.codcpi,
                    to_char(pl.datfine, 'dd/mm/yyyy') AS datfine,
                    pl.codmotivofineatto,
                    (case
                      when
                        (select t.numprotocollo numprotocollo
                        from
                        (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                am_doc.numannoprot numannoprot
                        from am_patto_lavoratore patto
                        inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                        inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                        am_doc.cdnlavoratore = patto.cdnlavoratore)
                        where patto.cdnlavoratore = ? and 
                        ( ( (patto.codtipopatto = 'MGG') AND (to_date(?,'dd/mm/yyyy') &gt;= trunc(patto.datstipula)) AND 
                            (patto.datfine is null or to_date(?,'dd/mm/yyyy') &lt;= trunc(patto.datfine))
                          ) or
                          ( (patto.codtipopatto = 'ANP' AND getEsisteProgrammaAllaData(patto.prgpattolavoratore, '''MGG''', to_date(?,'dd/mm/yyyy')) &gt; 0)
                          )
                    	)
                       	and patto.codstatoatto = 'PR'
                        and am_doc.codtipodocumento in ('PT297', 'ACLA')
                        and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                        group by patto.prgpattolavoratore, am_doc.numannoprot
                        order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                        where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                      ) is not null then (select t.numprotocollo numprotocollo
                                          from
                                          (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                          		  am_doc.numannoprot numannoprot
                                          from am_patto_lavoratore patto
                                          inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                                          inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                                          am_doc.cdnlavoratore = patto.cdnlavoratore)
                                          where patto.cdnlavoratore = ? and 
                                          ( ( (patto.codtipopatto = 'MGG') AND (to_date(?,'dd/mm/yyyy') &gt;= trunc(patto.datstipula)) AND 
				                              (patto.datfine is null or to_date(?,'dd/mm/yyyy') &lt;= trunc(patto.datfine))
				                          	) or
				                          	( (patto.codtipopatto = 'ANP' AND 
				                          	   getEsisteProgrammaAllaData(patto.prgpattolavoratore, '''MGG''', to_date(?,'dd/mm/yyyy')) &gt; 0)
				                          	)
				                    	  )
                                          and patto.codstatoatto = 'PR'
                                          and am_doc.codtipodocumento in ('PT297', 'ACLA')
                                          and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                                          group by patto.prgpattolavoratore, am_doc.numannoprot
                                          order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                                          where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                                        )
                           else do.numprotocollo
                      end) AS numprotocollo
           FROM
                    am_patto_lavoratore pl
                    INNER JOIN am_documento_coll dc ON (to_number(dc.strchiavetabella) = pl.prgpattolavoratore)
                    INNER JOIN am_documento do ON (do.prgdocumento = dc.prgdocumento AND do.cdnlavoratore = pl.cdnlavoratore)
           WHERE
           			(pl.cdnlavoratore = ?)
                    AND ( ( (pl.codtipopatto = 'MGG') AND (to_date(?,'dd/mm/yyyy') &gt;= trunc(pl.datstipula)) AND 
                            (pl.datfine is null or to_date(?,'dd/mm/yyyy') &lt;= trunc(pl.datfine))
                          ) or
                          ( (pl.codtipopatto = 'ANP' AND getEsisteProgrammaAllaData(pl.prgpattolavoratore, '''MGG''', to_date(?,'dd/mm/yyyy')) &gt; 0)
                          )
                    )
                    AND (do.codtipodocumento in ('PT297', 'ACLA'))
                    AND (pl.codstatoatto = 'PR')
                    AND do.codstatoatto = 'PR'
                    order by pl.datstipula desc, pl.dtmins desc" />
                     
<STATEMENT name="GET_Patti_con_programmi_aperti_WS"
    query="SELECT
                    pl.prgpattolavoratore,
                    pl.numindicesvantaggio2,
                    to_char(pl.datriferimento, 'dd/mm/yyyy') AS datriferimento,                    
                    to_char(pl.datstipula, 'dd/mm/yyyy') AS datstipula,
                    pl.codcpi,
                    to_char(pl.datfine, 'dd/mm/yyyy') AS datfine,
                    pl.codmotivofineatto,                    
                    (case
                      when
                        (select t.numprotocollo numprotocollo
                        from
                        (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                am_doc.numannoprot numannoprot
                        from am_patto_lavoratore patto
                        inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                        inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                        am_doc.cdnlavoratore = patto.cdnlavoratore)
                        where patto.cdnlavoratore = ?
  					  	and checkExProgConAzSiferAllaData(patto.prgpattolavoratore, '''T01a'',''T01b'',''T01c'',''T01d'',''TP01'',''TP02''', to_date(?,'dd/mm/yyyy')) &gt; 0
                       	and patto.codstatoatto = 'PR'
                        and am_doc.codtipodocumento in ('PT297', 'ACLA')
                        and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                        group by patto.prgpattolavoratore, am_doc.numannoprot
                        order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                        where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                      ) is not null then (select t.numprotocollo numprotocollo
                                          from
                                          (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                          		  am_doc.numannoprot numannoprot
                                          from am_patto_lavoratore patto
                                          inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                                          inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                                          am_doc.cdnlavoratore = patto.cdnlavoratore)
                                          where patto.cdnlavoratore = ?
                    					  and checkExProgConAzSiferAllaData(patto.prgpattolavoratore, '''T01a'',''T01b'',''T01c'',''T01d'',''TP01'',''TP02''', to_date(?,'dd/mm/yyyy')) &gt; 0
                                          and patto.codstatoatto = 'PR'
                                          and am_doc.codtipodocumento in ('PT297', 'ACLA')
                                          and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                                          group by patto.prgpattolavoratore, am_doc.numannoprot
                                          order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                                          where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                                        )
                           else do.numprotocollo
                      end) AS numprotocollo
           FROM
                    am_patto_lavoratore pl
                    INNER JOIN am_documento_coll dc ON (to_number(dc.strchiavetabella) = pl.prgpattolavoratore)
                    INNER JOIN am_documento do ON (do.prgdocumento = dc.prgdocumento AND do.cdnlavoratore = pl.cdnlavoratore)
           WHERE
           			pl.cdnlavoratore = ?
                    AND checkExProgConAzSiferAllaData(pl.prgpattolavoratore, '''T01a'',''T01b'',''T01c'',''T01d'',''TP01'',''TP02''', to_date(?,'dd/mm/yyyy')) &gt; 0
                    AND do.codtipodocumento in ('PT297', 'ACLA')
                    AND pl.codstatoatto = 'PR'
                    AND do.codstatoatto = 'PR'
                    order by pl.datstipula desc, pl.dtmins desc" />             
                    
<STATEMENT name="GET_programmi_aperti_tirocinio_WS"
    query="select distinct coll.prgColloquio, to_char(coll.datColloquio, 'dd/mm/yyyy') AS datInizioProgramma, 
        	to_char(coll.datFineProgramma, 'dd/mm/yyyy') AS datFineProgramma, coll.codServizio AS tipoProgramma
			from am_patto_lavoratore 
			inner join or_colloquio coll on (am_patto_lavoratore.cdnlavoratore = coll.cdnlavoratore)
			inner join or_percorso_concordato perc on (coll.prgcolloquio = perc.prgcolloquio)
			inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE
				and to_number(am_lav_patto_scelta.strchiavetabella) = perc.prgpercorso and am_lav_patto_scelta.CODLSTTAB = 'OR_PER')
			inner join de_azione az ON (az.prgazioni = perc.prgazioni)
      		where az.codazionesifer in ('T01a','T01b','T01c','T01d','TP01','TP02')
      		and am_patto_lavoratore.prgPattoLavoratore = ?" />        
      		
      		
<STATEMENT name="GET_politiche_attive_da_programma_aperto_tirocinio_WS"
    query="SELECT pc.prgpercorso, pc.prgcolloquio, az.codazionesifer, az.prgazioneragg,  
      		pc.flggruppo, pc.numpartecipanti, to_char(pc.dateffettiva, 'dd/mm/yyyy') AS dateffettiva, 
			to_char(pc.datstimata, 'dd/mm/yyyy') AS datstimata, pc.codesito, to_char(pc.datavvioazione, 'dd/mm/yyyy') AS datavvioazione 
      		FROM or_percorso_concordato pc 
      		inner join de_azione az ON (az.prgazioni = pc.prgazioni)
      		where pc.prgcolloquio = ? 
      		and az.codazionesifer is not null" />  		               
                    
<STATEMENT name="GET_Partecipante_GG_PoliticheAttiveNonValide"
    query="SELECT
                    az.strdescrizione
           FROM
                    or_percorso_concordato pc
                    JOIN or_colloquio co ON pc.prgcolloquio = co.prgcolloquio
                    JOIN an_lavoratore an ON an.cdnlavoratore = co.cdnlavoratore
                    JOIN de_azione az ON az.prgazioni = pc.prgazioni
                    JOIN ts_utente ut ON ut.cdnut = pc.cdnutmod
                    JOIN de_esito es ON es.codesito = pc.codesito
           WHERE
                    az.flgformazione = 'S'
                    AND (es.flgformazione IS NULL OR es.flgformazione != 'S' or trunc(es.datfineval) &lt; trunc(sysdate))
                    AND an.cdnlavoratore = ? " />
  
<STATEMENT name="GET_Partecipante_GG_Movimentazione"
    query="SELECT
                    vm.strcodicefiscale,
                    vm.strragionesociale,
                    vm.codcomunicazione,
                    vm.strindirizzo,
                    vm.codazateco,
                    vm.azuticf,
                    vm.azutidenom,
                    vm.azutiind,
                    vm.codazutiateco,
                    vm.datiniziomov as dataSort1,
                    to_char(vm.datiniziomov, 'dd/mm/yyyy') AS datiniziomov,
                    to_char(vm.datfinemov, 'dd/mm/yyyy') AS datfinemov,
                    to_char(vm.datfinepf, 'dd/mm/yyyy') AS datfinepf,
                    vm.codmansione_min,
                    vm.mansione_desc,
                    vm.codcontratto, vm.codtipomov,
                    vm.flglavorostagionale,
                    vm.flglavoroagr,
                    vm.codorario,
                    vm.numoresett,
                    vm.azuticom,
                    vm.azcom,
                    vm.ismissione,
                    vm.numconvenzione,
                    vm.codsoggpromotoremin,
                    to_char(vm.datconvenzione, 'yyyy-mm-dd hh24:mi:ss') as datconvenzione,
                    vm.prgmovimento,
                    vm.prgmovimentorett,
                    ma.codcategoriatir,
                    ma.codtipologiatir,
                    ma.strcodicefiscaletutore,
                    ma.strcognometutore,
                    ma.strnometutore,
                    vm.codqualificasrq AS codqualificasrqoriginale, 
                    ma.codqualificasrq, de_tipo_contratto.codmonotipo,
                    to_char(vm.datcomunicaz, 'yyyy-mm-dd hh24:mi:ss') as datcomunicaz,
                    (select to_char(rett.datcomunicaz, 'yyyy-mm-dd hh24:mi:ss') from am_movimento rett where rett.prgmovimento = vm.PRGMOVIMENTORETT) as DATCOMUNICAZORIGINALE
           FROM
                    vw_rpt_schedaapmin_movimenti vm
                    LEFT JOIN am_movimento_apprendist ma ON ma.prgmovimento = vm.prgmovimento
                    LEFT JOIN de_tipo_contratto ON de_tipo_contratto.codtipocontratto = vm.codcontratto
           WHERE	vm.cdnlavoratore = ?
                    AND vm.codcomunicazione IS NOT NULL
                    order by dataSort1 asc" />

<STATEMENT name="GET_Partecipante_GG_PattoAttivazione_Reg"
    query="select or_percorso_concordato.prgpercorso, am_lav_patto_scelta.prgpattolavoratore
			from or_colloquio
			inner join or_percorso_concordato on (or_colloquio.prgcolloquio = or_percorso_concordato.prgcolloquio)
			inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
			left join am_patto_lavoratore on (or_colloquio.cdnlavoratore = am_patto_lavoratore.cdnlavoratore and
			                                  ( (am_patto_lavoratore.codtipopatto in ('MGG', 'MGGU')) or
					                          	(getEsisteProgrammaPatto(am_patto_lavoratore.prgpattolavoratore, '''MGG'',''MGGU''') &gt; 0)
					                          )
			                                  and am_patto_lavoratore.codstatoatto = 'PR')
			left join am_lav_patto_scelta on (am_patto_lavoratore.prgpattolavoratore = am_lav_patto_scelta.prgpattolavoratore and
			                                  to_number(am_lav_patto_scelta.strchiavetabella) = or_percorso_concordato.prgpercorso and
			                                  am_lav_patto_scelta.codlsttab = 'OR_PER')
			where or_colloquio.cdnlavoratore = ? and de_azione.codazionesifer = 'A2R' and or_percorso_concordato.codesito = 'FC'" />
                
<STATEMENT name="GET_Partecipante_Tirocini_Movimentazione"
    query="SELECT
                    vm.strcodicefiscale,
                    vm.strragionesociale,
                    vm.codcomunicazione,
                    movRett.codcomunicazione as codcomunicazioneorig,
                    vm.strindirizzo,
                    vm.codazateco,
                    vm.azuticf,
                    vm.azutidenom,
                    vm.azutiind,
                    vm.codazutiateco,
                    to_char(vm.datiniziomov, 'dd/mm/yyyy') AS datiniziomov,
                    to_char(vm.datfinemov, 'dd/mm/yyyy') AS datfinemov,
                    to_char(vm.datfinepf, 'dd/mm/yyyy') AS datfinepf,
                    to_char(vm.datcomunicaz, 'dd/mm/yyyy') AS datcomunicaz,
                    vm.codmansione_min,
                    vm.mansione_desc,
                    vm.codcontratto,
                    vm.flglavorostagionale,
                    vm.flglavoroagr,
                    vm.codorario,
                    vm.numoresett,
                    vm.azuticom,
                    vm.azcom,
                    vm.ismissione,
                    vm.numconvenzione,
                    vm.codsoggpromotoremin,
                    to_char(vm.datconvenzione, 'dd/mm/yyyy') as datconvenzione,
                    vm.prgmovimento,
                    vm.prgmovimentorett,
                    ma.codcategoriatir,
                    ma.codtipologiatir,
                    ma.strcodicefiscaletutore,
                    ma.strcognometutore,
                    ma.strnometutore,
                    ma.codqualificasrq
           FROM
                    vw_rpt_schedaapmin_mov_batch vm
                    inner join de_comune decom on (vm.azcom = decom.codcom)
                    left join de_comune decomint on (vm.azuticom = decomint.codcom)
                    left join am_movimento_apprendist ma on (ma.prgmovimento = vm.prgmovimento)
                    left join am_movimento movRett on (vm.prgmovimentorett = movRett.prgmovimento)
           WHERE
					(vm.cdnlavoratore = ?) and (vm.codcontratto = 'C.01.00') and (vm.codtipomov = 'AVV') and (vm.codcomunicazione is not null)
                    and (trunc(vm.datiniziomov) &gt;= to_date(?, 'dd/mm/yyyy'))
                    and (nvl(decomint.codprovincia, 'xx') = (select codprovinciasil from ts_generale) or 
                         decom.codprovincia = (select codprovinciasil from ts_generale))" />
                    
<STATEMENT name="GET_Partecipante_GG_CredWS"
    query="SELECT
                    ws.struserid,
                    ws.strpassword
           FROM
                    ts_ws ws
           WHERE
                    ws.codservizio = 'PartecipanteGG' 
                    and ws.codprovincia = 
                    (select codprovinciasil from ts_generale)" />

<STATEMENT name="Get_Lista_Adesioni_GG_Update"
	query="select percorso.prgpercorso || '-' || percorso.prgcolloquio as codice, 
			(case 
		       when percorso.datadesionegg is not null then 
		                    (case 
		                      when de_azione_ragg.codmonopacchetto is not null 
		                        then to_char(percorso.datadesionegg, 'dd/mm/yyyy') || '-' || de_azione_ragg.codmonopacchetto
		                      else to_char(percorso.datadesionegg, 'dd/mm/yyyy')
		                    end)
		       else to_char(percorso.datadesionegg, 'dd/mm/yyyy')
		    end) as descrizione
              from or_percorso_concordato percorso
              inner join or_colloquio on (percorso.prgcolloquio = or_colloquio.prgcolloquio)
              inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
              inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
             where (or_colloquio.cdnlavoratore = ?) and (de_azione.strdescrizione = 'Adesione GG')
             and (percorso.prgpercorso != ? or percorso.prgcolloquio != ?)
             and percorso.datadesionegg is not null
             order by percorso.datadesionegg desc" />
             
<STATEMENT name="Get_Lista_Adesioni_GG_Insert"
	query="select percorso.prgpercorso || '-' || percorso.prgcolloquio as codice, 
				(case 
		       		when percorso.datadesionegg is not null then 
		                    (case 
		                      when de_azione_ragg.codmonopacchetto is not null 
		                        then to_char(percorso.datadesionegg, 'dd/mm/yyyy') || '-' || de_azione_ragg.codmonopacchetto
		                      else to_char(percorso.datadesionegg, 'dd/mm/yyyy')
		                    end)
		       		else to_char(percorso.datadesionegg, 'dd/mm/yyyy')
		    	end) as descrizione
              from or_percorso_concordato percorso
              inner join or_colloquio on (percorso.prgcolloquio = or_colloquio.prgcolloquio)
              inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
              inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
             where or_colloquio.cdnlavoratore = ? and de_azione.strdescrizione = 'Adesione GG'
             and percorso.datadesionegg is not null
             order by percorso.datadesionegg desc" />
                   
<STATEMENT name="GET_Partecipante_Tirocini_CredWS"
    query="SELECT
                    ws.struserid,
                    ws.strpassword
           FROM
                    ts_ws ws
           WHERE
                    ws.codservizio = 'PartecipanteTirocini' 
                    and ws.codprovincia = 
                    (select codprovinciasil from ts_generale)" />              
              
<STATEMENT name="GET_ETA_LAVORATORE_ADESIONE_UPDATE"
	query="SELECT to_char(lav.datnasc, 'dd/mm/yyyy') datnasc,
				 to_char(percorso.datadesionegg, 'dd/mm/yyyy') datadesionegg,
				 trunc(months_between(percorso.datadesionegg, lav.datnasc)/12) eta			  
                 FROM an_lavoratore lav
                 inner join or_colloquio on (lav.cdnlavoratore = or_colloquio.cdnlavoratore)
                 inner join or_percorso_concordato percorso on (or_colloquio.prgcolloquio = percorso.prgcolloquio)
                 inner join de_azione on (de_azione.prgazioni = percorso.prgazioni)
              WHERE lav.cdnLavoratore = ? and de_azione.strdescrizione = 'Adesione GG'
              	and percorso.prgpercorso != ?
              order by percorso.datadesionegg desc" />
             
<STATEMENT name="GET_ESISTE_ADESIONE_PERCORSO"
	query="
        Select or_percorso_concordato.prgPercorso 
        From or_percorso_concordato, or_colloquio
        Where or_percorso_concordato.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO
              and or_colloquio.cdnlavoratore = ?
              and or_percorso_concordato.prgAzioni = ?
              and or_percorso_concordato.datAdesioneGG = to_date(?,'dd/mm/yyyy')" />
              
<STATEMENT name="CONTROLLA_ESISTENZA_ADESIONE"
	query="
        Select or_percorso_concordato.prgPercorso
        From or_percorso_concordato, or_colloquio
        Where (or_percorso_concordato.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
              and (or_colloquio.cdnlavoratore = ?)
              and (or_percorso_concordato.prgAzioni = ?)
              and (or_percorso_concordato.datAdesioneGG = to_date(?,'dd/mm/yyyy'))
              and (or_percorso_concordato.PRGPERCORSO != ?)" />
              
<STATEMENT name="Get_Politiche_Attive_Coll_Adesione_Delete"
	query="select percorso.prgpercorso, percorso.prgcolloquio
              from or_percorso_concordato percorso
              inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
              inner join or_percorso_concordato perAdesione on (percorso.prgpercorso = perAdesione.prgpercorsoadesione and
              													percorso.prgcolloquio = perAdesione.prgcolloquioadesione)
              where percorso.prgpercorso = ? and percorso.prgcolloquio = ? and de_azione.strdescrizione = 'Adesione GG'" />
              
<STATEMENT name="CONTROLLA_ESISTENZA_POLITICA_ATTIVA_COLL_ADESIONE"
	query="
        Select or_percorso_concordato.prgPercorso
        From or_percorso_concordato, or_colloquio
        Where (or_percorso_concordato.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
              and (or_colloquio.cdnlavoratore = ?)
              and (or_percorso_concordato.prgpercorsoadesione = ?)
              and (or_percorso_concordato.prgcolloquioadesione = ?)" />
              
<STATEMENT name="GET_DATA_ULTIMA_ADESIONE_PERCORSO"
	query="
        select to_char(max(percorso.datadesionegg), 'dd/mm/yyyy') as datLastAdesione
        from or_percorso_concordato percorso 
        inner join or_colloquio on (percorso.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
        inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
        where or_colloquio.cdnlavoratore = ? and de_azione.flgAdesioneGG = 'S'" />
        
<STATEMENT name="WS_GET_REGIONE_ADESIONE_GG"
	query="
        select reg.codmin
        from de_provincia prov
        inner join de_regione reg on (prov.codregione = reg.codregione)
        where prov.codprovincia = (select codprovinciasil from ts_generale)" />
        
<STATEMENT name="GET_STATI_ADESIONE_GG_MIN"
	query="SELECT stati.codstatoadesionemin AS CODICE,
                stati.strdescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
                LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', '') AS DESCRIZIONE
               FROM de_stato_adesione_min stati
               WHERE stati.codstatoadesionemin in (SELECT codstatoadesioneminfin FROM de_rel_stato_adesione)
               ORDER BY stati.strdescrizione" />
              
<STATEMENT name="GET_ETA_LAVORATORE_ADESIONE"
	query="SELECT to_char(lav.datnasc, 'dd/mm/yyyy') datnasc,
				 to_char(percorso.datadesionegg, 'dd/mm/yyyy') datadesionegg,
				 trunc(months_between(percorso.datadesionegg, lav.datnasc)/12) eta			  
                 FROM an_lavoratore lav
                 inner join or_colloquio on (lav.cdnlavoratore = or_colloquio.cdnlavoratore)
                 inner join or_percorso_concordato percorso on (or_colloquio.prgcolloquio = percorso.prgcolloquio)
              WHERE lav.cdnLavoratore = ? and percorso.prgpercorso = ? and percorso.prgcolloquio = ?" />
               
 <STATEMENT name="GET_STATI_ADESIONE_NUOVO_GG_MIN"
	query="SELECT relStati.codstatoadesioneminfin AS CODICE,
                stati.strdescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
                LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', '') AS DESCRIZIONE
               FROM de_rel_stato_adesione relStati
               INNER JOIN de_stato_adesione_min stati on (relStati.codstatoadesioneminfin = stati.codstatoadesionemin)
               where relStati.codstatoadesioneminin = ?
               ORDER BY stati.strdescrizione" />
               
<STATEMENT name="EXISTS_ADESIONE_GG_VERIFICA_POL_ATTIVE_CRUSCOTTO"
	query="
        select percorso.prgpercorso, percorso.prgcolloquio
        from or_percorso_concordato percorso 
        inner join or_colloquio on (percorso.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
        inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
        where or_colloquio.cdnlavoratore = ? and de_azione.flgAdesioneGG = 'S' and trunc(percorso.datadesionegg) = to_date(?, 'dd/mm/yyyy')" />
 
<STATEMENT name="EXISTS_POL_ATTIVE_NON_COLLEGATA_ADESIONE_CRUSCOTTO"
	query="
        select percorso.prgpercorso, percorso.prgcolloquio
        from or_percorso_concordato percorso 
        inner join or_colloquio on (percorso.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
        inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
        inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
        inner join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni)
        where (or_colloquio.cdnlavoratore = ?) and (de_azione_ragg.flg_misurayei = 'S' or de_azione_ragg.codmonopacchetto = 'GU') and 
        	  (percorso.prgpercorsoadesione is null or percorso.prgcolloquioadesione is null) and
        	  (trunc(or_colloquio.datcolloquio) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval))
       	" />
        	  
<STATEMENT name="GET_INSIEME_AZIONI_ADESIONE_CRUSCOTTO"
	query="
        select percorso.prgpercorso, percorso.prgcolloquio, de_azione.codazionesifer, percorso.codesito
        from or_percorso_concordato percorso 
        inner join or_colloquio on (percorso.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
        inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
        inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
        inner join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni)
        inner join or_percorso_concordato perAdesione on (percorso.prgpercorsoadesione = perAdesione.prgpercorso and
              											  percorso.prgcolloquioadesione = perAdesione.prgcolloquio)
        where (or_colloquio.cdnlavoratore = ?) and (de_azione_ragg.flg_misurayei = 'S' or de_azione_ragg.codmonopacchetto = 'GU') and 
        	  (trunc(perAdesione.datadesionegg) = to_date(?, 'dd/mm/yyyy')) and
        	  (trunc(or_colloquio.datcolloquio) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval))
        union
        select percorso.prgpercorso, percorso.prgcolloquio, de_azione.codazionesifer, percorso.codesito
        from or_percorso_concordato percorso 
        inner join or_colloquio on (percorso.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
        inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
        inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
        inner join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni)
        where (or_colloquio.cdnlavoratore = ?) and (de_azione_ragg.flg_misurayei = 'S' or de_azione_ragg.codmonopacchetto = 'GU') and 
        	  (percorso.prgpercorsoadesione is null or percorso.prgcolloquioadesione is null) and
        	  (trunc(or_colloquio.datcolloquio) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval))
        " />
        
<STATEMENT name="GET_INSIEME_AZIONI_NON_COLLEGATE_ADESIONE_CRUSCOTTO"
	query="
        select percorso.prgpercorso, percorso.prgcolloquio, de_azione.codazionesifer, percorso.codesito
        from or_percorso_concordato percorso 
        inner join or_colloquio on (percorso.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
        inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
        inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
        inner join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni)
        where (or_colloquio.cdnlavoratore = ?) and (de_azione_ragg.flg_misurayei = 'S' or de_azione_ragg.codmonopacchetto = 'GU') and 
        	  (percorso.prgpercorsoadesione is null or percorso.prgcolloquioadesione is null) and
        	  (trunc(or_colloquio.datcolloquio) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval))
        " />
        
<STATEMENT name="GET_DATA_ULTIMA_INVIO_SAP"
	query="
        select to_char(datinviomin, 'dd/mm/yyyy hh24:mi') as datLastInvioSap, codminsap
        from ts_tracciamento_sap
        where datinviomin = (select max(datinviomin) from ts_tracciamento_sap where cdnlavoratore = ? and codminsap is not null)
        and codminsap is not null order by prgestrazionesap desc" />
        
<STATEMENT name="EXISTS_PROFILING_PATTO_SERVIZIO_ADESIONE_CRUSCOTTO"
	query="
        select patto.prgpattolavoratore, to_char(patto.datstipula, 'dd/mm/yyyy') as datstipula, patto.numindicesvantaggio, patto.numindicesvantaggio2
        from am_patto_lavoratore patto
        where (patto.cdnlavoratore = ?) and
        ( (patto.codtipopatto in ('MGG', 'MGGU')) or
          (getEsisteProgrammaPatto(patto.prgpattolavoratore, '''MGG'',''MGGU''') &gt; 0)
        )
        and (patto.numindicesvantaggio is null or patto.numindicesvantaggio2 is null)" />
        
<STATEMENT name="GET_PROFILING_PATTO_CRUSCOTTO"
	query="
		select pt.numindicesvantaggio, to_char(pt.datriferimento, 'dd/mm/yyyy') datriferimento,
		pt.numindicesvantaggio2, to_char(pt.datstipula, 'dd/mm/yyyy') datstipula
		from am_patto_lavoratore  pt
		where pt.cdnlavoratore = ? and 
		( (pt.codtipopatto in ('MGG', 'MGGU')) or
          (getEsisteProgrammaPatto(pt.prgpattolavoratore, '''MGG'',''MGGU''') &gt; 0)
        )
		order by pt.dtmins desc, pt.prgpattolavoratore" />

<STATEMENT name="GET_DE_AZIONE_POLITICHE_ATTIVE"
	query="
	select de_azione.prgAzioni as codice, de_azione.strDescrizione as descrizione
      from de_azione
      inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
      inner join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni)
      where (de_azione_ragg.flg_misurayei = 'S' or de_azione_ragg.codmonopacchetto = 'GU') and 
      trunc(sysdate) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval)" />
      
<STATEMENT name="GET_DE_AZIONE_POLITICHE_ATTIVE_BYPRG"
	query="
	select de_azione.prgAzioni as codice, de_azione.strDescrizione as descrizione
      from de_azione
      inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
      inner join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni)
      where (de_azione_ragg.flg_misurayei = 'S' or de_azione_ragg.codmonopacchetto = 'GU') and de_azione.prgazioni = ? and
      trunc(sysdate) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval)" />
      
<!-- RECUPERA LE INFO DELL'AZIONE -->
<STATEMENT name="GET_DATI_AZIONE_COLLEGATO_PATTO"
	query="
select to_char(or_percorso_concordato.datstimata,'dd/mm/yyyy') datstimata,
or_percorso_concordato.prgpattodisassociatoformazione, de_azione.strdescrizione descrizioneAz,
de_azione_ragg.strdescrizione descrizioneAzRagg, nvl(de_azione_ragg.flg_misurayei, 'N') flg_misurayei,
nvl(de_azione.flgAdesioneGG, 'N') flgAdesioneGG, de_azione_ragg.CODMONOPACCHETTO, de_azione.flgFormazione, de_azione.codazionesifer
from or_percorso_concordato
inner join or_colloquio on (or_percorso_concordato.prgcolloquio = or_colloquio.prgcolloquio)
inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
left join ma_azione_tipoattivita on (de_azione.prgazioni = ma_azione_tipoattivita.prgazioni and
	trunc(or_colloquio.datcolloquio) between trunc(ma_azione_tipoattivita.datinizioval) and trunc(ma_azione_tipoattivita.datfineval))
where or_percorso_concordato.prgpercorso = ?" />

<STATEMENT name="UPD_PERCORSO_DEASSOCIA_PATTO"
	query="UPDATE OR_PERCORSO_CONCORDATO
			SET PRGPATTODISASSOCIATOFORMAZIONE = ?,
                CDNUTMOD = ?,
                DTMMOD = SYSDATE
           	WHERE PRGPERCORSO=?" />
           	
<STATEMENT name="GET_TUTTI_STATI_ADESIONE_GG_MIN"
	query="SELECT stati.codstatoadesionemin AS CODICE,
                stati.strdescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
                LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', '') AS DESCRIZIONE
               FROM de_stato_adesione_min stati" />

               
<STATEMENT name="UPD_PERCORSO_POLITICA_ATTIVA_SIFER"
	query="UPDATE OR_PERCORSO_CONCORDATO
			SET CDNUTMOD = ?,
                DTMMOD = SYSDATE,
                FLGGRUPPO = ?,
                NUMPARTECIPANTI= ?,
                DATAVVIOATTIVITAFORMATIVA = to_date(?, 'dd/mm/yyyy'),
                datavvioazione = to_date(?, 'dd/mm/yyyy'),   
                DATEFFETTIVA = to_date(?, 'dd/mm/yyyy'),     
                NUMYGDURATAEFF = ?,
       			NUMYGDURATAMAX = ?,
       			NUMYGDURATAMIN = ?,
       			CODTIPOLOGIADURATA = ?,
       			CODESITO = ?,
       			CODESITORENDICONT = (CASE
										WHEN ? IN ('FC', 'INT', 'INF') THEN 'E'
										ELSE CODESITORENDICONT
									 END),
       			FLG_NON_MODIFICARE = ?,
       			strCFDatoreLavoro = ?,
       			FLGPOLITICAFSE = ?
           	WHERE PRGCOLLOQUIO = ?
			AND PRGPERCORSO = ?" />
		
<STATEMENT name="UPD_PERCORSO_POLITICA_ATTIVA_TIROCINIO_SIFER"
	query="UPDATE OR_PERCORSO_CONCORDATO
			SET CDNUTMOD = ?,
                DTMMOD = SYSDATE,
                CODESITO = ?, CODESITORENDICONT = ?, DATEFFETTIVA = TO_DATE(?, 'DD/MM/YYYY'),
                STRNOTE = TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') || ':' || ?
           	WHERE PRGCOLLOQUIO = ?
			AND PRGPERCORSO = ?" />

<STATEMENT name="INS_PERCORSO_POLITICA_ATTIVA_TIROCINIO_SIFER"
	query="INSERT INTO OR_PERCORSO_CONCORDATO 
      (PRGCOLLOQUIO, PRGPERCORSO, DATSTIMATA, PRGAZIONI, CODESITO, STRNOTEPROPOSTAOP, CDNUTINS, DTMINS,
	   CDNUTMOD, DTMMOD, STRNOTE, CODSERVIZICIG, FLGMEDIATORE, FLGABILITA, CODESITORENDICONT, PRGPROGRAMMAQ, 
	   FLGGRUPPO, NUMPARTECIPANTI, FLG_NON_MODIFICARE,
	   DATAVVIOAZIONE, DATADESIONEGG, PRGCOLLOQUIOADESIONE, 
	   PRGPERCORSOADESIONE, FLGPOLITICAFSE)
     		SELECT 
       	PER.PRGCOLLOQUIO, ?, TRUNC(SYSDATE), PER.PRGAZIONI, ?, 
       	PER.STRNOTEPROPOSTAOP, ?, SYSDATE, ?, SYSDATE, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') || ':' || ?,
		PER.CODSERVIZICIG, PER.FLGMEDIATORE, PER.FLGABILITA, ?, PER.PRGPROGRAMMAQ, 
		PER.FLGGRUPPO, PER.NUMPARTECIPANTI, ?,
		TRUNC(SYSDATE), PER.DATADESIONEGG, PER.PRGCOLLOQUIOADESIONE, 
		PER.PRGPERCORSOADESIONE, ?
    		FROM OR_PERCORSO_CONCORDATO PER
    		WHERE PER.PRGCOLLOQUIO = ? AND PER.PRGPERCORSO = ?" />

<STATEMENT name="CHECK_AZIONE_COLLEGATAA_PATTO_SIFER"
	query="SELECT PRGPATTOLAVORATORE
		   		FROM AM_LAV_PATTO_SCELTA 
		   		WHERE TO_NUMBER(STRCHIAVETABELLA) = ? AND CODLSTTAB = 'OR_PER'" />
	   		
<STATEMENT name="INS_LEGAME_PATTO_TIROCINIO_SIFER"
	query="insert into am_lav_patto_scelta (prglavpattoscelta, prgpattolavoratore, codlsttab, strchiavetabella) 
			values (s_am_lav_patto_scelta.nextval, ?, ?, to_char(?))" />
         
<STATEMENT name="UPD_PERCORSO_SEZ_FORMAZIONE_SIFER"
	query="UPDATE OR_PERCORSO_CONCORDATO
			SET CDNUTMOD = ?,
                DTMMOD = SYSDATE,
                CODESITOFORMAZIONE = ?,
                DTMESITOFORMAZIONE = sysdate,
                DATAVVIOATTIVITAFORMATIVA = to_date(?, 'dd/mm/yyyy'),
                DATFINEAZIONEFORMAZIONE = to_date(?, 'dd/mm/yyyy'),
                STRNOTEESITOFORMAZIONE = (CASE
											WHEN ? IS NULL THEN NULL
											ELSE TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') || ':' || ?
										 END)
           	WHERE PRGCOLLOQUIO = ?
			AND PRGPERCORSO = ?" />               
			
<STATEMENT name="GET_USER_PWD_WS"
    query="SELECT
                    ws.struserid,
                    ws.strpassword
           FROM
                    ts_ws ws
           WHERE
                    ws.codservizio = ?
                    and ws.codprovincia = 
                    (select codprovinciasil from ts_generale)" />    
                    
<STATEMENT name="GET_MOVIMENTI_AGRICOLTURA"
    query="select anaz.STRCODICEFISCALE as cfAzienda, 
       				to_char(mov.DATINIZIOMOV , 'dd/mm/yyyy') as datiniziomov, 
       				to_char(PG_ANAGRAFICA_PROFESSIONALE_RP.GetDataFineMovEffForRp(mov.prgmovimento), 'dd/mm/yyyy') as datFineMovEffettiva
			from am_movimento mov 
			inner join an_azienda anaz on mov.PRGAZIENDA = anaz.PRGAZIENDA 
			where mov.CODSTATOATTO = 'PR'
			and (mov.codTipoMov = 'AVV' or mov.prgmovimentoprec is null)
			and mov.cdnlavoratore = ? 
			and nvl(PG_ANAGRAFICA_PROFESSIONALE_RP.GetDataFineMovEffForRp(mov.prgmovimento), trunc(sysdate)) &gt;= trunc(sysdate) - 365 
			order by mov.DATINIZIOMOV asc" />  			                                    			
               
<!-- motivo fine atto della dichiarazione di immediata disponibilità nel batch invio sms-->
<STATEMENT name="DISPO_GET_MOTFINEATTO_SMS"
	query="
  SELECT dmf_.codmotivofineatto as codice, 
       dmf_.strdescrizione as descrizione
  FROM de_motivo_fine_atto dmf_
  inner join de_mot_fine_atto_lst_tab dmft_ on (dmf_.codMotivoFineAtto =  dmft_.codMotivoFineAtto
  	and trunc(sysdate) between trunc(dmft_.DATINIZIOVAL) and trunc(dmft_.DATFINEVAL))
  inner join (
    select tscc.codice
    from ts_config_codifica tscc
    where tscc.codtipoconfig = 'CHDIDSMS' and tscc.nometabella = 'DE_MOTIVO_FINE_ATTO'
    and tscc.configurazione = 
    (
    select 
      NVL(
        (SELECT TL.NUM
         FROM TS_CONFIG_LOC TL
         WHERE TL.STRCODRIF = (SELECT TS_GENERALE.CODPROVINCIASIL FROM TS_GENERALE)
             AND TL.CODTIPOCONFIG = 'CHDIDSMS'),0) num
    from dual)) codice on codice.codice = dmf_.codmotivofineatto
  WHERE dmft_.codLstTab = 'AM_DIC_D'
       order by 2" />

<STATEMENT name="CHECK_ESITO_WS_SIFER"
	query="SELECT codEsito as codice, strDescrizione || DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), '(scaduto)',
		   				 LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'(scaduto)', '') as descrizione 
		   		  FROM DE_ESITO 
		   		  WHERE CODESITO = ? " />
		   		  
<STATEMENT name="CHECK_AZIONI_WS_SIFER"
	query="select percorso.prgazioni, de_azione.strdescrizione, de_azione.codazionesifer
        from or_percorso_concordato percorso 
        inner join or_colloquio on (percorso.PRGCOLLOQUIO = or_colloquio.PRGCOLLOQUIO)
        inner join de_azione on (percorso.prgazioni = de_azione.prgazioni)
        where percorso.prgcolloquio = ?
        and percorso.prgpercorso = ? " />		

<STATEMENT name="CHECK_VALIDITA_ESITO_WS_SIFER"
	query="SELECT codEsito as codice
		   		  FROM DE_ESITO 
		   		  WHERE CODESITO = ? and flgformazione = 'S' 
		   		  and trunc(DATFINEVAL) >= trunc(sysdate)" />        

		   		  
<STATEMENT name="GET_MOVIMENTO_Tirocini_MYSTAGE"
    query="SELECT
                    az.strragionesociale,
           az.strcodicefiscale,
                    vm.codcomunicazione, vm.codtipomov,
                    (case 
            when uaz.STRINDIRIZZO IS NOT NULL THEN
              uaz.STRINDIRIZZO || ' (' || decom.STRDENOMINAZIONE || ', ' || decom.STRCAP || ')' 
            else uaz.STRINDIRIZZO
           end) as strindirizzo,
                    deattaz.codatecodot as codazateco,
                    (case 
            when azut.STRCODICEFISCALE IS NOT NULL THEN
              azut.STRCODICEFISCALE
            else ma.STRCODFISCPROMOTORETIR
           end) as azuticf,
           uazut.strtel as strtelutiliz, uazut.stremail as stremailutiliz,
                    (case 
            when azut.STRRAGIONESOCIALE IS NOT NULL THEN
              azut.STRRAGIONESOCIALE
            else ma.STRDENOMINAZIONETIR
           end) as azutidenom,
                    (case
            when uazut.STRINDIRIZZO IS NOT NULL THEN
              uazut.STRINDIRIZZO || ' (' || decomint.STRDENOMINAZIONE || ', ' || decomint.STRCAP || ')' 
            else uazut.STRINDIRIZZO
           end) as azutiind,
                    de_attivita.codatecodot as codazutiateco,
                    to_char(vm.datiniziomov,  'dd/mm/yyyy') AS datiniziomov,
                     (case        
                     when vm.codtipomov = 'CES'
                        then null 
                   else to_char(vm.DATFINEMOV, 'dd/mm/yyyy')
               end) as datfinemov,
                    to_char(vm.datfinepf, 'dd/mm/yyyy') AS datfinepf,
                    to_char(vm.datcomunicaz, 'yyyy-mm-dd hh24:mi:ss') AS datcomunicaz,
                    de_mansione.codmansionedot as codmansione_min,
                    de_mansione.strdescrizione as mansione_desc,
                    vm.codtipocontratto as codcontratto,
                    vm.flglavorostagionale,
                    vm.flglavoroagr,
                    vm.codorario,
                    vm.numoresett,
                    uazut.codcom as azuticom,
                    uaz.codcom as azcom,
                    decode(az.codtipoazienda,'INT',
            decode(vm.flginterasspropria,'S','0',
                 decode(vm.prgaziendautiliz,null,'0',
                       decode(vm.datinizioraplav,null,'0','1'))),'0') as ismissione,
                    vm.numconvenzione,
                    vm.codsoggpromotoremin,
                    to_char(vm.datconvenzione, 'yyyy-mm-dd hh24:mi:ss') as datconvenzione,
                    vm.prgmovimento,
                    (case        
                     when vm.codstatoatto = 'PR' then vm.prgmovimentoprec 
                   else null
               end) as prgmovimentoprec,
               (case        
                     when vm.codstatoatto = 'PR' then vm.prgmovimentosucc 
                   else null
               end) as prgmovimentosucc,
                    vm.prgmovimentorett,
                    ma.codcategoriatir,
                    ma.codtipologiatir,
                    ma.strcodicefiscaletutore,
                    ma.strcognometutore,
                    ma.strnometutore,
                    ma.codqualificasrq,
                    lav.strcodicefiscale as codfiscaletirocinante, lav.strnome as nometirocinante, lav.strcognome as cognometirocinante,
                    lav.strsesso as sessotirocinante, to_char(lav.datnasc, 'dd/mm/yyyy') as datnasctirocinante,
               vm.CODSTATOATTO, vm.codprovinciaprov, provProv.codmin as provincia_provenienza, 
               provProv.strdenominazione as prov_denominazione_provenienza,
               deq.strdescrizione as codqualificasrq_desc,
               de_tipo_contratto.strdescrizione as tipocontratto_desc,
               prov.codmin as provincia_tirocinante, 
               prov.strdenominazione as provincia_tirocinante_desc,               
               provdom.codmin as provincia_tirocinante_dom, 
               provdom.strdenominazione as provincia_tirocinante_dom_desc,               
               provaz.codmin as provincia_azienda_osp, 
               provaz.strdenominazione as provincia_azienda_osp_desc,               
               provazut.codmin as provincia_azienda_prom, 
               provazut.strdenominazione as provincia_azienda_prom_desc               
           FROM am_movimento vm
            inner join an_azienda az on (vm.prgazienda = az.prgazienda)
            inner join an_unita_azienda uaz on (vm.prgazienda = uaz.prgazienda and vm.prgunita = uaz.prgunita)            
            inner join de_comune decom on (uaz.codcom = decom.codcom)
            inner JOIN de_provincia provaz ON  decom.codprovincia = provaz.codprovincia            
            left join an_azienda azut on (vm.prgaziendautiliz = azut.prgazienda)
            left join an_unita_azienda uazut on (vm.prgaziendautiliz = uazut.prgazienda and vm.prgunitautiliz = uazut.prgunita)            
            left join de_comune decomint on (uazut.codcom = decomint.codcom)
            left JOIN de_provincia provazut on (decomint.codprovincia = provazut.codprovincia)
            left join de_provincia provProv on (vm.codprovinciaprov = provProv.codprovincia)
            inner join an_lavoratore lav on (vm.cdnlavoratore = lav.cdnlavoratore)                                
            inner join de_comune comdom on (lav.codcomdom = comdom.codcom)
            inner JOIN de_provincia provdom ON  comdom.codprovincia = provdom.codprovincia            
            INNER JOIN an_lav_storia_inf ai ON lav.cdnlavoratore=ai.cdnlavoratore AND ai.datfine IS NULL
            left JOIN de_cpi cpi ON ai.codcpitit = cpi.codcpi
            left JOIN de_comune comcpi on (cpi.codcom = comcpi.codcom)
            left JOIN de_provincia prov ON  (comcpi.codprovincia = prov.codprovincia)                                
            left join am_movimento_apprendist ma on (ma.prgmovimento = vm.prgmovimento)
            left join de_mansione on (vm.codmansione = de_mansione.codmansione)
            left join de_attivita deattaz on (uaz.codateco = deattaz.codateco)
            left join de_attivita on (uazut.codateco = de_attivita.codateco)
            left join de_qualifica_srq deq on (deq.codqualificasrq = ma.codqualificasrq)
            left join de_tipo_contratto on (de_tipo_contratto.codtipocontratto = vm.codtipocontratto)                    
           WHERE vm.PRGMOVIMENTO = ?" />

<STATEMENT name="GET_MyStage_Mov_CredWS"
    query="SELECT
                    ws.struserid,
                    ws.strpassword
           FROM
                    ts_ws ws
           WHERE
                    ws.codservizio = 'MyStageMovimenti' " />
                    
<!-- recupera le azioni associati al patto -->
<STATEMENT name="GET_AZIONI_ASSOCIATI_PATTO"
	query="
	select nvl(de_azione_ragg.flg_misurayei, 'N') flg_misurayei
	from am_patto_lavoratore inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE)
  	inner join or_percorso_concordato on (to_number(am_lav_patto_scelta.strchiavetabella) = or_percorso_concordato.prgpercorso)
  	inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
  	inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
	where am_lav_patto_scelta.PRGPATTOLAVORATORE = ? and am_lav_patto_scelta.CODLSTTAB = 'OR_PER'" />

<!-- recupera le azioni associati al patto a partire dal cdnlav -->
<STATEMENT name="GET_AZIONI_ASSOCIATI_PATTO_DACDNLAV"
	query="
	select nvl(de_azione_ragg.flg_misurayei, 'N') flg_misurayei
	from am_patto_lavoratore inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE)
  	inner join or_percorso_concordato on (to_number(am_lav_patto_scelta.strchiavetabella) = or_percorso_concordato.prgpercorso)
  	inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
  	inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
	where am_patto_lavoratore.cdnlavoratore = ? and am_patto_lavoratore.DATFINE is null and am_lav_patto_scelta.CODLSTTAB = 'OR_PER'
" />

<STATEMENT name="WS_GET_RINNOVA_PATTO"
	query="
	select patto.prgpattolavoratore, patto.codcpi, patto.numklopattolavoratore, patto.prgdichdisponibilita,
	patto.codtipopatto, patto.codservizio, patto.codcodificapatto, to_char(patto.datstipula, 'dd/mm/yyyy') datstipula,
	to_char(patto.datScadConferma, 'dd/mm/yyyy') datScadConferma
	from am_patto_lavoratore patto
	where patto.cdnlavoratore = ? and patto.codstatoatto = 'PR'
	and patto.datfine is null and patto.flgpatto297 = 'S'
	( (patto.codtipopatto not in ('MGG','MGO30','MGO45','MINAT','MGGU')) and
      (getEsisteProgrammaPatto(patto.prgpattolavoratore, '''MGG'',''MGO30'',''MGO45'',''MINAT'',''MGGU''') = 0)
    )
	and trunc(patto.datscadconferma) &gt;= 
	trunc(sysdate) - to_number(nvl(
      (select num from ts_config_loc where codtipoconfig = 'WSSCADPT' and strvalore = 'INF_GG'
      and strcodrif = (select codprovinciasil from ts_generale)), 0))
	and trunc(patto.datscadconferma) &lt;= 
	(case 
       when to_number(nvl(
           (select num from ts_config_loc where codtipoconfig = 'WSSCADPT' and strvalore = 'SUP_MM'
           and strcodrif = (select codprovinciasil from ts_generale)), 0)) > 0 then 
             trunc(add_months(sysdate, 
           to_number(nvl(
           (select num from ts_config_loc where codtipoconfig = 'WSSCADPT' and strvalore = 'SUP_MM'
           and strcodrif = (select codprovinciasil from ts_generale)), 0)))) - 1
       else trunc(sysdate)
    end)
" />

<STATEMENT name="WS_GET_APPUNTAMENTI_RINNOVA_PATTO"
	query="
	select count(*) as numAppuntamenti
	from ag_agenda inner join ag_lavoratore on (ag_agenda.prgappuntamento = ag_lavoratore.prgappuntamento)
	where ag_lavoratore.cdnlavoratore = ? and trunc(ag_agenda.dtmdataora) &gt;= trunc(sysdate) and ag_lavoratore.codcpi = ?
	and ag_agenda.codstatoappuntamento = '2'
" />

<STATEMENT name="WS_GET_AZIONI_RINNOVA_PATTO"
	query="
	select per.prgpercorso, per.prgcolloquio, per.codesito, per.prgazioni, to_char(per.datstimata, 'dd/mm/yyyy') datstimata, az.strdescrizione descAzione
	from or_percorso_concordato per
	inner join or_colloquio coll on (per.prgcolloquio = coll.prgcolloquio)
	inner join de_azione az on (per.prgazioni = az.prgazioni)
	where coll.cdnlavoratore = ?
	and nvl(az.flgrinnovopatto, 'N') = 'S' and per.codesito in ('CC','PRO','FC')
	and ( (per.codesito in ('CC','PRO') and trunc(per.datstimata) between to_date(?,'dd/mm/yyyy') and to_date(?,'dd/mm/yyyy')) or
		  (per.codesito = 'FC' and trunc(per.dateffettiva) between to_date(?,'dd/mm/yyyy') and to_date(?,'dd/mm/yyyy'))
		)	
	and not exists (select 1
					from or_percorso_concordato per1
					inner join or_colloquio coll1 on (per1.prgcolloquio = coll1.prgcolloquio)
					inner join de_azione az1 on (per1.prgazioni = az1.prgazioni)
					where coll1.cdnlavoratore = coll.cdnlavoratore
					and nvl(az1.flgrinnovopatto, 'N') = 'N' and per1.codesito in ('CC','PRO')
					and trunc(per1.datstimata) between to_date(?,'dd/mm/yyyy') and to_date(?,'dd/mm/yyyy')
				   )
	order by per.prgpercorso asc, per.prgcolloquio asc
" />

<STATEMENT name="WS_RINNOVO_CHIUSURA_PATTO"
	query="
	update am_patto_lavoratore set datfine =
								(case
									when to_date(?, 'dd/mm/yyyy') &lt; trunc(datstipula) then datstipula
									else to_date(?, 'dd/mm/yyyy')
								end),
	codMotivoFineAtto =	?, cdnutmod = ?, dtmmod = sysdate, strnote = ?,
	numklopattolavoratore = ?
	where prgpattolavoratore = ?
" />

<STATEMENT name="WS_RINNOVO_INSERT_PATTO"
	query="
	insert into am_patto_lavoratore (
		prgPattoLavoratore, datStipula, cdnLavoratore, prgDichDisponibilita,
		codCpi, codStatoAtto, datScadConferma, flgpatto297, codTipoPatto, codServizio,
		codcodificapatto, strNote, cdnutins, cdnutmod, dtmins, dtmmod)
    values (?, to_date(?,'dd/mm/yyyy'), ?, ?,
    		?, ?, to_date(?,'dd/mm/yyyy'), ?, ?, ?, 
    		?, ?, ?, ?, sysdate, sysdate)
" />

<STATEMENT name="WS_RINNOVO_AGGIORNA_ESITO_AZIONE"
	query="
	update or_percorso_concordato set codesito = ?, codesitorendicont = ?,
	datavvioazione = to_date(?,'dd/mm/yyyy'), dateffettiva = to_date(?,'dd/mm/yyyy'),
	cdnutmod = ?, dtmmod = sysdate
	where prgpercorso = ? and prgcolloquio = ?
" />

<STATEMENT name="WS_RINNOVO_INSERISCI_AZIONE"
	query="
	insert into or_percorso_concordato(prgPercorso, prgColloquio, datStimata, prgAzioni, codEsito, codesitorendicont,
					cdnUtIns, dtmIns, cdnUtMod, dtmMod) 
		values(?, ?, to_date(?,'dd/mm/yyyy'), ?, ?, ?, ?, sysdate, ?, sysdate)
"/>

<STATEMENT name="WS_RINNOVO_COLLEGA_AZIONE_PATTO"
	query="
	insert into am_lav_patto_scelta (prglavpattoscelta, prgpattolavoratore, codlsttab, strchiavetabella) 
		values (s_am_lav_patto_scelta.nextval, ?, ?, to_char(?))
"/>

<STATEMENT name="WS_GET_PRG_AZIONE_CONFERMA_PERIODICA"
	query="
	select prgazioni from de_azione
	where upper(strdescrizione) = upper(?)
" />

<STATEMENT name="WS_GET_SERVIZIO_AZIONE_CONFERMA_PERIODICA"
	query="
	select codservizio from de_servizio
	where upper(strdescrizione) = upper(?)
" />

<STATEMENT name="WS_RINNOVO_INSERISCI_COLLOQUIO"
	query="
	insert into or_colloquio(prgcolloquio, cdnlavoratore, datcolloquio, codservizio, prgspi, codcpi, strnote,
					cdnUtIns, dtmIns, cdnUtMod, dtmMod) 
		values(?, ?, to_date(?,'dd/mm/yyyy'), ?, ?, ?, ?, ?, sysdate, ?, sysdate)
"/>

<STATEMENT name="WS_RINNOVO_INSERISCI_SCHEDA_COLLOQUIO"
	query="
	insert into or_scheda_colloquio(prgcolloquio) 
		values(?)
"/>

<STATEMENT
    name="WS_GET_INFO_PROTOCOLLAZIONE_PATTO_RINNOVATO" query="
	SELECT TO_CHAR (doc.datprotocollo, 'dd/mm/yyyy') AS datProtocollo,
		TO_CHAR (doc.datprotocollo, 'dd/mm/yyyy HH24:MI') AS datoraprotocollo,
		TO_CHAR (doc.datprotocollo, 'HH24:MI') AS oraProtocollo,
		to_char(doc.numprotocollo) AS numprotocollo,
		to_char(doc.numannoprot) AS numannoprot
  	FROM        
		am_documento doc,
		am_documento_coll coll,
		am_patto_lavoratore
 	WHERE 
		doc.prgdocumento = coll.prgdocumento
		AND doc.codstatoatto = 'PR'
		AND to_number(coll.strchiavetabella) = am_patto_lavoratore.prgpattolavoratore
		AND am_patto_lavoratore.prgpattolavoratore = ?
		AND doc.codtipodocumento = 'PT297'
"/>

<STATEMENT name="PROROGA_PATTO_ESITO_AZIONE_RINNOVO"
	query="
	update am_patto_lavoratore set numklopattolavoratore = ?, strnote = ?,
	datscadconferma = to_date(?,'dd/mm/yyyy'), cdnutmod = ?, dtmmod = sysdate
	where prgpattolavoratore = ?
" />

<STATEMENT name="GET_AZIONE_CONFERMA_PERIODICA_PROROGA_PATTO"
	query="
	select or_percorso_concordato.prgpercorso, or_percorso_concordato.prgcolloquio
		from or_colloquio
		inner join or_percorso_concordato on (or_colloquio.prgcolloquio = or_percorso_concordato.prgcolloquio)
		inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
		where or_colloquio.cdnlavoratore = ? and trunc(or_percorso_concordato.datstimata) between to_date(?,'dd/mm/yyyy') and to_date(?,'dd/mm/yyyy')
		and de_azione.prgazioni = ? and or_percorso_concordato.codesito in ('CC', 'PRO')
" />

<STATEMENT name="GET_AZIONE_CONFERMA_PERIODICA_CONCLUSA_PROROGA_PATTO"
	query="
	select or_percorso_concordato.prgpercorso, or_percorso_concordato.prgcolloquio
		from or_colloquio
		inner join or_percorso_concordato on (or_colloquio.prgcolloquio = or_percorso_concordato.prgcolloquio)
		inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
		where or_colloquio.cdnlavoratore = ? and trunc(or_percorso_concordato.dateffettiva) between to_date(?,'dd/mm/yyyy') and to_date(?,'dd/mm/yyyy')
		and de_azione.prgazioni = ? and or_percorso_concordato.codesito = 'FC'
" />

<STATEMENT name="UPD_PROROGA_CONFERMA_PERIODICA"
	query="
	update or_percorso_concordato
	set datstimata = to_date(?, 'dd/mm/yyyy'), cdnutmod = ?, dtmmod = sysdate
	where prgpercorso = ? and prgcolloquio = ?
" />

<STATEMENT name="GET_OPERATORE_ADMIN_SPI"
	query="
	select prgspi from an_spi
	where strcognome = 'SYSTEM' and strnome = 'ADMIN'
" />

<!-- STATEMENT UTILIZZATO NEI PERCORSI CONCORDATI DOVE LA DATA DATDECRETO2015 RAPPRESENTA LA DATA A PARTIRE DALLA QUALE EFFETTUARE I CONTROLLI NUOVI -->
<STATEMENT name="GET_INFO_COLLOQUIO"
	query="SELECT TO_CHAR(COLL.DATCOLLOQUIO, 'DD/MM/YYYY') AS DATCOLLOQUIO,
	       '09/12/2015' AS DATDECRETO2015, COLL.CODSERVIZIO, de_cpi.STRDESCRIZIONE || ' - ' || COLL.CODCPI AS descrcpi,
	    COLL.NUMKLOCOLLOQUIO, TO_CHAR(COLL.DATFINEPROGRAMMA, 'DD/MM/YYYY') AS DATAFINEPROGRAMMA, DE_SERVIZIO.CODMONOPROGRAMMA
		FROM OR_COLLOQUIO COLL
		INNER JOIN DE_CPI ON (COLL.CODCPI = DE_CPI.CODCPI)
		INNER JOIN DE_SERVIZIO ON (COLL.CODSERVIZIO = DE_SERVIZIO.CODSERVIZIO)
		WHERE COLL.PRGCOLLOQUIO = ?" />
		
<!-- decodifica profiling voucher -->
<STATEMENT name="GET_Profiling_Voucher"
	query="
           select codvchprofiling codice, strdescrizione || 
           DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), ' (scaduto)',
               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (scaduto)', 
               '') as descrizione
                  from de_vch_profiling 
                  order by decode(codvchprofiling,'B',1,'M',2,'A',3,4 ) asc
" />

<STATEMENT name="GET_Dote_Profiling_Voucher"
	query="
           select prgdote, codvchtiposervizio, codvchprofiling, decdote
           from vch_def_dote order by codvchprofiling
" />

<STATEMENT name="GET_Modello_Voucher_Valido_Associato"
	query="
           select PRGMODVOUCHER, DECVALTOT, NUMKLOMODVOUCHER
           from vch_modello_voucher
           where PRGAZIONI = ? and FLGATTIVO = 'S'
" />

<STATEMENT name="GET_Codice_Attivazione_Voucher"
	query="
           select vch.codattivazione, percorso.prgazioni
           from or_vch_voucher vch
           inner join or_percorso_concordato percorso on (vch.prgpercorso = percorso.prgpercorso and vch.prgcolloquio = percorso.prgcolloquio)
           where vch.codstatovoucher = 'ASS' and trunc(vch.dtmutass) = trunc(sysdate)
           and vch.prgpercorso in (
									select to_number(pt_scelta.strchiavetabella)
							        from am_lav_patto_scelta pt_scelta
							        WHERE pt_scelta.prgpattolavoratore = (select prgpattolavoratore from am_lav_patto_scelta where prglavpattoscelta = ?)
							        and pt_scelta.codlsttab = 'OR_PER'
							      )
		   and not exists (
		   		select 1
		   		from am_documento doc
		   		inner join am_documento_coll coll on (doc.prgdocumento = coll.prgdocumento)
		   		where doc.codtipodocumento = 'STVCHATT' and coll.strchiavetabella = vch.codattivazione
		   )
		   order by vch.codattivazione
" />

<STATEMENT name="GET_Ente_Accreditato_Azione_Voucher"
	query="
           select ente.strcodicefiscale,  ente.codsede, ente.prgazioni
           from vch_ente_accreditato ente
           order by ente.strcodicefiscale, ente.codsede, ente.prgazioni
" />

<STATEMENT name="GET_KEYLOCK_NUMCODICEATTIVAZIONE"
            query="SELECT NUMCODICEVCH+1 NUMCODICEVCH,
                          NUMKLOVCHCODICE
                     FROM AM_VCH_CODICE_ATTIVAZIONE
                    WHERE NUMANNOCODVCH = ?"/>
                    
<STATEMENT name="INSERT_AM_NUMCODICEATTIVAZIONE" 
            query="INSERT INTO AM_VCH_CODICE_ATTIVAZIONE 
                          (NUMCODICEVCH, NUMANNOCODVCH)
                          VALUES
                          (?,?)"/>
   
<STATEMENT name="GET_KEYLOCK_NUMANNO_AM_VCH_CODICE"
            query="SELECT NUMKLOVCHCODICE
                     FROM AM_VCH_CODICE_ATTIVAZIONE
                    WHERE NUMANNOCODVCH = ?"/>
                          
<STATEMENT name="UPDATE_AM_NUMCODICEATTIVAZIONE" 
            query="UPDATE AM_VCH_CODICE_ATTIVAZIONE 
                     SET NUMCODICEVCH    = ? ,
                         NUMKLOVCHCODICE = ?  
                   WHERE NUMANNOCODVCH = ?"/>
                   
<STATEMENT name="GET_Voucher_Azione_Patto"
	query="
		   select count(*) countVoucher
	        from am_lav_patto_scelta pt_scelta
	        inner join or_percorso_concordato perc on (to_number(pt_scelta.strchiavetabella) = perc.prgpercorso)
	        inner join or_vch_voucher vch on (vch.prgpercorso = perc.prgpercorso and vch.prgcolloquio = perc.prgcolloquio)
	        where pt_scelta.prglavpattoscelta = ? and vch.codstatovoucher in ('ASS', 'ATT', 'CHI')
" />

<STATEMENT name="GET_Voucher_Azione_Patto_Cancella_Percorso"
	query="
		   select count(*) countVoucher
	        from or_vch_voucher vch
	        where vch.prgpercorso = ? and vch.prgcolloquio = ?
" />

<STATEMENT name="GET_Dettaglio_Voucher"
	query="
		   select vch.codstatovoucher, to_char(vch.datmaxattivazione, 'dd/mm/yyyy') datmaxattivazione, lav.cdnlavoratore, VCH.CODVCHMOTIVOANNULLAMENTO, 
		    vch.numklovoucher, vch.codattivazione, de_vch_stato.strdescrizione descstatovoucher, ANNULLVCH.strdescrizione descannullvoucher, 
		    cpicomp.strdescrizione || '-' || cpicomp.codcpi cpiCompTit, coll.codcpi,
		    az.strdescrizione descazione, azragg.strdescrizione descraggazione, lav.strcodicefiscale, lav.strcognome, lav.strnome,
		    to_char(vch.datassegnazione, 'dd/mm/yyyy') datassegnazione, to_char(vch.datattivazione, 'dd/mm/yyyy') datattivazione,
		    to_char(vch.datfineerogazione, 'dd/mm/yyyy') datfineerogazione, to_char(vch.datmaxerogazione, 'dd/mm/yyyy') datmaxerogazione,
		    vch.strcfenteaccreditato, vch.stribanfattura, vch.codmansione1, vch.codmansione2,
			 case 
	          when vch.decvaltot = 0 then '0.00' 
	          else trim(to_char(vch.decvaltot, '9999999.99')) 
	        end decvaltot ,
			case 
	          when vch.decspesaeffettiva = 0 then '0.00' 
	          else trim(to_char(vch.decspesaeffettiva, '9999999.99')) 
	        end decspesaeffettiva ,
			case 
	          when vch.decvalunitario = 0 then '0.00' 
	          else trim(to_char(vch.decvalunitario, '9999999.99')) 
	        end decvalunitario,  
		    az.codtiposervizio, an_vch_ente.strdenominazione || ' ' || an_vch_ente.strindirizzo || ' ' || comEnte.strdenominazione sedeEnteAccreditato,
		    vch.strdesrisultato, vch.codVchTipoRisultato, vch.codvchstatopagamento,
		    case 
	          when vch.decpagato = 0 then '0.00' 
	          else trim(to_char(vch.decpagato, '9999999.99')) 
	        end decpagato,   
		    to_char(DTMPRORATT, 'dd/mm/yyyy hh:mm:ss') strDataProrogaAtt, 
			utAtt.STRCOGNOME || ' ' ||  utAtt.STRNOME utenteProrogaAtt,
			NUMGGPRORATT giorniProrogaAtt,
			to_char(DTMPRORCHI, 'dd/mm/yyyy hh:mm:ss') strDataProrogaChi, 
			utChi.STRCOGNOME || ' ' ||  utChi.STRNOME utenteProrogaChi,
			NUMGGPRORCHI giorniProrogaChi,
			vch.flgCM,
			vch.cdnutins, TO_CHAR (vch.dtmins, 'dd/mm/yyyy HH24:MI') dtmins,
       		vch.cdnutmod, TO_CHAR (vch.dtmmod, 'dd/mm/yyyy HH24:MI') dtmmod
	        from or_vch_voucher vch
	        left JOIN TS_UTENTE  utAtt on (CDNUTPRORATT = utAtt.CDNUT)
			left JOIN TS_UTENTE  utChi on (CDNUTPRORCHI = utChi.CDNUT)
	        left join an_vch_ente on (vch.STRCFENTEACCREDITATO = an_vch_ente.STRCODICEFISCALE AND vch.CODSEDE = an_vch_ente.CODSEDE)
	        left join de_comune comEnte on (an_vch_ente.codcom = comEnte.codcom)
	        inner join de_vch_stato on (vch.codstatovoucher = de_vch_stato.codstatovoucher)
	        left JOIN DE_VCH_MOTIVO_ANNULLAMENTO ANNULLVCH ON (VCH.CODVCHMOTIVOANNULLAMENTO = ANNULLVCH.CODVCHMOTIVOANNULLAMENTO)
	        inner join or_percorso_concordato perc on (vch.prgpercorso = perc.prgpercorso and vch.prgcolloquio = perc.prgcolloquio)
	        inner join de_azione az on (perc.prgazioni = az.prgazioni)
	        inner join de_azione_ragg azragg on (az.prgazioneragg = azragg.prgazioniragg)
	        inner join or_colloquio coll on (perc.prgcolloquio = coll.prgcolloquio)
	        inner join de_cpi cpicomp on (coll.codcpi = cpicomp.codcpi)
	        inner join an_lavoratore lav on (coll.cdnlavoratore = lav.cdnlavoratore)
	        where vch.prgvoucher = ?
" />
 
<STATEMENT name="GET_COMBO_MOTIVO_ANNULLAMENTO_VOUCHER"
		  query="select CODVCHMOTIVOANNULLAMENTO as codice,STRDESCRIZIONE as descrizione from DE_VCH_MOTIVO_ANNULLAMENTO order by descrizione" />

<STATEMENT  name="GET_INFO_LAVORATORE_PACCHETTO_ADULTI"
        query="SELECT T.DATNASC, T.DATINIZIOINCATT, T.PRGCMISCR, T.NUMVALOREISEE, 
				TO_CHAR(MAX(T.DATDICHIARAZIONE), 'DD/MM/YYYY') DATADID, T.CODMONOTIPORAGG,
				CASE 
        			WHEN MONTHS_BETWEEN(TO_DATE(?, 'DD/MM/YYYY'), TRUNC(MAX(T.DATDICHIARAZIONE))) &gt; 24 then '1'
              	ELSE '0'
            	END ANZIANITADIDSUP24MESI
				FROM (
				SELECT TO_CHAR(LAV.DATNASC, 'DD/MM/YYYY') DATNASC, ( SELECT TO_CHAR(TS.DATINIZIOINCATT, 'DD/MM/YYYY') FROM TS_GENERALE TS) DATINIZIOINCATT,
        		I.PRGCMISCR, ISEE.NUMVALOREISEE, DID.DATDICHIARAZIONE, TIS.CODMONOTIPORAGG
        		FROM AN_LAVORATORE LAV 
        		LEFT JOIN AM_CM_ISCR I ON (LAV.CDNLAVORATORE = DECRYPT(I.CDNLAVORATORE, ?) AND I.CODSTATOATTO = 'PR' AND TO_DATE(?, 'DD/MM/YYYY') BETWEEN TRUNC(I.DATDATAINIZIO) AND TRUNC(NVL(I.DATDATAFINE, SYSDATE)))
        		LEFT JOIN DE_CM_TIPO_ISCR TIS ON (I.CODCMTIPOISCR = TIS.CODCMTIPOISCR)
        		LEFT JOIN AS_VALORE_ISEE ISEE ON (LAV.CDNLAVORATORE = ISEE.CDNLAVORATORE AND TO_DATE(?, 'DD/MM/YYYY') BETWEEN TRUNC(ISEE.DATINIZIOVAL) AND TRUNC(NVL(ISEE.DATFINEVAL, SYSDATE)))
        		LEFT JOIN AM_ELENCO_ANAGRAFICO ELENCO ON (LAV.CDNLAVORATORE = ELENCO.CDNLAVORATORE)
        		LEFT JOIN AM_DICH_DISPONIBILITA DID ON (ELENCO.PRGELENCOANAGRAFICO = DID.PRGELENCOANAGRAFICO AND DID.CODSTATOATTO = 'PR')
        		WHERE LAV.CDNLAVORATORE = ? AND TRUNC(DID.DATDICHIARAZIONE) &lt;= TO_DATE(?, 'DD/MM/YYYY')) T
				GROUP BY T.DATNASC, T.DATINIZIOINCATT, T.PRGCMISCR, T.NUMVALOREISEE, T.CODMONOTIPORAGG"/>
        		
<STATEMENT  name="GET_INFO_LAVORATORE_MGGU"
        query="SELECT TO_CHAR(MAX(DID.DATDICHIARAZIONE), 'DD/MM/YYYY') DATADID,
        		CASE 
        			WHEN MONTHS_BETWEEN(TO_DATE(?, 'DD/MM/YYYY'), TRUNC(MAX(DID.DATDICHIARAZIONE))) &gt;= 12 then '1'
              	ELSE '0'
            	END ANZIANITADID12MESI,
            	MONTHS_BETWEEN(TO_DATE(?, 'DD/MM/YYYY'), TRUNC(MAX(DID.DATDICHIARAZIONE))) MESIANZIANITA
        		FROM AN_LAVORATORE LAV
        		LEFT JOIN AM_ELENCO_ANAGRAFICO ELENCO ON (LAV.CDNLAVORATORE = ELENCO.CDNLAVORATORE)
        		LEFT JOIN AM_DICH_DISPONIBILITA DID ON (ELENCO.PRGELENCOANAGRAFICO = DID.PRGELENCOANAGRAFICO AND DID.CODSTATOATTO = 'PR')
        		WHERE LAV.CDNLAVORATORE = ? AND TRUNC(DID.DATDICHIARAZIONE) &lt;= TO_DATE(?, 'DD/MM/YYYY')"/>
	
<STATEMENT name="GET_DATI_STATISTICI_PATTO"
		  query="select (select count(*) from (select prgpattolavoratore
		  				 from am_patto_lavoratore
		  				 where codstatoatto in ('PR','PP') and codtipopatto = 'MGG'
						 union
						 select pt.prgpattolavoratore from am_patto_lavoratore pt
													inner join or_colloquio coll on (pt.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGG')
		  				   ) numPattiGG,
		  				(select count(*) from (select prgpattolavoratore
		  				 from am_patto_lavoratore
		  				 where codstatoatto in ('PR','PP') and codtipopatto = 'MGO30'
						 union
						 select pt.prgpattolavoratore from am_patto_lavoratore pt
													inner join or_colloquio coll on (pt.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGO30')
		  				   ) numPattiOver30,
		  				 (select count(*) from (select prgpattolavoratore
		  				 from am_patto_lavoratore
		  				 where codstatoatto in ('PR','PP') and codtipopatto = 'MGO45'
						 union
						 select pt.prgpattolavoratore from am_patto_lavoratore pt
													inner join or_colloquio coll on (pt.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGO45')
		  				   ) numPattiOver45,
		  				 (select count(*) from (select prgpattolavoratore
		  				 from am_patto_lavoratore
		  				 where codstatoatto in ('PR','PP') and codtipopatto = 'MINAT'
						 union
						 select pt.prgpattolavoratore from am_patto_lavoratore pt
													inner join or_colloquio coll on (pt.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MINAT')
		  				   ) numPattiMinat,
		  				 (select count(*) from (select prgpattolavoratore
		  				 from am_patto_lavoratore
		  				 where codstatoatto in ('PR','PP') and codtipopatto = 'MGGU'
						 union
						 select pt.prgpattolavoratore from am_patto_lavoratore pt
													inner join or_colloquio coll on (pt.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGGU')
		  				   ) numPattiGGU,
		  				 (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGG') or
			                 (pt.prgpattolavoratore in (select pt1.prgpattolavoratore from am_patto_lavoratore pt1
													inner join or_colloquio coll on (pt1.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt1.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGG')
		  				     )
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C06'
			                and (ragg.codmonopacchetto is null or ragg.codmonopacchetto not in ('PA', 'PB', 'PC', 'PD', 'IN')) and nvl(az.flgformazione, 'N') = 'S'
			              ) numC06MGG,
			             (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and
			               ( (pt.codtipopatto = 'MGG') or
			                 (pt.prgpattolavoratore in (select pt1.prgpattolavoratore from am_patto_lavoratore pt1
													inner join or_colloquio coll on (pt1.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt1.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGG')
		  				     )
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C07'
			                and (ragg.codmonopacchetto is null or ragg.codmonopacchetto not in ('PA', 'PB', 'PC', 'PD', 'IN')) and nvl(az.flgformazione, 'N') = 'S'
			              ) numC07MGG,
			              (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGO30') or
			                 (pt.prgpattolavoratore in (select pt1.prgpattolavoratore from am_patto_lavoratore pt1
													inner join or_colloquio coll on (pt1.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt1.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGO30')
		  				     )
                           )
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C06'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC06MGO30,
			             (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGO30') or
			                 (pt.prgpattolavoratore in (select pt1.prgpattolavoratore from am_patto_lavoratore pt1
													inner join or_colloquio coll on (pt1.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt1.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGO30')
		  				     )
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C07'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC07MGO30,
			              (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGO45') or
			                 (pt.prgpattolavoratore in (select pt1.prgpattolavoratore from am_patto_lavoratore pt1
													inner join or_colloquio coll on (pt1.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt1.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGO45')
		  				     )
                           )
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C06'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC06MGO45,
			             (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGO45') or
			                 (pt.prgpattolavoratore in (select pt1.prgpattolavoratore from am_patto_lavoratore pt1
													inner join or_colloquio coll on (pt1.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt1.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MGO45')
		  				     )
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C07'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC07MGO45,
			              (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MINAT') or
			                 (pt.prgpattolavoratore in (select pt1.prgpattolavoratore from am_patto_lavoratore pt1
													inner join or_colloquio coll on (pt1.cdnlavoratore = coll.cdnlavoratore)
													inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
													inner join am_lav_patto_scelta scelta on (pt1.prgpattolavoratore = scelta.prgpattolavoratore
													                                      and per.prgpercorso = to_number(scelta.strchiavetabella)
													                                      and scelta.codlsttab = 'OR_PER'
													                                      )
													inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
													where de_servizio.codmonoprogramma = 'MINAT')
		  				     )
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C06'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC06MINAT,
			              (  select count(distinct lav.cdnlavoratore)  
							 from an_lavoratore lav, am_cm_iscr cm, am_patto_lavoratore pa, de_cm_tipo_iscr de
							 where encrypt(lav.cdnlavoratore, ?) = cm.cdnlavoratore
							 and  pa.cdnlavoratore = lav.cdnlavoratore and pa.datadesionepa is not null
							 and (cm.DATDATAFINE is null OR trunc(cm.DATDATAFINE) &gt;= trunc(pa.datadesionepa))
							 and cm.codstatoatto = 'PR'
							 and trunc(cm.datdatainizio) &lt;= trunc(pa.datadesionepa) 
							 and de.codcmtipoiscr = cm.codcmtipoiscr
							 and  de.codmonotiporagg = 'D'
			              ) numIscrittiL6899Disabili,
			              ( SELECT count(*)
							FROM (SELECT DISTINCT am_patto_lavoratore.cdnlavoratore
								from am_patto_lavoratore
								INNER JOIN an_lavoratore ON an_lavoratore.CDNLAVORATORE = am_patto_lavoratore.cdnlavoratore
								where am_patto_lavoratore.codstatoatto = 'PR' and
								am_patto_lavoratore.datadesionepa IS NOT NULL AND
								trunc(am_patto_lavoratore.datadesionepa) &lt; trunc(add_months(an_lavoratore.datnasc,12*45)))
			              ) numIscrittiEta45,
			              ( SELECT count(*)
							FROM (SELECT DISTINCT am_patto_lavoratore.cdnlavoratore
								from am_patto_lavoratore
								INNER JOIN AM_ELENCO_ANAGRAFICO ON AM_ELENCO_ANAGRAFICO.cdnlavoratore = am_patto_lavoratore.cdnlavoratore
								INNER JOIN AM_DICH_DISPONIBILITA ON AM_DICH_DISPONIBILITA.PRGELENCOANAGRAFICO = AM_ELENCO_ANAGRAFICO.PRGELENCOANAGRAFICO
								INNER JOIN an_lavoratore ON an_lavoratore.CDNLAVORATORE = am_patto_lavoratore.cdnlavoratore
								where am_patto_lavoratore.codstatoatto = 'PR' and 
								AM_DICH_DISPONIBILITA.CODSTATOATTO = 'PR' and
								am_patto_lavoratore.datadesionepa IS NOT NULL AND
								trunc(am_patto_lavoratore.datadesionepa) &gt;= trunc(add_months(an_lavoratore.datnasc,12*45)) AND
								trunc(am_patto_lavoratore.datadesionepa) &lt; trunc(add_months(AM_DICH_DISPONIBILITA.datdichiarazione,12*2)) AND
								AM_DICH_DISPONIBILITA.datFine IS NULL)
			              ) numIscritti45AnniMin24mesi,
			              ( SELECT count(*)
							FROM (SELECT DISTINCT am_patto_lavoratore.cdnlavoratore
								from am_patto_lavoratore
								INNER JOIN AM_ELENCO_ANAGRAFICO ON AM_ELENCO_ANAGRAFICO.cdnlavoratore = am_patto_lavoratore.cdnlavoratore
								INNER JOIN AM_DICH_DISPONIBILITA ON AM_DICH_DISPONIBILITA.PRGELENCOANAGRAFICO = AM_ELENCO_ANAGRAFICO.PRGELENCOANAGRAFICO
								INNER JOIN an_lavoratore ON an_lavoratore.CDNLAVORATORE = am_patto_lavoratore.cdnlavoratore
								where am_patto_lavoratore.codstatoatto = 'PR' and 
								AM_DICH_DISPONIBILITA.CODSTATOATTO = 'PR' and
								am_patto_lavoratore.datadesionepa IS NOT NULL AND
								trunc(am_patto_lavoratore.datadesionepa) &gt;= trunc(add_months(an_lavoratore.datnasc,12*45)) AND
								trunc(am_patto_lavoratore.datadesionepa) &gt;= trunc(add_months(AM_DICH_DISPONIBILITA.datdichiarazione,12*2)) AND
								AM_DICH_DISPONIBILITA.datFine IS NULL)
			              ) numIscritti45AnniMag24mesi
		  		 from dual" />
		  		 
<STATEMENT name="GET_LIMITI_AZIONI_PATTO_PACCHETTO_ADULTI"
		  query="select (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGO30') or
                           	 (getEsisteProgrammaPatto(pt.prgpattolavoratore, '''MGO30''') &gt; 0)
                           )
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C06'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC06MGO30,
			             (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGO30') or
                           	 (getEsisteProgrammaPatto(pt.prgpattolavoratore, '''MGO30''') &gt; 0)
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C07'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC07MGO30,
			              (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGO45') or
                           	 (getEsisteProgrammaPatto(pt.prgpattolavoratore, '''MGO45''') &gt; 0)
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C06'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC06MGO45,
			             (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MGO45') or
                           	 (getEsisteProgrammaPatto(pt.prgpattolavoratore, '''MGO45''') &gt; 0)
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C07'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC07MGO45,
			              (select count(*) 
			               from am_lav_patto_scelta ptscelta
			               inner join am_patto_lavoratore pt on (ptscelta.prgpattolavoratore = pt.prgpattolavoratore)
			               inner join or_percorso_concordato perc on (to_number(ptscelta.strchiavetabella) = perc.prgpercorso)
			               inner join de_azione az on (perc.prgazioni = az.prgazioni)
			               inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			               where pt.codstatoatto in ('PR','PP') and 
			               ( (pt.codtipopatto = 'MINAT') or
                           	 (getEsisteProgrammaPatto(pt.prgpattolavoratore, '''MINAT''') &gt; 0)
                           ) 
			               and ptscelta.codlsttab = 'OR_PER' and az.codazionesifer = 'C06'
			                and ragg.codmonopacchetto in ('PA', 'PB', 'PC', 'PD', 'IN') and nvl(az.flgformazione, 'N') = 'S'
			              ) numC06MINAT,
			              (select NUMC06OVER30 from ts_generale where prggenerale = 1) NUMC06OVER30,
			              (select NUMC07OVER30 from ts_generale where prggenerale = 1) NUMC07OVER30,
			              (select NUMC06OVER45 from ts_generale where prggenerale = 1) NUMC06OVER45,
			              (select NUMC07OVER45 from ts_generale where prggenerale = 1) NUMC07OVER45,
			              (select NUMC06INCATT from ts_generale where prggenerale = 1) NUMC06INCATT
		  		 from dual" />

<STATEMENT name="GET_DATA_ADESIONE_PATTO_PACCHETTO_ADULTI"
		  query="select to_char(max(pt.DATADESIONEPA), 'dd/mm/yyyy') DATADESIONEPA
		  		from am_patto_lavoratore pt
		  		where pt.cdnlavoratore = ? and pt.codstatoatto = 'PR'" />
		  		
<STATEMENT  name="SELECT_DATI_AN_LAVORATORE_GGU"
        query="SELECT LAV.CDNLAVORATORE, LAV.STRCODICEFISCALE, LAV.STRCOGNOME, LAV.STRNOME, 
			      TO_CHAR(LAV.DATNASC, 'DD/MM/YYYY') as DATNASC, LAV.CODCOMNAS, LAV.CODCOMRES,
			      PROVRES.CODPROVINCIA, TO_CHAR(PER.DATADESIONEGG, 'DD/MM/YYYY') as DATADESIONEGG,
	          	PROVSIL.CODREGIONE CODREGIONESIL, PROVRES.CODREGIONE CODREGIONERES
				FROM AN_LAVORATORE LAV, TS_GENERALE, DE_COMUNE COMRES, DE_PROVINCIA PROVRES, 
				OR_COLLOQUIO COLL, OR_PERCORSO_CONCORDATO PER, DE_AZIONE AZ, DE_AZIONE_RAGG RAGG,
	          	DE_PROVINCIA PROVSIL
			WHERE LAV.CODCOMRES = COMRES.CODCOM AND COMRES.CODPROVINCIA = PROVRES.CODPROVINCIA
		      AND LAV.CDNLAVORATORE = COLL.CDNLAVORATORE AND COLL.PRGCOLLOQUIO = PER.PRGCOLLOQUIO 
		      AND PER.PRGAZIONI = AZ.PRGAZIONI AND AZ.PRGAZIONERAGG = RAGG.PRGAZIONIRAGG
		      AND TS_GENERALE.CODPROVINCIASIL = PROVSIL.CODPROVINCIA
		      AND LAV.CDNLAVORATORE = ? AND NVL(AZ.FLGADESIONEGG,'N') = 'S' AND NVL(RAGG.CODMONOPACCHETTO,'ZZ') = 'GU'
		      AND PER.CODESITO = 'FC'
			ORDER BY PER.DATADESIONEGG DESC"/>
			
<STATEMENT  name="SELECT_A02_GGU"
        query="SELECT COUNT(*) AS numA02GGU
				FROM OR_COLLOQUIO COLL
		        INNER JOIN OR_PERCORSO_CONCORDATO PER ON (COLL.PRGCOLLOQUIO = PER.PRGCOLLOQUIO)
		        INNER JOIN DE_AZIONE AZ ON (PER.PRGAZIONI = AZ.PRGAZIONI)
		        INNER JOIN DE_AZIONE_RAGG RAGG ON (AZ.PRGAZIONERAGG = RAGG.PRGAZIONIRAGG)
			WHERE COLL.CDNLAVORATORE = ? AND AZ.CODAZIONESIFER = 'A02' AND NVL(RAGG.CODMONOPACCHETTO,'ZZ') = 'GU'
				AND PER.CODESITO = 'FC'"/>
				
<STATEMENT  name="SELECT_PRESTAZIONI_ASSOCIATE"
        query="SELECT count(*) as numPrestazioni FROM AM_LAV_PATTO_SCELTA SCELTA
				INNER JOIN OR_PERCORSO_CONCORDATO PER ON (TO_NUMBER(SCELTA.STRCHIAVETABELLA) = PER.PRGPERCORSO)
				INNER JOIN DE_AZIONE AZ ON (PER.PRGAZIONI = AZ.PRGAZIONI)
				INNER JOIN DE_AZIONE_RAGG RAGG ON (AZ.PRGAZIONERAGG = RAGG.PRGAZIONIRAGG)
				INNER JOIN AM_PATTO_LAVORATORE PATTO ON (SCELTA.PRGPATTOLAVORATORE = PATTO.PRGPATTOLAVORATORE)
		        INNER JOIN DE_REL_PATTO_PRESTAZIONE REL2 ON (RAGG.PRGAZIONIRAGG = REL2.PRGAZIONIRAGG AND REL2.OPERAZIONE = 'AND' AND REL2.CODSERVIZIO = ?)
		        LEFT JOIN DE_REL_PATTO_PRESTAZIONE REL1 ON (RAGG.PRGAZIONIRAGG = REL1.PRGAZIONIRAGG AND REL1.OPERAZIONE = 'OR' AND 
		        										    REL2.NUMFORMULA = REL1.NUMFORMULA AND REL1.CODSERVIZIO = ?)
						WHERE (SCELTA.PRGPATTOLAVORATORE = ?) AND (SCELTA.CODLSTTAB = 'OR_PER')
		         AND (
		         	  (
		         	   (SELECT COUNT(DE_REL_PATTO_PRESTAZIONE.PRGAZIONIRAGG) 
	                     FROM DE_REL_PATTO_PRESTAZIONE 
	                      WHERE DE_REL_PATTO_PRESTAZIONE.CODTIPOPATTO = PATTO.CODTIPOPATTO AND DE_REL_PATTO_PRESTAZIONE.OPERAZIONE = 'OR' 
	                       AND DE_REL_PATTO_PRESTAZIONE.CODSERVIZIO = ? AND DE_REL_PATTO_PRESTAZIONE.NUMFORMULA = REL2.NUMFORMULA) = 0)
		            OR
		             (
		         	 (SELECT COUNT(DISTINCT DE_AZIONE_RAGG.PRGAZIONIRAGG)
	                    FROM AM_LAV_PATTO_SCELTA
	                    INNER JOIN OR_PERCORSO_CONCORDATO ON (TO_NUMBER(AM_LAV_PATTO_SCELTA.STRCHIAVETABELLA) = OR_PERCORSO_CONCORDATO.PRGPERCORSO)
	                    INNER JOIN DE_AZIONE ON (OR_PERCORSO_CONCORDATO.PRGAZIONI = DE_AZIONE.PRGAZIONI)
	                    INNER JOIN DE_AZIONE_RAGG ON (DE_AZIONE.PRGAZIONERAGG = DE_AZIONE_RAGG.PRGAZIONIRAGG)
	                    WHERE AM_LAV_PATTO_SCELTA.PRGPATTOLAVORATORE = ? AND AM_LAV_PATTO_SCELTA.CODLSTTAB = 'OR_PER'
	                    AND DE_AZIONE_RAGG.PRGAZIONIRAGG IN (SELECT DE_REL_PATTO_PRESTAZIONE.PRGAZIONIRAGG 
	                                                         FROM DE_REL_PATTO_PRESTAZIONE 
	                                                         WHERE DE_REL_PATTO_PRESTAZIONE.CODTIPOPATTO = PATTO.CODTIPOPATTO AND 
	                                                               DE_REL_PATTO_PRESTAZIONE.OPERAZIONE = 'OR' AND DE_REL_PATTO_PRESTAZIONE.CODSERVIZIO = ?
	                                                               AND DE_REL_PATTO_PRESTAZIONE.NUMFORMULA = REL2.NUMFORMULA)) &gt; 0
	                )
		         )
		         AND 
		             (
	                    (SELECT COUNT(DISTINCT DE_AZIONE_RAGG.PRGAZIONIRAGG)
	                    FROM AM_LAV_PATTO_SCELTA
	                    INNER JOIN OR_PERCORSO_CONCORDATO ON (TO_NUMBER(AM_LAV_PATTO_SCELTA.STRCHIAVETABELLA) = OR_PERCORSO_CONCORDATO.PRGPERCORSO)
	                    INNER JOIN DE_AZIONE ON (OR_PERCORSO_CONCORDATO.PRGAZIONI = DE_AZIONE.PRGAZIONI)
	                    INNER JOIN DE_AZIONE_RAGG ON (DE_AZIONE.PRGAZIONERAGG = DE_AZIONE_RAGG.PRGAZIONIRAGG)
	                    WHERE AM_LAV_PATTO_SCELTA.PRGPATTOLAVORATORE = ? AND AM_LAV_PATTO_SCELTA.CODLSTTAB = 'OR_PER'
	                    AND DE_AZIONE_RAGG.PRGAZIONIRAGG IN (SELECT DE_REL_PATTO_PRESTAZIONE.PRGAZIONIRAGG 
	                                                         FROM DE_REL_PATTO_PRESTAZIONE 
	                                                         WHERE DE_REL_PATTO_PRESTAZIONE.CODTIPOPATTO = PATTO.CODTIPOPATTO AND 
	                                                               DE_REL_PATTO_PRESTAZIONE.OPERAZIONE = 'AND' AND DE_REL_PATTO_PRESTAZIONE.CODSERVIZIO = ?
	                                                               AND DE_REL_PATTO_PRESTAZIONE.NUMFORMULA = REL2.NUMFORMULA))                            
	                    = (SELECT COUNT(DE_REL_PATTO_PRESTAZIONE.PRGAZIONIRAGG) 
	                     FROM DE_REL_PATTO_PRESTAZIONE 
	                      WHERE DE_REL_PATTO_PRESTAZIONE.CODTIPOPATTO = PATTO.CODTIPOPATTO AND DE_REL_PATTO_PRESTAZIONE.OPERAZIONE = 'AND' 
	                       AND DE_REL_PATTO_PRESTAZIONE.CODSERVIZIO = ? AND DE_REL_PATTO_PRESTAZIONE.NUMFORMULA = REL2.NUMFORMULA)
	                 )
				"/>	
	
<STATEMENT name="COMBO_GET_OPERATORI_SPI"
	query="select PRGSPI as CODICE, trim(STRCOGNOME || ' ' || STRNOME ||
                       DECODE(SYSDATE,    
                                GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (non attivo)',
                                LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (non attivo)', 
                                '')) AS DESCRIZIONE,
            DECODE(SYSDATE,GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (non attivo)',
                               LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),' (non attivo)', 
                               '') AS STRSCADUTO   
                  from AN_SPI                     
                  order by DECODE(STRSCADUTO,'',0,1),DESCRIZIONE" />
                  
                 
<STATEMENT name="GET_OPERATORE_SPI_TS_UTENTE"
	query="select AN_SPI.PRGSPI
                  from AN_SPI , TS_UTENTE                    
                  WHERE AN_SPI.PRGSPI = TS_UTENTE.PRGSPI 
                  AND TS_UTENTE.CDNUT= ?" />

<STATEMENT name="GET_PROFILING_PATTO_FROM_PROFILO_LAVORATORE"
	query="
select profilo.prglavoratoreprofilo || '--' || profilo.codvchprofiling as codice, de_vch_profiling.strdescrizione || 
           DECODE(SYSDATE,GREATEST(SYSDATE, de_vch_profiling.DATINIZIOVAL, de_vch_profiling.DATFINEVAL), ' (scaduto)',
               LEAST(SYSDATE, de_vch_profiling.DATINIZIOVAL, de_vch_profiling.DATFINEVAL),' (scaduto)', 
               '') || ' - ' || to_char(profilo.datcreazioneprofilo, 'dd/mm/yyyy hh24:mi') as descrizione
                  from am_lavoratore_profilo profilo
                  inner join de_vch_profiling on (profilo.codvchprofiling = de_vch_profiling.codvchprofiling)
           where profilo.cdnlavoratore = ? and profilo.codmonostatoprof = 'C'
           order by profilo.datcreazioneprofilo desc
" />
           
 <STATEMENT name="GET_PRESTAZIONI_AZIONI" query="
    SELECT distinct
		  (case upper(p.codesito)
		  when 'PRO' then 1
		  when 'CC' then 2
		  when 'AVV' then 3 
		  when 'FC' then 4 
		  when 'RIF' then 5 
		  when 'INT' then 6
		  when 'DEC' then 7
		  when 'ESN' then 8
		  when 'TRA' then 9
		  when 'ESC' then 10
		  else 0
		    end) as Ordine,
		  Az.Strdescrizione misura, Es.Strdescrizione esito, P.Strnote, ragg.STRDESCRIZIONE as azione_ragg,
		  (case upper(p.codesito)
		  when 'PRO' then decode(P.datstimata, null, '', 'da avviarsi entro il - ' || to_char( P.datstimata, 'dd/mm/yyyy')) 
		  when 'CC' then decode(P.datstimata, null, '', 'da svolgersi entro il - ' || to_char( P.datstimata, 'dd/mm/yyyy'))
		  when 'AVV' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data prevista conclusione - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  when 'FC' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data conclusione - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  when 'RIF' then decode(P.datstimata, null, '', 'da svolgersi entro il - ' || to_char( P.datstimata, 'dd/mm/yyyy'))
		  when 'INT' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data conclusione - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  when 'DEC' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data decadenza - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  when 'ESN' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data esonero - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  when 'TRA' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data trasformazione - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  when 'ESC' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data esclusione - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  else '' 
		    end) as notaaggiuntiva, 
		  Patto.Datriferimento as dataRif, ragg.flg_dgr1959,
		  coll.CODSERVIZIO, to_char(coll.DATCOLLOQUIO,'dd/mm/yyyy') as dataInizioProg,
         to_char(coll.DATFINEPROGRAMMA,'dd/mm/yyyy') as dataFineProg,  
		  serv.STRDESCRIZIONE as descrizioneProgramma, serv.CODMONOPROGRAMMA,
		  NVL(serv.FLGPROGRAMMA, 'N') as programmaSN, p.PRGCOLLOQUIO
		from am_patto_lavoratore patto
		  inner join am_lav_patto_scelta sc on (patto.prgpattolavoratore = sc.prgpattolavoratore)
		  inner join or_percorso_concordato p on (sc.strchiavetabella = to_char(p.prgpercorso) and sc.codlsttab = 'OR_PER')
		  inner join de_esito es on (p.codesito = es.codesito)
		  inner join de_azione az on (p.prgazioni = az.prgazioni) 
		  inner join de_azione_ragg ragg on (az.PRGAZIONERAGG = ragg.PRGAZIONIRAGG)
		  inner join or_colloquio coll on (p.PRGCOLLOQUIO = coll.PRGCOLLOQUIO)
      	  inner join de_servizio serv on (coll.CODSERVIZIO = serv.CODSERVIZIO)
		where patto.PRGPATTOLAVORATORE = ? and (upper(p.codesito) in ('PRO', 'CC', 'AVV', 'FC', 'RIF', 'INT', 'DEC', 'ESN', 'TRA', 'ESC') )
		order by decode(dataFineProg, null, 1, 0) desc, p.PRGCOLLOQUIO desc, dataInizioProg desc, azione_ragg, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, dataRif desc
 "/>  

 <STATEMENT name="GET_AZIONI_ADR" query="
 	SELECT distinct
		  (case upper(p.codesito)
		  when 'PRO' then 1
		  when 'CC' then 2
		  when 'AVV' then 3 
		  when 'FC' then 4 
		  when 'RIF' then 5 
		  when 'INT' then 6
		  else 0
		    end) as Ordine,
		  Az.Strdescrizione misura, Es.Strdescrizione esito, P.Strnote,
		  (case upper(p.codesito)
		  when 'PRO' then decode(P.datstimata, null, '', 'da svolgersi entro il - ' || to_char( P.datstimata, 'dd/mm/yyyy')) 
		  when 'CC' then decode(P.datstimata, null, '', 'da svolgersi entro il - ' || to_char( P.datstimata, 'dd/mm/yyyy'))
		  when 'AVV' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data prevista conclusione - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  when 'FC' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data conclusione - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  when 'RIF' then decode(P.datstimata, null, '', 'da svolgersi entro il - ' || to_char( P.datstimata, 'dd/mm/yyyy'))
		  when 'INT' then decode(P.datavvioazione, null, '', 'data avvio - ' || to_char( P.datavvioazione, 'dd/mm/yyyy') || (decode(P.Dateffettiva, null, '', '- data conclusione - ' || to_char( P.Dateffettiva, 'dd/mm/yyyy')) ) )
		  else '' 
		    end) as notaaggiuntiva, 
		  Patto.Datriferimento as dataRif
		from am_patto_lavoratore patto
		  inner join am_lav_patto_scelta sc on (patto.prgpattolavoratore = sc.prgpattolavoratore)
		  inner join or_percorso_concordato p on (sc.strchiavetabella = to_char(p.prgpercorso) and sc.codlsttab = 'OR_PER')
		  inner join de_esito es on (p.codesito = es.codesito)
		  inner join de_azione az on (p.prgazioni = az.prgazioni) 
		where patto.PRGPATTOLAVORATORE = ? and (upper(p.codesito) in ('PRO', 'CC', 'AVV', 'FC', 'RIF', 'INT') )
		order by 1, 2, 3, 4, 5, 6, dataRif desc
 "/>
 
 <STATEMENT name="GET_APPUNTAMENTI_ADR"
	query=" 
		SELECT  to_char(ag_.DTMDATAORA,'dd/mm/yyyy') as dataApp,
               to_char(ag_.DTMDATAORA, 'hh24:mi') as orario,
               ag_.numminuti as Durata, 
               de_.STRDESCRIZIONE AS DesServizio,
               ( nvl(esito.STRDESCRIZIONE,' ') ) AS DesEsito,
        	   Stato.Strdescrizione DesStato, Ag_.Codstatoappuntamento
            FROM ag_agenda ag_, 
                 de_servizio de_, 
                 ag_lavoratore lav,
                 de_esito_appunt esito,
                 am_lav_patto_scelta ps_ ,                 
                 am_patto_lavoratore apm,
                 de_stato_appuntamento stato
          	WHERE (    (lav.codcpi = ag_.codcpi)
             	 AND (Ag_.Codstatoappuntamento = stato.Codstatoappuntamento (+))
                 AND (lav.prgappuntamento = ag_.prgappuntamento)
                 AND lav.codcpi = ag_.codcpi
                 AND (ag_.codservizio = de_.codservizio(+))
                 AND (ag_.CODESITOAPPUNT = esito.CODESITOAPPUNT (+))
                 AND apm.cdnlavoratore = lav.cdnlavoratore
                 AND apm.prgpattolavoratore = ps_.prgpattolavoratore
                 AND (lav.cdnLavoratore = ?)
                 AND (lav.CDNLAVORATORE = ps_.strchiavetabella) 
                 AND (lav.codcpi = ps_.strchiavetabella2))
				 AND lav.PRGAPPUNTAMENTO = ps_.STRCHIAVETABELLA3
              	 AND Ag_.Codstatoappuntamento in (2,3,4)
                 AND apm.datfine is null
" />

<STATEMENT name="GET_Dati_Patto_WS_MyStage"
    query="SELECT
                    pl.prgpattolavoratore,
                    pl.numindicesvantaggio2,
                    pl.codtipopatto, to_char(pl.datscadconferma, 'dd/mm/yyyy') AS datscadconferma,
                    to_char(pl.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                    to_char(pl.datstipula, 'dd/mm/yyyy') AS datstipula,
                    pl.codcpi, pl.codcodificapatto,
                    to_char(pl.datfine, 'dd/mm/yyyy') AS datfine,
                    pl.codmotivofineatto,
                    (case
                      when
                        (select t.numprotocollo numprotocollo
                        from
                        (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                am_doc.numannoprot numannoprot
                        from am_patto_lavoratore patto
                        inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                        inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                        am_doc.cdnlavoratore = patto.cdnlavoratore)
                        where patto.cdnlavoratore = ? and patto.codstatoatto = 'PR'
                        and (to_date(?,'dd/mm/yyyy') &gt;= trunc(patto.datstipula))
                        and (patto.datfine is null or to_date(?,'dd/mm/yyyy') &lt;= trunc(patto.datfine))
                        and am_doc.codtipodocumento in ('PT297', 'ACLA')
                        and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                        group by patto.prgpattolavoratore, am_doc.numannoprot
                        order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                        where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                      ) is not null then (select t.numprotocollo numprotocollo
                                          from
                                          (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                          		  am_doc.numannoprot numannoprot    
                                          from am_patto_lavoratore patto
                                          inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                                          inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                                          am_doc.cdnlavoratore = patto.cdnlavoratore)
                                          where patto.cdnlavoratore = ? and patto.codstatoatto = 'PR'
                                          and (to_date(?,'dd/mm/yyyy') &gt;= trunc(patto.datstipula))
                        				  and (patto.datfine is null or to_date(?,'dd/mm/yyyy') &lt;= trunc(patto.datfine))
                                          and am_doc.codtipodocumento in ('PT297', 'ACLA')
                                          and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                                          group by patto.prgpattolavoratore, am_doc.numannoprot
                                          order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                                          where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                                        )
                           else do.numprotocollo
                      end) AS numprotocollo
           FROM
                    am_patto_lavoratore pl
                    INNER JOIN am_documento_coll dc ON (to_number(dc.strchiavetabella) = pl.prgpattolavoratore)
                    INNER JOIN am_documento do ON (do.prgdocumento = dc.prgdocumento AND do.cdnlavoratore = pl.cdnlavoratore)
           WHERE
           			(pl.cdnlavoratore = ?)
                    AND (do.codtipodocumento in ('PT297', 'ACLA'))
                    AND (pl.codstatoatto = 'PR')
                    AND (do.codstatoatto = 'PR')
                    AND (to_date(?,'dd/mm/yyyy') &gt;= trunc(pl.datstipula))
                    AND (pl.datfine is null or to_date(?,'dd/mm/yyyy') &lt;= trunc(pl.datfine))
                    order by pl.datstipula desc, pl.dtmins desc" />
                    
<STATEMENT name="GET_AZIONI_RAGG_NOT_SCAD"
	query="
	SELECT prgAzioniRagg as codice, strDescrizione as descrizione, flg_misurayei 
	FROM DE_AZIONE_RAGG
	WHERE to_date(to_char(sysdate, 'dd/mm/yyyy'), 'dd/mm/yyyy') 
    BETWEEN  to_date(to_char(DATINIZIOVAL, 'dd/mm/yyyy'), 'dd/mm/yyyy') 
    AND to_date(to_char(DATFINEVAL, 'dd/mm/yyyy'), 'dd/mm/yyyy')
    order by strDescrizione
" />

<STATEMENT name="GET_OR_PER_NON_LEGATE_BY_PRGPATTO"
	query="
		  SELECT DISTINCT per.prgcolloquio, per.prgpercorso, az.prgazioni, am_patto_lavoratore.codtipopatto
          FROM or_percorso_concordato per,
                de_esito es,
                de_azione az,
				de_azione_ragg ragg,
                or_colloquio coll,
				am_patto_lavoratore
          WHERE per.prgcolloquio = coll.prgcolloquio
            AND am_patto_lavoratore.prgpattolavoratore = ?
            AND per.codesito = es.codesito(+)
            AND per.prgazioni = az.prgazioni
            and az.PRGAZIONERAGG = ragg.PRGAZIONIRAGG
			and am_patto_lavoratore.CDNLAVORATORE = coll.CDNLAVORATORE
			and trunc(per.datstimata) &gt;= trunc(am_patto_lavoratore.datstipula)
            AND NOT EXISTS (
                   SELECT aps.prgpattolavoratore
                     FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
                    WHERE aps.codlsttab = 'OR_PER'
                      AND to_number(aps.strchiavetabella) = per.prgpercorso
                      AND aps.prgpattolavoratore = apl.prgpattolavoratore
                      AND apl.cdnlavoratore = am_patto_lavoratore.cdnlavoratore
                      )
" />

<STATEMENT name="GET_LAST_CONFERIMENTO_DID"
		  query="SELECT PRGCONFERIMENTODID, DECPROFILING, DATPROFILING, NUMETA, STRSESSO, nomeprovres,
       					NUMNUCLEOFAM, FLGFIGLIACARICO, FLGFIGLIMINORENNI,
       					FLGESPLAVORO, NUMMESIDISOCC, cupDescrizione, profDescrizione,
       					pritDescrizione, corsoDescrizione, NUMMESIRICERCALAV, titoloDescrizione,
       					cupDescrizioneCal, NUMMESIDISOCC_CALC
				FROM  (
        				SELECT ccd.PRGCONFERIMENTODID, ccd.DECPROFILING, TO_CHAR(ccd.DATPROFILING, 'dd/mm/yyyy') DATPROFILING, ccd.NUMETA, 
        						(CASE WHEN ccd.STRSESSO = 'F' THEN 'Femmina' ELSE 'Maschio' END) STRSESSO, de_prov.STRDENOMINAZIONE nomeprovres,
				               ccd.NUMNUCLEOFAM, decode(ccd.FLGFIGLIACARICO,'S','Si','No') FLGFIGLIACARICO, 
				               (CASE WHEN ccd.FLGFIGLIACARICO = 'S' THEN decode(ccd.FLGFIGLIMINORENNI,'S','Si','No') ELSE '' END) FLGFIGLIMINORENNI,
				               (CASE WHEN ccd.FLGESPLAVORO = 'S' THEN 'Ha gia'' avuto un lavoro' ELSE 'Non ha mai lavorato' END) FLGESPLAVORO, 
				               (CASE WHEN ccd.FLGESPLAVORO = 'S' THEN ccd.NUMMESIDISOCC ELSE 0 END) NUMMESIDISOCC, cup.STRDESCRIZIONE cupDescrizione, 
				               prof.STRDESCRIZIONE profDescrizione, prit.STRDESCRIZIONE pritDescrizione, corso.STRDESCRIZIONE corsoDescrizione, 
				               ccd.NUMMESIRICERCALAV, titolo.STRDESCRIZIONE titoloDescrizione, cup2.STRDESCRIZIONE cupDescrizioneCal, ccd.NUMMESIDISOCC_CALC
        				FROM   am_conferimento_did ccd, de_provincia de_prov, 
               					mn_pf_condoccup cup, mn_pf_condoccup cup2, mn_pf_posizioneprof prof, mn_pf_presenzait prit, mn_pf_iscrcorso corso, de_titolo titolo
				        WHERE ccd.cdnlavoratore = ? 
				        AND   TRUNC(ccd.datDid) = TO_DATE(?, 'dd/mm/yyyy')
				        AND   ccd.codMonoStatoInvio = 'I'
				        AND   ccd.codPfTipoEvento = 'C' 
				        AND   ccd.IDSPROFILING IS NOT NULL
				        and   ccd.CODPROVINCIARES = de_prov.CODPROVINCIA
				        and   ccd.CODPFCONDOCCUP = cup.CODPFCONDOCCUP(+)
				        and   ccd.CODPFCONDOCCUP_CALC = cup2.CODPFCONDOCCUP(+)
				        and   ccd.CODPFPOSIZIONEPROF = prof.CODPFPOSIZIONEPROF(+)
				        and   ccd.CODPFPRESENZAIT = prit.CODPFPRESENZAIT(+)
				        and   ccd.CODPFISCRCORSO = corso.CODPFISCRCORSO(+)
				        and   ccd.CODTITOLO = titolo.CODTITOLO
				        ORDER BY ccd.DTMINVIO DESC, ccd.PRGCONFERIMENTODID DESC)
				WHERE ROWNUM = 1" 
/>

<STATEMENT name="GET_DE_PROFILING_150"
	query="SELECT numprofiling, fascia_da, fascia_a, (case 
		       when to_number(nvl(
		           (select num from ts_config_loc where codtipoconfig = 'PROF_150' 
		           and strcodrif = (select codprovinciasil from ts_generale)), 0)) > 0 then 
		             strprofiling
		       else ''
		    end) as strprofiling from DE_PROFILING_150" />

<STATEMENT name="GET_DATI_PROFILING_DID"
	query=" select decprofiling, datprofiling, numprofiling, strprofiling, codtitolo
			from (
			select am_conf_did.decprofiling, to_char(am_conf_did.datprofiling, 'dd/mm/yyyy') as datprofiling, 
			de_prof_150.numprofiling, (case when to_number(nvl(
		           (select num from ts_config_loc where codtipoconfig = 'PROF_150' 
		           and strcodrif = (select codprovinciasil from ts_generale where prggenerale=1)), 0)) > 0 then 
		             de_prof_150.strprofiling
		       else ''
		    end) as strprofiling, am_conf_did.codtitolo
			from am_conferimento_did am_conf_did
			left join de_profiling_150 de_prof_150 on (de_prof_150.fascia_da &lt;= am_conf_did.decprofiling and de_prof_150.fascia_a &gt;= am_conf_did.decprofiling) 
			where am_conf_did.codpftipoevento = 'C' and am_conf_did.codmonostatoinvio = 'I' and cdnLavoratore = ?
			and exists (select 1 from am_dich_disponibilita dich
			            inner join am_elenco_anagrafico ele on ele.prgelencoanagrafico = dich.prgelencoanagrafico
			            where dich.codstatoatto = 'PR' and dich.datfine is null and ele.datcan is null
			            and am_conf_did.datdid = dich.datdichiarazione
			            and am_conf_did.cdnLavoratore = ele.cdnLavoratore)
			order by am_conf_did.dtminvio desc, am_conf_did.prgconferimentodid desc
			) T where rownum = 1" />
			
<STATEMENT name="SELECT_AZIONI_ASSOCIATE_PATTO_ENTE"
        query="SELECT serv.strdescrizione as programma, 
				    az.prgazioni,
				    az.strdescrizione
				FROM
				    am_patto_lavoratore      patto
				    INNER JOIN am_lav_patto_scelta      scelta ON ( patto.prgpattolavoratore = scelta.prgpattolavoratore
				                                               AND scelta.codlsttab = 'OR_PER' )
				    INNER JOIN or_percorso_concordato   per ON ( to_number(scelta.strchiavetabella) = per.prgpercorso )
				    INNER JOIN or_colloquio             coll ON ( per.prgcolloquio = coll.prgcolloquio )
				    INNER JOIN de_azione                az ON ( per.prgazioni = az.prgazioni )
				    INNER JOIN de_servizio              serv ON ( coll.codservizio = serv.codservizio )
				    INNER JOIN am_programma_ente        progente ON ( progente.prgpattolavoratore = patto.prgpattolavoratore
				                                               AND progente.prgcolloquio = coll.prgcolloquio )
				    LEFT JOIN an_rel_ente_azione ON ( an_rel_ente_azione.prgazioni = az.prgazioni
				                                      AND an_rel_ente_azione.strcodicefiscale = progente.strentecodicefiscale )
				WHERE
				    patto.prgpattolavoratore = ?
				    AND an_rel_ente_azione.prgazioni IS NULL
				    AND coll.datfineprogramma IS NULL
				order by  per.prgazioni
"/>
<STATEMENT name="GET_AZIONI_RAGG_CODSERVIZIO_DETTAGLIO"
	query="
		SELECT prgAzioniRagg as codice, strDescrizione as descrizione, flg_misurayei ,
      DECODE(SYSDATE,
      GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 'SCADUTE',
        LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),'SCADUTE', 
        'VALIDE') as gruppo,DECODE(SYSDATE,
      GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 2,
        LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL), 2, 
        1) as ordine_gruppo
               FROM DE_AZIONE_RAGG 
               where ( ((trunc(sysdate) BETWEEN  trunc(DATINIZIOVAL) AND trunc(DATFINEVAL))
               and (codServizio = nvl(?,''))) or (prgAzioniRagg = nvl(?,-1)) )
               order by ordine_gruppo, strDescrizione
" />

<STATEMENT name="GET_PROGRAMMI_ASSOCIATI_PATTO"
	query="
	select distinct de_servizio.codmonoprogramma
	from am_patto_lavoratore inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE)
  	inner join or_percorso_concordato on (to_number(am_lav_patto_scelta.strchiavetabella) = or_percorso_concordato.prgpercorso)
  	inner join or_colloquio coll on (or_percorso_concordato.prgcolloquio = coll.prgcolloquio)
  	inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
  	inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
  	inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
	where am_patto_lavoratore.PRGPATTOLAVORATORE = ? and am_lav_patto_scelta.CODLSTTAB = 'OR_PER' and coll.datfineprogramma is null" />
	
	
<STATEMENT name="GET_PROGRAMMA_ASSOCIATO_COLLOQUIO"
	query="
	select de_servizio.codmonoprogramma
	from or_colloquio coll
  	inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
	where coll.prgcolloquio = ?" />
	
<STATEMENT name="GET_ALL_PROGRAMMI_ASSOCIATI_PATTO"
	query="
	select distinct de_servizio.codmonoprogramma
	from am_patto_lavoratore inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE)
  	inner join or_percorso_concordato on (to_number(am_lav_patto_scelta.strchiavetabella) = or_percorso_concordato.prgpercorso)
  	inner join or_colloquio coll on (or_percorso_concordato.prgcolloquio = coll.prgcolloquio)
  	inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
  	inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
  	inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
	where am_patto_lavoratore.PRGPATTOLAVORATORE = ? and am_lav_patto_scelta.CODLSTTAB = 'OR_PER'" />
	
<STATEMENT name="GET_ALL_PROGRAMMI_ASSOCIATI_PATTO_PRGCOLLOQUIO"
	query="
	select distinct coll.prgcolloquio, de_servizio.codmonoprogramma
	from am_patto_lavoratore inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE)
  	inner join or_percorso_concordato on (to_number(am_lav_patto_scelta.strchiavetabella) = or_percorso_concordato.prgpercorso)
  	inner join or_colloquio coll on (or_percorso_concordato.prgcolloquio = coll.prgcolloquio)
  	inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
  	inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
  	inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
	where am_patto_lavoratore.PRGPATTOLAVORATORE = ? and am_lav_patto_scelta.CODLSTTAB = 'OR_PER'" />
	
<STATEMENT name="GET_ESITO_AZIONE"
	query="
	select nvl(de_esito.flgstatoconcluso, 'N') flgstatoconcluso
	from de_esito
	where de_esito.codesito = ?" />
	


<STATEMENT name="GET_PARTECIPANTE_PROFILING_PATTO"
    query="SELECT
                    pl.prgpattolavoratore,
                    pl.numindicesvantaggio,
                    pl.numindicesvantaggio2, pl.numindicesvantaggio150, pl.numprofiling, 
                    pl.codtipopatto, to_char(pl.datscadconferma, 'dd/mm/yyyy') AS datscadconferma,
                    to_char(did.datdichiarazione, 'dd/mm/yyyy') AS datdichiarazione,
                    to_char(pl.datriferimento, 'dd/mm/yyyy') AS datriferimento,
                    to_char(pl.datriferimento150, 'dd/mm/yyyy') AS datriferimento150,
                    to_char(pl.datstipula, 'dd/mm/yyyy') AS datstipula, pl.datstipula as dataSort1,
                    pl.codcpi, to_char(pl.dtmmod, 'dd/mm/yyyy') AS dtmmod, pl.strentecodicefiscale, pl.codsede,
                    to_char(pl.datfine, 'dd/mm/yyyy') AS datfine,
                    pl.codmotivofineatto,
                    (case
                      when
                        (select t.numprotocollo numprotocollo
                        from
                        (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                am_doc.numannoprot numannoprot
                        from am_patto_lavoratore patto
                        inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                        inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                        am_doc.cdnlavoratore = patto.cdnlavoratore)
                        where patto.cdnlavoratore = ? and 
                        ( (patto.codtipopatto in ('MGG', 'DOTE', 'DOTE_IA')) or
                          (getEsisteProgrammaPatto(patto.prgpattolavoratore, '''MGG'',''DOTE'',''DOTE_IA''') &gt; 0)
                        )
                        and patto.codstatoatto = 'PR'
                        and am_doc.codtipodocumento in ('PT297', 'ACLA')
                        and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                        group by patto.prgpattolavoratore, am_doc.numannoprot
                        order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                        where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                      ) is not null then (select t.numprotocollo numprotocollo
                                          from
                                          (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                          		  am_doc.numannoprot numannoprot
                                          from am_patto_lavoratore patto
                                          inner join am_documento_coll doc_coll on (to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                                          inner join am_documento am_doc on (am_doc.prgdocumento = doc_coll.prgdocumento and
                                          am_doc.cdnlavoratore = patto.cdnlavoratore)
                                          where patto.cdnlavoratore = ? and 
                                          ( (patto.codtipopatto in ('MGG', 'DOTE', 'DOTE_IA')) or
					                        (getEsisteProgrammaPatto(patto.prgpattolavoratore, '''MGG'',''DOTE'',''DOTE_IA''') &gt; 0)
					                      )
                                          and patto.codstatoatto = 'PR'
                                          and am_doc.codtipodocumento in ('PT297', 'ACLA')
                                          and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                                          group by patto.prgpattolavoratore, am_doc.numannoprot
                                          order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                                          where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                                        )
                           else do.numprotocollo
                      end) AS numprotocollo,
                    so.codstatooccupaz, ente.STRPARTITAIVA as pivaSoggettoPromotore
           FROM
                    am_patto_lavoratore pl
                    left join am_dich_disponibilita did on (pl.prgdichdisponibilita = did.prgdichdisponibilita)
                    left join an_vch_ente ente on (pl.CODSEDE = ente.CODSEDE AND pl.STRENTECODICEFISCALE = ente.STRCODICEFISCALE)
                    INNER JOIN am_stato_occupaz so ON so.cdnlavoratore = pl.cdnlavoratore
                    INNER JOIN am_documento_coll dc ON to_number(dc.strchiavetabella) = pl.prgpattolavoratore
                    INNER JOIN am_documento do ON do.prgdocumento = dc.prgdocumento AND do.cdnlavoratore = pl.cdnlavoratore
           WHERE	pl.cdnlavoratore = ? AND
                    ( (pl.codtipopatto in ('MGG', 'DOTE', 'DOTE_IA') and pl.strentecodicefiscale is not null) or
                      (getEsisteProgrammaPatto(pl.prgpattolavoratore, '''MGG'',''DOTE'',''DOTE_IA''') &gt; 0)
                    )
                    AND do.codtipodocumento in ('PT297', 'ACLA')
                    AND pl.codstatoatto = 'PR' 
                    AND do.codstatoatto = 'PR'
                    AND so.datfine is null 
                    order by dataSort1 desc"/>

<STATEMENT name="UPDATE_RIAPRI_CHIUDI_PROGRAMMA"
	query="UPDATE OR_COLLOQUIO
                SET DATFINEPROGRAMMA = to_date(?,'dd/mm/yyyy'),
                    NUMKLOCOLLOQUIO = ?, CDNUTMOD = ?, DTMMOD = SYSDATE
              WHERE PRGCOLLOQUIO = ?" />
              
<STATEMENT name="GET_MAX_DATA_CONCLUSIONE_PROGRAMMA"
	query="
	select to_char(max(opc.dateffettiva), 'dd/mm/yyyy') as datConclusione
	from or_percorso_concordato opc
	inner join de_esito on (opc.codesito = de_esito.codesito)
	where opc.prgcolloquio = ? and opc.dateffettiva is not null and nvl(de_esito.flgstatoconcluso, 'N') = 'S'" />
	
<STATEMENT name="GET_ALL_AZIONI_PROGRAMMA_IN_CORSO"
	query="
	select count(*) as numazioniincorso
	from or_percorso_concordato opc
	inner join de_esito on (opc.codesito = de_esito.codesito)
	where opc.prgcolloquio = ? 
	and nvl(de_esito.flgstatoconcluso, 'N') != 'S'" />
	
<STATEMENT name="GET_ALL_AZIONI_PROGRAMMA_IN_CORSO_DELETE"
	query="
	select nvl(de_esito.flgstatoconcluso, 'N') flgstatoconcluso
	from or_percorso_concordato opc
	inner join de_esito on (opc.codesito = de_esito.codesito)
	where opc.prgcolloquio = ?" />

<STATEMENT name="GET_CHECK_INS_QUERY_TSPROGRAMMA"
	query="
		select flgAttivo, strSqlQuery, strMessErrore
		from ts_programma 
		where codMonoErr = ? and codTsProgramma = ?
" />

<STATEMENT name="GET_PROGRAMMA_COLLOQUIO_APERTO"
	query="
		select count(*) AS numProgrammiAperti
		from or_colloquio coll
		inner join de_servizio on (coll.codServizio = de_servizio.codServizio)
		where coll.cdnLavoratore = ?
		and de_servizio.codmonoprogramma is not null
		and de_servizio.codmonoprogramma = (select servizio.codmonoprogramma from de_servizio servizio where servizio.codServizio = ?)
		and coll.datfineprogramma is null
" />

<STATEMENT name="GET_SERVIZIO_INI"
	query="
		select codtsprogramma from de_servizio
		where codtsprogramma = 'INI' and codservizio = ?
" />

<STATEMENT name="GET_SERVIZIO_REI"
	query="
		select codtsprogramma from de_servizio
		where codtsprogramma = 'REI' and codservizio = ?
" />

<STATEMENT name="GET_SERVIZIO_UMBAT"
	query="
		select codtsprogramma from de_servizio
		where codtsprogramma = 'UMBAT' and codservizio = ?
" />

<STATEMENT name="GET_PROGRAMMA_COLLOQUIO_APERTO_AGGIORNA"
	query="
		select count(*) AS numProgrammiAperti
		from or_colloquio coll
		inner join de_servizio on (coll.codServizio = de_servizio.codServizio)
		where coll.cdnLavoratore = ? and coll.prgcolloquio != ?
		and de_servizio.codmonoprogramma is not null
		and de_servizio.codmonoprogramma = (select servizio.codmonoprogramma from de_servizio servizio where servizio.codServizio = ?)
		and coll.datfineprogramma is null
" />

<STATEMENT name="GET_PROGRAMMI_APERTI_SENZA_AZIONI"
	query="
	select count(*) numprogrammiapertinoaz
	from or_colloquio coll
  	left join or_percorso_concordato on (coll.prgcolloquio = or_percorso_concordato.prgcolloquio)
	where coll.cdnlavoratore = ? and coll.datfineprogramma is null and or_percorso_concordato.prgcolloquio is null
" />

<STATEMENT name="GET_PROGRAMMI_INSERIMENTO_PATTO"
	query="
	select distinct de_servizio.codmonoprogramma
	from or_colloquio coll
	inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
  	inner join or_percorso_concordato on (coll.prgcolloquio = or_percorso_concordato.prgcolloquio)
	where coll.cdnlavoratore = ? and coll.datfineprogramma is null
	and trunc(or_percorso_concordato.datstimata) &gt;= to_date(?, 'dd/mm/yyyy')
	and (? is null or trunc(or_percorso_concordato.datstimata) &lt;= to_date(?, 'dd/mm/yyyy')) 
	and not exists (
                   SELECT aps.prgpattolavoratore
                     FROM am_lav_patto_scelta aps, am_patto_lavoratore apl
                    WHERE apl.cdnlavoratore = coll.cdnlavoratore
                      AND to_number(aps.strchiavetabella) = or_percorso_concordato.prgpercorso
                      AND aps.prgpattolavoratore = apl.prgpattolavoratore
                      AND aps.codlsttab = 'OR_PER'
                      )" />
                      
<STATEMENT name="GET_PROGRAMMA_APERTO_DA_COLLOQUIO"
	query="
		select count(*) AS numProgrammiAperti
		from or_colloquio coll 
		inner join de_servizio on (coll.codServizio = de_servizio.codServizio)
		where coll.cdnLavoratore = ? and coll.prgcolloquio != ?
		and de_servizio.codmonoprogramma is not null
		and de_servizio.codmonoprogramma = (select servizio1.codmonoprogramma 
										    from or_colloquio coll1 
										    inner join de_servizio servizio1 on (coll1.codServizio = servizio1.codServizio)
										    where coll1.prgcolloquio = ?)
		and coll.datfineprogramma is null
" />
<STATEMENT name="GET_EnteAccreditato_SIFER_Dati_patto"
    query="SELECT distinct pl.prgpattolavoratore,
                    pl.numindicesvantaggio, pl.strentecodicefiscale, pl.codsede,
                    pl.numindicesvantaggio2, pl.numindicesvantaggio150, pl.numprofiling,
                    pl.codtipopatto, to_char(pl.datscadconferma, 'dd/mm/yyyy') AS datscadconferma,
                    to_char(pl.datriferimento, 'dd/mm/yyyy') AS datriferimento, to_char(pl.datriferimento150, 'dd/mm/yyyy') AS datriferimento150,
                    to_char(pl.datstipula, 'dd/mm/yyyy') AS datstipula,
                    to_char(pl.dtmmod, 'dd/mm/yyyy hh24:mi') AS dtmmod,
                    pl.codcpi,
                    to_char(pl.datfine, 'dd/mm/yyyy') AS datfine,
                    pl.codmotivofineatto,
                    (case
                      when
                        (select t.numprotocollo numprotocollo
                        from
                        (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                am_doc.numannoprot numannoprot
                        from am_patto_lavoratore patto
                        inner join am_documento am_doc ON (am_doc.cdnlavoratore = patto.cdnlavoratore)
           				inner join am_documento_coll doc_coll ON (am_doc.prgdocumento = doc_coll.prgdocumento and 
           				to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                        where patto.cdnlavoratore = ?
                        and am_doc.codtipodocumento in ('PT297', 'ACLA')
                        and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                        group by patto.prgpattolavoratore, am_doc.numannoprot
                        order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                        where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                      ) is not null then (select t.numprotocollo numprotocollo
                                          from
                                          (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                          		  am_doc.numannoprot numannoprot
                                          from am_patto_lavoratore patto
                                          inner join am_documento am_doc ON (am_doc.cdnlavoratore = patto.cdnlavoratore)
           								  inner join am_documento_coll doc_coll ON (am_doc.prgdocumento = doc_coll.prgdocumento and 
           								  to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                                          where patto.cdnlavoratore = ?
                                          and am_doc.codtipodocumento in ('PT297', 'ACLA')
                                          and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                                          group by patto.prgpattolavoratore, am_doc.numannoprot
                                          order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                                          where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                                        )
                           else do.numprotocollo
                      end) AS numprotocollo, coll.prgcolloquio, coll.codservizio,
                      to_char(dd.datdichiarazione, 'dd/mm/yyyy') AS datdichiarazione
           FROM
                    am_patto_lavoratore pl
                    INNER JOIN or_colloquio coll on (pl.cdnlavoratore = coll.cdnlavoratore)
           			INNER JOIN de_servizio on (coll.codservizio = de_servizio.codservizio) 
		   			INNER JOIN or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
	       			INNER JOIN am_lav_patto_scelta scelta on (pl.prgpattolavoratore = scelta.prgpattolavoratore
	        			and per.prgpercorso = to_number(scelta.strchiavetabella)
	        			and scelta.codlsttab = 'OR_PER')
                    INNER JOIN am_documento do ON (do.cdnlavoratore = pl.cdnlavoratore)
           			INNER JOIN am_documento_coll dc ON (do.prgdocumento = dc.prgdocumento and to_number(dc.strchiavetabella) = pl.prgpattolavoratore)
           			LEFT JOIN am_dich_disponibilita dd ON (pl.prgdichdisponibilita = dd.prgdichdisponibilita and dd.codstatoatto = 'PR')
           WHERE	pl.cdnlavoratore = ? 
           			AND de_servizio.codservizio in ('186', 'L14_2018', 'L14_2019', 'NGG')
                    AND do.codtipodocumento in ('PT297', 'ACLA')
                    AND pl.codstatoatto = 'PR'
                    AND do.codstatoatto = 'PR' " />
                    
<STATEMENT name="GET_EnteAccreditato_SIFER_Dati_patto_Area1"
    query="SELECT distinct pl.prgpattolavoratore,
                    pl.numindicesvantaggio, pl.strentecodicefiscale, pl.codsede,
                    pl.numindicesvantaggio2, pl.numindicesvantaggio150, pl.numprofiling,
                    pl.codtipopatto, to_char(pl.datscadconferma, 'dd/mm/yyyy') AS datscadconferma,
                    to_char(pl.datriferimento, 'dd/mm/yyyy') AS datriferimento, to_char(pl.datriferimento150, 'dd/mm/yyyy') AS datriferimento150,
                    to_char(pl.datstipula, 'dd/mm/yyyy') AS datstipula,
                    to_char(pl.dtmmod, 'dd/mm/yyyy hh24:mi') AS dtmmod,
                    pl.codcpi,
                    to_char(pl.datfine, 'dd/mm/yyyy') AS datfine,
                    pl.codmotivofineatto,
                    (case
                      when
                        (select t.numprotocollo numprotocollo
                        from
                        (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                am_doc.numannoprot numannoprot
                        from am_patto_lavoratore patto
                        inner join am_documento am_doc ON (am_doc.cdnlavoratore = patto.cdnlavoratore)
           				inner join am_documento_coll doc_coll ON (am_doc.prgdocumento = doc_coll.prgdocumento and 
           				to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                        where patto.cdnlavoratore = ?
                        and am_doc.codtipodocumento in ('PT297', 'ACLA')
                        and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                        group by patto.prgpattolavoratore, am_doc.numannoprot
                        order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                        where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                      ) is not null then (select t.numprotocollo numprotocollo
                                          from
                                          (select min(am_doc.numprotocollo) numprotocollo, patto.prgpattolavoratore prgpattolavoratore,
                                          		  am_doc.numannoprot numannoprot
                                          from am_patto_lavoratore patto
                                          inner join am_documento am_doc ON (am_doc.cdnlavoratore = patto.cdnlavoratore)
				           				  inner join am_documento_coll doc_coll ON (am_doc.prgdocumento = doc_coll.prgdocumento and 
				           				  to_number(doc_coll.strchiavetabella) = patto.prgpattolavoratore)
                                          where patto.cdnlavoratore = ? 
                                          and am_doc.codtipodocumento in ('PT297', 'ACLA')
                                          and am_doc.codstatoatto = 'AU' and am_doc.codmotannullamentoatto = 'RIS'
                                          group by patto.prgpattolavoratore, am_doc.numannoprot
                                          order by patto.prgpattolavoratore asc, am_doc.numannoprot asc) t
                                          where t.prgpattolavoratore = pl.prgpattolavoratore and rownum = 1
                                        )
                           else do.numprotocollo
                      end) AS numprotocollo, coll.prgcolloquio, coll.codservizio,
                      to_char(dd.datdichiarazione, 'dd/mm/yyyy') AS datdichiarazione
           FROM
                    am_patto_lavoratore pl
                    INNER JOIN or_colloquio coll on (pl.cdnlavoratore = coll.cdnlavoratore)
           			INNER JOIN de_servizio on (coll.codservizio = de_servizio.codservizio) 
		   			INNER JOIN or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
	       			INNER JOIN am_lav_patto_scelta scelta on (pl.prgpattolavoratore = scelta.prgpattolavoratore
	        			and per.prgpercorso = to_number(scelta.strchiavetabella)
	        			and scelta.codlsttab = 'OR_PER')
                    INNER JOIN am_documento do ON (do.cdnlavoratore = pl.cdnlavoratore)
           			INNER JOIN am_documento_coll dc ON (do.prgdocumento = dc.prgdocumento and to_number(dc.strchiavetabella) = pl.prgpattolavoratore)
           			LEFT JOIN am_dich_disponibilita dd ON (pl.prgdichdisponibilita = dd.prgdichdisponibilita and dd.codstatoatto = 'PR')
           WHERE    pl.cdnlavoratore = ?
          			AND de_servizio.codservizio in ('186', 'NGG')
                    AND do.codtipodocumento in ('PT297', 'ACLA')
                    AND pl.codstatoatto = 'PR'
                    AND do.codstatoatto = 'PR' " />

<STATEMENT name="GET_PATTI_AREA1"
    query="SELECT count(*) AS numPattiArea1
           FROM am_patto_lavoratore pl
           INNER JOIN or_colloquio coll on (pl.cdnlavoratore = coll.cdnlavoratore)
           INNER JOIN de_servizio on (coll.codservizio = de_servizio.codservizio) 
		   INNER JOIN or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
	       INNER JOIN am_lav_patto_scelta scelta on (pl.prgpattolavoratore = scelta.prgpattolavoratore
	        		and per.prgpercorso = to_number(scelta.strchiavetabella)
	        		and scelta.codlsttab = 'OR_PER')
           INNER JOIN am_documento do ON (do.cdnlavoratore = pl.cdnlavoratore)
           INNER JOIN am_documento_coll dc ON (do.prgdocumento = dc.prgdocumento AND to_number(dc.strchiavetabella) = pl.prgpattolavoratore)
	       WHERE pl.cdnlavoratore = ?
	       		AND de_servizio.codservizio in ('186', 'NGG')
                 AND do.codtipodocumento in ('PT297', 'ACLA')
                 AND pl.codstatoatto = 'PR'
                 AND do.codstatoatto = 'PR' " />
                 

<STATEMENT name="GET_COLLOQUIO_SEP_ASSOCIATO_PATTO_UMB"
           query="
			select distinct coll.prgcolloquio
			from am_patto_lavoratore patto
			inner join or_colloquio coll on (patto.cdnlavoratore = coll.cdnlavoratore)
			inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
			inner join am_lav_patto_scelta scelta on (scelta.prgpattolavoratore = patto.prgpattolavoratore
				and to_number(scelta.strchiavetabella) = per.prgpercorso and scelta.codlsttab = 'OR_PER')
			inner join de_azione az on (per.prgazioni = az.prgazioni)
			inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			inner join ts_generale on (ts_generale.prggenerale = 1)
			where (patto.prgpattolavoratore = ?) and (ts_generale.codregionesil = '10')
			and (ragg.codservizio = 'SEP') and (coll.datfineprogramma is null) 
			and (per.codesito in ('AVV', 'PRO'))
			and (az.strdescrizione like 'A%' or az.strdescrizione like 'B%' or az.strdescrizione like 'D%')
" />

<STATEMENT name="GET_COLLOQUIO_SEP_ASSOCIATO_PATTO297_UMB_APERTO"
           query="
			select distinct coll.prgcolloquio
			from am_patto_lavoratore patto
			inner join or_colloquio coll on (patto.cdnlavoratore = coll.cdnlavoratore)
			inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
			inner join am_lav_patto_scelta scelta on (scelta.prgpattolavoratore = patto.prgpattolavoratore
				and to_number(scelta.strchiavetabella) = per.prgpercorso and scelta.codlsttab = 'OR_PER')
			inner join de_azione az on (per.prgazioni = az.prgazioni)
			inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			inner join ts_generale on (ts_generale.prggenerale = 1)
			where (patto.cdnlavoratore = ?) and (patto.flgpatto297 = 'S') and (patto.datfine is null) and (ts_generale.codregionesil = '10')
			and (ragg.codservizio = 'SEP') and (coll.datfineprogramma is null) 
			and (per.codesito in ('AVV', 'PRO'))
			and (az.strdescrizione like 'A%' or az.strdescrizione like 'B%' or az.strdescrizione like 'D%')
" />

<STATEMENT name="UPDATE_COLLOQUIO_SEP_ASSOCIATO_PATTO_UMB"
           query="
        update or_percorso_concordato set
        	codesito = (case
        					when codesito = 'AVV' then 'INT'
        					when codesito = 'PRO' then 'NA'
        					else codesito
        				end),
        	codesitorendicont = (case
		        					when codesito = 'AVV' then 'E'
		        					when codesito = 'PRO' then 'A'
		        					else codesitorendicont
		        				end),
		    cdnutmod = ?, dtmmod = sysdate
        where prgpercorso in (
			select per.prgpercorso
			from am_patto_lavoratore patto
			inner join or_colloquio coll on (patto.cdnlavoratore = coll.cdnlavoratore)
			inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
			inner join am_lav_patto_scelta scelta on (scelta.prgpattolavoratore = patto.prgpattolavoratore
				and to_number(scelta.strchiavetabella) = per.prgpercorso and scelta.codlsttab = 'OR_PER')
			inner join de_azione az on (per.prgazioni = az.prgazioni)
			inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			inner join ts_generale on (ts_generale.prggenerale = 1)
			where (patto.prgpattolavoratore = ?) and (ts_generale.codregionesil = '10')
			and (ragg.codservizio = 'SEP') and (coll.datfineprogramma is null) 
			and (per.codesito in ('AVV', 'PRO'))
			and (az.strdescrizione like 'A%' or az.strdescrizione like 'B%' or az.strdescrizione like 'D%')
		)
" />

<STATEMENT name="UPDATE_COLLOQUIO_SEP_ASSOCIATO_PATTO297_UMB_APERTO"
           query="
        update or_percorso_concordato set
        	codesito = (case
        					when codesito = 'AVV' then 'INT'
        					when codesito = 'PRO' then 'NA'
        					else codesito
        				end),
        	codesitorendicont = (case
		        					when codesito = 'AVV' then 'E'
		        					when codesito = 'PRO' then 'A'
		        					else codesitorendicont
		        				end),
		    cdnutmod = ?, dtmmod = sysdate
        where prgpercorso in (
			select per.prgpercorso
			from am_patto_lavoratore patto
			inner join or_colloquio coll on (patto.cdnlavoratore = coll.cdnlavoratore)
			inner join or_percorso_concordato per on (coll.prgcolloquio = per.prgcolloquio)
			inner join am_lav_patto_scelta scelta on (scelta.prgpattolavoratore = patto.prgpattolavoratore
				and to_number(scelta.strchiavetabella) = per.prgpercorso and scelta.codlsttab = 'OR_PER')
			inner join de_azione az on (per.prgazioni = az.prgazioni)
			inner join de_azione_ragg ragg on (az.prgazioneragg = ragg.prgazioniragg)
			inner join ts_generale on (ts_generale.prggenerale = 1)
			where (patto.cdnlavoratore = ?) and (patto.flgpatto297 = 'S') and (patto.datfine is null) and (ts_generale.codregionesil = '10')
			and (ragg.codservizio = 'SEP') and (coll.datfineprogramma is null) 
			and (per.codesito in ('AVV', 'PRO'))
			and (az.strdescrizione like 'A%' or az.strdescrizione like 'B%' or az.strdescrizione like 'D%')
		)
" />

<STATEMENT name="GET_FASCIA_PROFILING_150"
           query="
			SELECT NUMPROFILING 
			FROM DE_PROFILING_150 
			WHERE to_number(?,'9.9999999999') BETWEEN FASCIA_DA AND FASCIA_A
" />

<STATEMENT name="GET_SERVIZIO_PROGRAMMI_ASSOCIATI_PATTO"
	query="
	select distinct de_servizio.codservizio
	from am_patto_lavoratore inner join am_lav_patto_scelta on (am_patto_lavoratore.PRGPATTOLAVORATORE = am_lav_patto_scelta.PRGPATTOLAVORATORE)
  	inner join or_percorso_concordato on (to_number(am_lav_patto_scelta.strchiavetabella) = or_percorso_concordato.prgpercorso)
  	inner join or_colloquio coll on (or_percorso_concordato.prgcolloquio = coll.prgcolloquio)
  	inner join de_servizio on (coll.codservizio = de_servizio.codservizio)
  	inner join de_azione on (or_percorso_concordato.prgazioni = de_azione.prgazioni)
  	inner join de_azione_ragg on (de_azione.prgazioneragg = de_azione_ragg.prgazioniragg)
	where am_patto_lavoratore.PRGPATTOLAVORATORE = ? and am_lav_patto_scelta.CODLSTTAB = 'OR_PER' and de_servizio.codmonoprogramma = ?
	and coll.datfineprogramma is null" />	
<STATEMENT name="UPDATE_CPI_CORRENTE_PATTO"
	query="UPDATE AM_PATTO_LAVORATORE
              SET CODCPI = ?, NUMKLOPATTOLAVORATORE = ?, CDNUTMOD = ?
              WHERE PRGPATTOLAVORATORE = ?" />
                  
<STATEMENT name="GetVerificaNeetGGSistema"
           query="
			select PRGVERIFICANEET, 
				DATRIFERIMENTO, 
				to_char(DATRIFERIMENTO, 'dd/mm/yyyy') as strDatRif,
				ygNeet.CODVERIFICANEET, 
				DE_VERIFICA_NEET.strdescrizione as strTipoVerificaNeet,
				decode(ygNeet.FLGNEET, 'S', 'OK', 'N', 'KO', 'KO') as strFlgNeet, 
				ygNeet.CODESITO,
				ygNeet.CODESITO || ' - ' ||  MN_YG_ESITO_NEET.strdescrizione strEsitoMin
				from AM_YG_VERIFICA_NEET ygNeet
				inner join MN_YG_ESITO_NEET on (MN_YG_ESITO_NEET.CODESITO = ygNeet.CODESITO)
				left join DE_VERIFICA_NEET on (DE_VERIFICA_NEET.CODVERIFICANEET = ygNeet.CODVERIFICANEET)
				where ygNeet.CDNLAVORATORE = ? and DATRIFERIMENTO in (
				select max(DATRIFERIMENTO) from AM_YG_VERIFICA_NEET where CDNLAVORATORE = ygNeet.CDNLAVORATORE)
" />


<STATEMENT name="GetVerificaNeetGGFromPrg"
           query="
			select PRGVERIFICANEET, 
				ygNeet.STRCODICEFISCALE,
				to_char(DATRIFERIMENTO, 'dd/mm/yyyy') as strDatRif,
				ygNeet.CODVERIFICANEET,
				decode(ygNeet.FLGNEET, 'S', 'OK', 'N', 'KO', 'KO') as strFlgNeet, 
				decode(ygNeet.FLGETA, 'S', 'Si', 'N', 'No', '') as strFlgEta,
      			decode(ygNeet.FLGRES, 'S', 'Si', 'N', 'No', '') as strFlgRes,
      			decode(ygNeet.FLGDIS, 'S', 'Si', 'N', 'No', '') as strFlgDis,
      			decode(ygNeet.FLGSCUOLA, 'S', 'Si', 'N', 'No', '') as strFlgScuola,
      			decode(ygNeet.FLGUNI, 'S', 'Si', 'N', 'No', '') as strFlgUni,
				ygNeet.CODESITO ,
				utIns.STRCOGNOME || ' ' || utIns.STRNOME || ' - ' || to_char( ygNeet.DTMINS, 'dd/mm/yyyy hh24:mi') as utenteIns, 
				utMod.STRCOGNOME || ' ' || utMod.STRNOME || ' - ' || to_char( ygNeet.DTMMOD, 'dd/mm/yyyy hh24:mi') as utenteMod
				from AM_YG_VERIFICA_NEET ygNeet
				inner join ts_utente utIns on (utIns.cdnut =  ygNeet.CDNUTINS)
      		 	inner join ts_utente utMod on (utMod.cdnut =  ygNeet.CDNUTMOD)
				where PRGVERIFICANEET = ? 
" />

<STATEMENT name="SELECT_COMBO_MN_YG_ESITO_NEET" 
query="select CODESITO as CODICE, 
                  STRDESCRIZIONE || DECODE(SYSDATE,    
                                    GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL),&apos; (scaduto)&apos;,
                                    LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),&apos; (scaduto)&apos;, 
                                    &apos;&apos;) AS DESCRIZIONE
                  from MN_YG_ESITO_NEET order by STRDESCRIZIONE" />

<STATEMENT name="SELECT_COMBO_DE_VERIFICA_NEET" query="select CODVERIFICANEET as CODICE, 
                  STRDESCRIZIONE || DECODE(SYSDATE,    
                                    GREATEST(SYSDATE, DATINIZIOVAL, DATFINEVAL),&apos; (scaduto)&apos;,
                                    LEAST(SYSDATE, DATINIZIOVAL, DATFINEVAL),&apos; (scaduto)&apos;, 
                                    &apos;&apos;) AS DESCRIZIONE
                  from DE_VERIFICA_NEET order by STRDESCRIZIONE" />
                  
<STATEMENT name="GET_ALL_NEET_GG"
	query="select PRGVERIFICANEET,
			to_char(ygNeet.DTMINS, 'dd/mm/yyyy hh24:mi') as strDatVerifica,  
			DE_VERIFICA_NEET.strdescrizione as strTipoVerificaNeet,
			to_char(ygNeet.DATRIFERIMENTO, 'dd/mm/yyyy') as strDatRif,  
			decode(ygNeet.FLGNEET, 'S', 'OK', 'N', 'KO', 'KO') as strFlgNeet,
			ygNeet.CODESITO || ' - ' ||  MN_YG_ESITO_NEET.strdescrizione strEsitoMin
			from AM_YG_VERIFICA_NEET ygNeet
			inner join MN_YG_ESITO_NEET on (MN_YG_ESITO_NEET.CODESITO = ygNeet.CODESITO)
			left join DE_VERIFICA_NEET on (DE_VERIFICA_NEET.CODVERIFICANEET = ygNeet.CODVERIFICANEET)
			where CDNLAVORATORE = ? 
 			order by ygNeet.DTMINS desc"/>
 			
<STATEMENT name="GET_FLAG_VERIFICA_NEET"
 query="SELECT STRDESCRIZIONE ,
	        DATINIZIOVAL ,
	        FLG_CK_ETA ,
	        DATFINEVAL ,
	        FLG_CK_SCU ,
	        CODVERIFICANEET ,
	        FLG_CK_RES ,
	        FLG_CK_UNI ,
	        FLG_CK_DIS
        FROM DE_VERIFICA_NEET
        WHERE CODVERIFICANEET = ?			
"/>
<STATEMENT name="INSERT_AM_YG_VERIFICA_NEET"
query="
INSERT
    INTO AM_YG_VERIFICA_NEET
      (	
      	PRGVERIFICANEET,
        FLGSCUOLA ,
        CDNUTINS ,
        CDNLAVORATORE ,
        CODVERIFICANEET ,
        DTMMOD ,
        CODESITO ,
        FLGUNI ,
        DATRIFERIMENTO ,
        FLGDIS ,
        STRCODICEFISCALE ,
        FLGETA ,
        CDNUTMOD ,
        FLGNEET ,
        FLGRES ,
        DTMINS
      )
      VALUES
      (	
      	? ,
        ? ,
        ? ,
        ? ,
        ? ,
        sysdate ,
        ? ,
        ? ,
        ? ,
        ? ,
        ? ,
        ? ,
        ? ,
        ? ,
        ? ,
        sysdate
      )
"/>

<STATEMENT name="GET_AZIONI_AREA1"
    query="SELECT count(distinct pc.prgpercorso) AS numPercorso
           FROM OR_PERCORSO_CONCORDATO PC
			 INNER JOIN OR_COLLOQUIO CO ON (PC.PRGCOLLOQUIO = CO.PRGCOLLOQUIO)
			 INNER JOIN AM_PATTO_LAVORATORE PATTO ON (CO.CDNLAVORATORE = PATTO.CDNLAVORATORE)
			 INNER JOIN AM_LAV_PATTO_SCELTA SCELTA ON (PATTO.PRGPATTOLAVORATORE = SCELTA.PRGPATTOLAVORATORE 
			 	AND TO_NUMBER(SCELTA.STRCHIAVETABELLA) = PC.PRGPERCORSO AND SCELTA.CODLSTTAB = 'OR_PER')
			 INNER JOIN DE_AZIONE AZ ON AZ.PRGAZIONI = PC.PRGAZIONI
			 INNER JOIN DE_SERVIZIO ON CO.CODSERVIZIO = DE_SERVIZIO.CODSERVIZIO
			 INNER JOIN TS_PROFILATURA_UTENTE PROFILATURA ON PC.CDNUTMOD = PROFILATURA.CDNUT
			 INNER JOIN TS_GRUPPO ON PROFILATURA.CDNGRUPPO = TS_GRUPPO.CDNGRUPPO
			 INNER JOIN TS_TIPO_GRUPPO ON TS_GRUPPO.CDNTIPOGRUPPO = TS_TIPO_GRUPPO.CDNTIPOGRUPPO
			 WHERE CO.CDNLAVORATORE = ? AND AZ.CODAZIONESIFER IS NOT NULL AND AZ.CODMISURA IS NOT NULL
			 AND PATTO.CODSTATOATTO = 'PR'
			 AND DE_SERVIZIO.CODSERVIZIO IN ('186', 'NGG')
			 AND TS_TIPO_GRUPPO.CODTIPO = 'S'
" />

<STATEMENT name="GET_PROGRAMMA_DATA_ADESIONE_PORTALE"
		  query="select to_char(max(bd.DATADESIONE), 'dd/mm/yyyy') SDATADESIONE
		  		from bd_adesione bd
		  		inner join an_lavoratore lav on bd.strcodicefiscale = lav.strcodicefiscale
		  		where lav.cdnlavoratore = ? and trunc(bd.DATADESIONE) &lt;= to_date(?, 'dd/mm/yyyy') and bd.codbandoprogramma = ?" />
		  		
<STATEMENT name="GET_PROGRAMMA_MAX_DATA_ADESIONE_PORTALE"
		  query="select to_char(max(bd.DATADESIONE), 'dd/mm/yyyy') SDATADESIONE
		  		from bd_adesione bd
		  		inner join an_lavoratore lav on bd.strcodicefiscale = lav.strcodicefiscale
		  		where lav.cdnlavoratore = ? and bd.codbandoprogramma = ?" />
		
<STATEMENT name="GET_DATI_PROFILING_DID_150"
		  query="select decprofiling, datprofiling, numprofiling, strprofiling, codtitolo
            	from (
			  		select am_conf_did.decprofiling, to_char(am_conf_did.datprofiling, 'dd/mm/yyyy') as datprofiling, de_prof_150.numprofiling, 
	                 (case when to_number(nvl(
	                   					(select num from ts_config_loc 
	                   					 where codtipoconfig = 'PROF_150' 
	                   					 and strcodrif = (select codprovinciasil from ts_generale where prggenerale=1)), 0)) > 0 
	                   	   then de_prof_150.strprofiling
	               		   else ''
	            	  end) as strprofiling, am_conf_did.codtitolo
		            from am_conferimento_did am_conf_did
		            left join de_profiling_150 de_prof_150 on (de_prof_150.fascia_da &lt;= am_conf_did.decprofiling and de_prof_150.fascia_a &gt;= am_conf_did.decprofiling)
		            where cdnLavoratore = ? 
		            			and am_conf_did.codpftipoevento = 'C' and am_conf_did.codmonostatoinvio = 'I'  
		                        and exists (select 1 from am_dich_disponibilita dich
		                        inner join am_elenco_anagrafico ele on ele.prgelencoanagrafico = dich.prgelencoanagrafico
		                        where dich.codstatoatto = 'PR' and dich.datfine is null and ele.datcan is null
		                        and trunc(am_conf_did.datdid) = trunc(dich.datdichiarazione)
		                        and am_conf_did.cdnLavoratore = ele.cdnLavoratore)
		                        and trunc(am_conf_did.datprofiling) &lt;= to_date(?,'dd/mm/yyyy')
		            order by am_conf_did.datprofiling desc
	            ) T where rownum = 1" />
	            
<STATEMENT name="GET_DATA_ADESIONE_GG"
	query="select to_char(max(perc.datadesionegg),'dd/mm/yyyy') as datadesionegg
		   from or_colloquio coll
		   inner join or_percorso_concordato perc on (coll.prgcolloquio = perc.prgcolloquio)
		   inner join de_azione az on (perc.prgazioni = az.prgazioni)
		   where coll.prgcolloquio = ? 
		   	 and az.flgadesionegg = 'S' " />

<STATEMENT name="GET_SOSPENSIONI_DID_PROGRAMMA"     
	query="select 
    	case
        	when trunc(datinizio) &lt;  to_date(?,'dd/MM/YYYY')
        		then ?
        	else to_char(datinizio, 'dd/MM/YYYY')
    	end as datainizio,
    	case
        when trunc(nvl(datfine, sysdate)) &gt;  to_date(?,'dd/MM/YYYY')
        	  then ?
        	else to_char(nvl(datfine, sysdate), 'dd/MM/YYYY')
    	end as datafine
	from am_stato_occupaz
where cdnlavoratore=? and codstatooccupaz='B1'
	and trunc(datinizio) &lt;= to_date(?,'dd/MM/YYYY')
	and trunc(nvl(datfine, sysdate)) &gt;= to_date(?,'dd/MM/YYYY') " />
	
<STATEMENT name="GET_DATI_YG_PROFILING"
	query="select t.prgygprofiling, t.datcalcolo, t.numindice2
		   from (
				select prgygprofiling, to_char(dtmcalcolo, 'dd/mm/yyyy') datcalcolo, numindice2
				from AM_YG_PROFILING
				where cdnlavoratore=?
				and trunc(dtmcalcolo) &lt;= to_date(?,'dd/mm/yyyy')
				order by dtmcalcolo desc, prgygprofiling desc) t
			where rownum=1 " />