/* Generated by Together */

package com.engiweb.framework.dbaccess.factory;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.engiweb.framework.dbaccess.ConnectionPoolDescriptor;
import com.engiweb.framework.dbaccess.pool.ConnectionPoolInterface;
import com.engiweb.framework.error.EMFErrorSeverity;
import com.engiweb.framework.error.EMFInternalError;

/**
 * Questa classe Ã¨ responsabile per la creazione di un ConnectionPool dato il suo descrittore questa factory invoca
 * attraverso l'introspezione la connectionPoolFactory class descritta nel file xml quando il pool viene descritto
 * 
 * @author Andrea Zoppello - andrea.zoppello@engiweb.com
 * @version 1.0
 */
public class ConnectionPoolFactory {

	static org.apache.log4j.Logger _logger = org.apache.log4j.Logger.getLogger(ConnectionPoolFactory.class.getName());

	/**
	 * Il factory method responsabile per la creazione di un pool dato il suo descrittore
	 * 
	 * @param <B>ConnectionPoolDescriptor
	 *            </B> connectionPoolDescriptor - l'oggetto descrittore del pool da creare
	 * @return un oggetto di tipo <B>ConnectionPoolInterface</B> rappresentante il pool di connessioni appena creato
	 */
	public static ConnectionPoolInterface createConnectionPool(ConnectionPoolDescriptor connectionPoolDescriptor)
			throws EMFInternalError {
		try {
			ConnectionPoolInterface returnedConnectionPool = null;
			Class connectionPoolFactoryClass = Class.forName(connectionPoolDescriptor.getConnectionPoolFactory());
			Object connectionPoolFactoryObject = connectionPoolFactoryClass.newInstance();
			Class[] parameterTypesOfFactoryMethod = new Class[] { ConnectionPoolDescriptor.class };
			Method factoryMethod;
			Object[] argumentsOfFactoryMethod = new Object[] { connectionPoolDescriptor };
			factoryMethod = connectionPoolFactoryClass.getMethod("createConnectionPool", parameterTypesOfFactoryMethod);
			returnedConnectionPool = (ConnectionPoolInterface) factoryMethod.invoke(connectionPoolFactoryObject,
					argumentsOfFactoryMethod);
			return returnedConnectionPool;
		} catch (ClassNotFoundException cnfe) {
			it.eng.sil.util.TraceWrapper.debug(_logger, "ConnectionPoolFactory::createConnectionPool:", cnfe);

			throw new EMFInternalError(EMFErrorSeverity.ERROR,
					"ConnectionPoolFactory :: createConnectionPool(ConnectionPoolDescriptor connectionPoolDescriptor) :: CLASS NOT FOUND EXCEPTION "
							+ cnfe.getMessage());
		} catch (NoSuchMethodException nsme) {
			it.eng.sil.util.TraceWrapper.debug(_logger, "ConnectionPoolFactory::createConnectionPool:", nsme);

			throw new EMFInternalError(EMFErrorSeverity.ERROR,
					"ConnectionPoolFactory :: createConnectionPool(ConnectionPoolDescriptor connectionPoolDescriptor) :: NOSUCH METHOD EXCEPTION "
							+ nsme.getMessage());
		} catch (InvocationTargetException ite) {
			it.eng.sil.util.TraceWrapper.debug(_logger, "ConnectionPoolFactory::createConnectionPool:", ite);

			Throwable e = ite.getTargetException();
			if (e instanceof EMFInternalError)
				throw ((EMFInternalError) e);
			else
				throw new EMFInternalError(EMFErrorSeverity.ERROR,
						"ConnectionPoolFactory :: createConnectionPool(ConnectionPoolDescriptor connectionPoolDescriptor) :: "
								+ ite.getMessage());
		} catch (IllegalAccessException iae) {
			it.eng.sil.util.TraceWrapper.debug(_logger, "ConnectionPoolFactory::createConnectionPool:", iae);

			throw new EMFInternalError(EMFErrorSeverity.ERROR,
					"ConnectionPoolFactory :: createConnectionPool(ConnectionPoolDescriptor connectionPoolDescriptor) :: ILLEGAL ACCESS EXCEPTION "
							+ iae.getMessage());
		} catch (InstantiationException ie) {
			it.eng.sil.util.TraceWrapper.debug(_logger, "ConnectionPoolFactory::createConnectionPool:", ie);

			throw new EMFInternalError(EMFErrorSeverity.ERROR,
					"ConnectionPoolFactory :: createConnectionPool(ConnectionPoolDescriptor connectionPoolDescriptor) :: INSTANTIATION EXCEPTION "
							+ ie.getMessage());
		} // end try-catch
	} // public static ConnectionPoolInterface
		// createConnectionPool(ConnectionPoolDescriptor connectionPoolDescriptor)
} // end Class ConnectionPoolDataSourceFactory
