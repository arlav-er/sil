/* Generated by Together */

package com.engiweb.framework.dbaccess;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * Questa classe rappresenta il SAX Handler specifico per il file xml del sottosistema dei dati
 * 
 * @author Andrea Zoppello - andrea.zoppello@engiweb.com
 * @version 1.0
 */
public class ConfiguratorContentHandler extends DefaultHandler {

	static org.apache.log4j.Logger _logger = org.apache.log4j.Logger
			.getLogger(ConfiguratorContentHandler.class.getName());

	public void startDocument() throws SAXException {
		_logger.info("inizio parsing file di configurazione");

	} // public void startDocument() throws SAXException

	public void endDocument() throws SAXException {
		_logger.info("fine parsing file di configurazione");

	} // public void endDocument() throws SAXException

	public void startElement(String namespaceURI, String localName, String rawName, Attributes attributes)
			throws SAXException {
		if (rawName.equals("CONNECTION-POOL")) {
			String par_data_source_name = null;
			String par_data_source_factory = null;
			for (int i = 0; i < attributes.getLength(); i++) {
				if (attributes.getQName(i).equals("connectionPoolName")) {
					par_data_source_name = attributes.getValue(i);
				} else if (attributes.getQName(i).equals("connectionPoolFactoryClass")) {
					par_data_source_factory = attributes.getValue(i);
				}
			} // for (i = 0; i < attributes.getLenght(); i++)
				//
				// Create ConnectionPoolDataSourceFactory
				//
			tempConnectionPoolDescriptor = new ConnectionPoolDescriptor();
			tempConnectionPoolDescriptor.setConnectionPoolName(par_data_source_name);
			tempConnectionPoolDescriptor.setConnectionPoolFactory(par_data_source_factory);
		} else if (rawName.equals("CONNECTION-POOL-PARAMETER")) {
			//
			// Sto analizzando i manager
			//
			String par_name = null;
			String par_type = null;
			String par_value = null;
			for (int i = 0; i < attributes.getLength(); i++) {
				if (attributes.getQName(i).equals("parameterName")) {
					par_name = attributes.getValue(i);
				} else if (attributes.getQName(i).equals("parameterType")) {
					par_type = attributes.getValue(i);
				} else if (attributes.getQName(i).equals("parameterValue")) {
					par_value = attributes.getValue(i);
				}
			} // end for
			tempConnectionPoolDescriptor.addConnectionPoolParameter(new ConnectionPoolParameter(par_name, par_value));
		} else if (rawName.equals("REGISTER-POOL")) {
			String registeredDataSourceName = null;
			String bindParameterValue = null;
			for (int i = 0; i < attributes.getLength(); i++) {
				if (attributes.getQName(i).equals("registeredPoolName")) {
					registeredDataSourceName = attributes.getValue(i);
				} // end if
			} // end for
			parameterRegisteredConnectionPoolNames.add(registeredDataSourceName);
		} else if (rawName.equals("DATE-FORMAT")) {
			_dateFormat = attributes.getValue("format");
		} else if (rawName.equals("TIMESTAMP-FORMAT")) {
			_timeStampFormat = attributes.getValue("format");
		} // end else//end else
	} // end startDocument

	public void endElement(String namespaceURI, String localName, String rawName) throws SAXException {
		if (rawName.equals("CONNECTION-POOL")) {
			parameterConnectionPoolDescriptors.put(tempConnectionPoolDescriptor.getConnectionPoolName(),
					tempConnectionPoolDescriptor);
		} // end if
	} // end endElement()

	/**
	 * The method for getting the list of names of the pool registered in the data-access subsystem
	 * 
	 * @return a <B>List</B> of <B>String</B> representing the names of the pools registered
	 */
	public synchronized List getRegisteredConnectionPoolNames() {
		return parameterRegisteredConnectionPoolNames;
	} // end getRegisteredConnectionPoolNames

	/**
	 * This method is used for get get a Pool Descriptor Object given the pool name
	 * 
	 * @return a <B>List</B> of <B>String</B> representing the names of the pools registered
	 */
	public synchronized ConnectionPoolDescriptor getConnectionPoolDescriptor(String connectionPoolName) {
		return (ConnectionPoolDescriptor) parameterConnectionPoolDescriptors.get(connectionPoolName);
	} // end getConnectionPoolDescriptor

	/**
	 * This method is used for retrieve the timeStamp format String
	 * 
	 * @return <B>String</B> representing the timeStamp format String
	 */
	public synchronized String getTimeStampFormat() {
		return _timeStampFormat;
	} // public synchronized String getTimeStampFormatString(){

	/**
	 * This method is used for retrieve the date format String
	 * 
	 * @return <B>String</B> representing the date format String
	 */
	public synchronized String getDateFormat() {
		return _dateFormat;
	} // public synchronized String getDateFormatString()

	public ConfiguratorContentHandler() {
		parameterRegisteredConnectionPoolNames = new ArrayList();
		parameterConnectionPoolDescriptors = new HashMap();
	} // public ConfiguratorContentHandler()

	private Map parameterConnectionPoolDescriptors;
	private List parameterRegisteredConnectionPoolNames;
	private ConnectionPoolDescriptor tempConnectionPoolDescriptor = null;
	private String _timeStampFormat = null;
	private String _dateFormat = null;
} // public class ConfigContentHandler extends DefaultHandler
