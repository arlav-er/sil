package it.eng.myportal.entity;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

// Generated Mar 1, 2012 12:28:41 PM by Hibernate Tools 3.4.0.CR1
import it.eng.myportal.entity.decodifiche.DeIdoneitaCandidatura;

/**
 * AcCandidatura generated by hbm2java
 */

@NamedQueries(
		{ @NamedQuery(name = "findAcCandidaturaCountByVacancyId", query = "SELECT COUNT(c.idAcCandidatura) FROM AcCandidatura c JOIN c.vaDatiVacancy v"
		+ " WHERE v.idVaDatiVacancy = :paramVacancyId "),
		@NamedQuery(name = "findAcCandidaturaByVacancyId", query = "SELECT c FROM AcCandidatura c JOIN c.vaDatiVacancy v"
					+ " WHERE v.idVaDatiVacancy = :paramVacancyId order by c.dtmIns asc"),
		@NamedQuery(name = "findCandidaturesById", query = "SELECT vdv FROM AcCandidatura vdv join vdv.pfPrincipal pp WHERE pp.idPfPrincipal = :idPfPrincipal  order by vdv.dtmIns desc"),
		@NamedQuery(name = "findAutoCandidaturesById", query = "SELECT vdv FROM AcCandidatura vdv join vdv.pfPrincipal pp  join vdv.cvDatiPersonali WHERE pp.idPfPrincipal = :idPfPrincipal and vdv.vaDatiVacancy is null  order by vdv.dtmIns desc"),
		
		})
@Entity
@Table(name = "ac_candidatura", schema = "myportal")
public class AcCandidatura extends AbstractEntity implements java.io.Serializable {
	private static final long serialVersionUID = 655003L;
	private Integer idAcCandidatura;

	private CvDatiPersonali cvDatiPersonali;
	/**
	 * Id dell'azienda alla quale è rivolta la candidatura
	 */
	private PfPrincipal pfPrincipal;
	private VaDatiVacancy vaDatiVacancy;
	private CvLetteraAcc cvLetteraAcc;
	private DeIdoneitaCandidatura deIdoneitaCandidatura;
	private String commento;
	//IDO 2020
	private String codProvenienzaCandidatura;
	private String noteInterne;

	// Reverse lookup
	private Set<MsgContatto> msgContattos = new HashSet<MsgContatto>(0);
	private Set<AcContatto> acContattos = new HashSet<AcContatto>(0);

	// Dati aggiuntivi provenienti da SIL solo per candidature CRESCO, la metto EAGER perchè sono al massimo 2 record
	// per candidatura.
	private List<AcCandidaturaDati> acCandidaturaDatiList = new ArrayList<AcCandidaturaDati>(0);

	public AcCandidatura() {
	}

	@Id
	@SequenceGenerator(name = "ac_candidatura_id_ac_candidatura_seq", sequenceName = "ac_candidatura_id_ac_candidatura_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "ac_candidatura_id_ac_candidatura_seq")
	@Column(name = "id_ac_candidatura", unique = true, nullable = false)
	public Integer getIdAcCandidatura() {
		return this.idAcCandidatura;
	}

	public void setIdAcCandidatura(Integer idAcCandidatura) {
		this.idAcCandidatura = idAcCandidatura;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_cv_dati_personali", nullable = false)
	public CvDatiPersonali getCvDatiPersonali() {
		return this.cvDatiPersonali;
	}

	public void setCvDatiPersonali(CvDatiPersonali cvDatiPersonali) {
		this.cvDatiPersonali = cvDatiPersonali;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_pf_principal", nullable = false)
	public PfPrincipal getPfPrincipal() {
		return this.pfPrincipal;
	}

	public void setPfPrincipal(PfPrincipal pfPrincipal) {
		this.pfPrincipal = pfPrincipal;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_va_dati_vacancy")
	public VaDatiVacancy getVaDatiVacancy() {
		return this.vaDatiVacancy;
	}

	public void setVaDatiVacancy(VaDatiVacancy vaDatiVacancy) {
		this.vaDatiVacancy = vaDatiVacancy;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_cv_lettera_acc")
	public CvLetteraAcc getCvLetteraAcc() {
		return this.cvLetteraAcc;
	}

	public void setCvLetteraAcc(CvLetteraAcc cvLetteraAcc) {
		this.cvLetteraAcc = cvLetteraAcc;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cod_idoneita_candidatura")
	public DeIdoneitaCandidatura getDeIdoneitaCandidatura() {
		return this.deIdoneitaCandidatura;
	}

	public void setDeIdoneitaCandidatura(DeIdoneitaCandidatura deIdoneitaCandidatura) {
		this.deIdoneitaCandidatura = deIdoneitaCandidatura;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "acCandidatura")
	public Set<MsgContatto> getMsgContattos() {
		return msgContattos;
	}

	public void setMsgContattos(Set<MsgContatto> msgContattos) {
		this.msgContattos = msgContattos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "acCandidatura")
	public Set<AcContatto> getAcContattos() {
		return acContattos;
	}

	public void setAcContattos(Set<AcContatto> acContattos) {
		this.acContattos = acContattos;
	}
	
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "acCandidatura")
	public List<AcCandidaturaDati> getAcCandidaturaDatiList() {
		return acCandidaturaDatiList;
	}

	public void setAcCandidaturaDatiList(List<AcCandidaturaDati> acCandidaturaDatiList) {
		this.acCandidaturaDatiList = acCandidaturaDatiList;
	}

	@Column(length=4000)
	public String getCommento() {
		return commento;
	}

	public void setCommento(String commento) {
		this.commento = commento;
	}

	@Column(length=8, name = "cod_provenienza_candidatura")
	public String getCodProvenienzaCandidatura() {
		return codProvenienzaCandidatura;
	}

	public void setCodProvenienzaCandidatura(String codProvenienzaCandidatura) {
		this.codProvenienzaCandidatura = codProvenienzaCandidatura;
	}

	@Column(name="note_valutazione", length=4000)
	public String getNoteInterne() {
		return noteInterne;
	}

	public void setNoteInterne(String noteInterne) {
		this.noteInterne = noteInterne;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((idAcCandidatura == null) ? 0 : idAcCandidatura.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		AcCandidatura other = (AcCandidatura) obj;
		if (idAcCandidatura == null) {
			if (other.idAcCandidatura != null)
				return false;
		} else if (!idAcCandidatura.equals(other.idAcCandidatura))
			return false;
		return true;
	}

	
}
