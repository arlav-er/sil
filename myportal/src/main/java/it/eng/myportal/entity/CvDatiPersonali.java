package it.eng.myportal.entity;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Type;

import it.eng.myportal.entity.decodifiche.DeAmbitoDiffusione;
import it.eng.myportal.entity.decodifiche.DeComune;
import it.eng.myportal.entity.decodifiche.DeMotivoChiusura;
import it.eng.myportal.entity.decodifiche.DeProvenienza;
// Generated Mar 1, 2012 12:28:41 PM by Hibernate Tools 3.4.0.CR1
import it.eng.myportal.utils.ConstantsSingleton;

/**
 * CvDatiPersonali generated by hbm2java
 */
@Entity
@Table(name = "cv_dati_personali", schema = "myportal")
@NamedQueries({
		@NamedQuery(name = "findCvRicevutiDaSil", query = "select c from CvDatiPersonali c where c.pfPrincipal.idPfPrincipal = :idPrincipal and c.provenienzaCurriculum.codProvenienza like :prov and c.dtScadenza >= :dataScad and c.flagEliminato = false"),
		@NamedQuery(name = "findCvByCodComunicazioneSil", query = "select c from CvDatiPersonali c where c.codComunicazioneSil = :codComunicazioneSil"),
		@NamedQuery(name = "findCvByCodComunicazione", query = "select c from CvDatiPersonali c where c.cvCandidaturaCl.codComunicazione = :codComunicazione"),
		@NamedQuery(name = "findCvLive", query = "select c from CvDatiPersonali c where c.pfPrincipal.idPfPrincipal = :idPrincipal and c.provenienzaCurriculum.codProvenienza = '"
				+ ConstantsSingleton.DeProvenienza.COD_MYPORTAL
				+ "' and c.flagInviato = false and c.flagEliminato = false"),
		@NamedQuery(name = "findCvLiveFlgIdo", query = "select c from CvDatiPersonali c where c.pfPrincipal.idPfPrincipal = :idPrincipal and c.provenienzaCurriculum.codProvenienza = '"
				+ ConstantsSingleton.DeProvenienza.COD_MYPORTAL
				+ "' and c.flagInviato = false and c.flagEliminato = false and c.flagIdo = true"),
		@NamedQuery(name = "findCvLiveNoScad", query = "select c from CvDatiPersonali c where c.pfPrincipal.idPfPrincipal = :idPrincipal and c.provenienzaCurriculum.codProvenienza = '"
				+ ConstantsSingleton.DeProvenienza.COD_MYPORTAL
				+ "' and c.flagInviato = false and c.flagEliminato = false and (c.dtScadenza is null or c.dtScadenza >= current_date())"),
		@NamedQuery(name = "findCvLiveNoScadFlagIdo", query = "select c from CvDatiPersonali c where c.pfPrincipal.idPfPrincipal = :idPrincipal and c.provenienzaCurriculum.codProvenienza = '"
				+ ConstantsSingleton.DeProvenienza.COD_MYPORTAL
				+ "' and c.flagInviato = false and c.flagEliminato = false and c.flagIdo = true and (c.dtScadenza is null or c.dtScadenza >= current_date())"),
		@NamedQuery(name = "findCvIntermediati", query = "select c from CvDatiPersonali c where c.provenienzaCurriculum.codProvenienza != '"
				+ ConstantsSingleton.DeProvenienza.COD_MYPORTAL
				+ "' and c.pfPrincipalPalese.idPfPrincipal = :idPrincipal and c.flagInviato = false and c.flagEliminato = false"),
		@NamedQuery(name = "findCvIntermediatiNoScad", query = "select c from CvDatiPersonali c where c.provenienzaCurriculum.codProvenienza != '"
				+ ConstantsSingleton.DeProvenienza.COD_MYPORTAL
				+ "' and c.pfPrincipalPalese.idPfPrincipal = :idPrincipal and c.flagInviato = false and c.flagEliminato = false and (c.dtScadenza is null or c.dtScadenza >= current_date())"),
		@NamedQuery(name = "findCvCliclavoroNonScaduti", query = "select c from CvDatiPersonali c where c.provenienzaCurriculum.codProvenienza != '"
				+ ConstantsSingleton.DeProvenienza.COD_MYPORTAL
				+ "' and c.pfPrincipalPalese.idPfPrincipal = :idPrincipal and c.flagInviato = false and c.flagEliminato = false and not (c.provenienzaCurriculum.codProvenienza = '"
				+ ConstantsSingleton.DeProvenienza.COD_MINISTERO
				+ "' and c.dtScadenza is not null and c.dtScadenza < current_date())"),
		@NamedQuery(name = "findCvCliclavoroNonScadutiFlgIdo", query = "select c from CvDatiPersonali c where c.provenienzaCurriculum.codProvenienza != '"
				+ ConstantsSingleton.DeProvenienza.COD_MYPORTAL
				+ "' and c.pfPrincipalPalese.idPfPrincipal = :idPrincipal and c.flagInviato = false and c.flagEliminato = false and c.flagIdo = true and not (c.provenienzaCurriculum.codProvenienza = '"
				+ ConstantsSingleton.DeProvenienza.COD_MINISTERO
				+ "' and c.dtScadenza is not null and c.dtScadenza < current_date())"),
		@NamedQuery(name = "findCvByUtPaleseFromSIL", query = "select c from CvDatiPersonali c where c.provenienzaCurriculum.codProvenienza like '"
				+ ConstantsSingleton.DeProvenienza.COD_SIL_GENERIC
				+ "%' and c.pfPrincipalPalese.idPfPrincipal = :idPrincipal and c.flagEliminato = false order by idCvDatiPersonali desc"),
		@NamedQuery(name = "countCvSyncWithCl", query = "select count(distinct c) from CvDatiPersonali c where c.pfPrincipal.idPfPrincipal = :idPrincipal and ( c.deAmbitoDiffusione.codAmbitoDiffusione in ( '"
				+ ConstantsSingleton.DeAmbitoDiffusione.NAZIONALE + "','"
				+ ConstantsSingleton.DeAmbitoDiffusione.EUROPEO
				+ "') or c.cvCandidaturaCl.deStatoInvioCl.codStatoInvioCl in('"
				+ ConstantsSingleton.DeStatoInvioCl.CHIUSURA_INVIATA_ERRORE + "','"
				+ ConstantsSingleton.DeStatoInvioCl.IN_ATTESA_INVIO_CHIUSURA + "'))") })
public class CvDatiPersonali extends AbstractEntity {
	private static final long serialVersionUID = 867940L;

	public static class OpzTipoDecodifiche {
		public static final String SIL = "S";
		public static final String MINISTERO = "M";
	}

	private Set<AcCandidatura> acCandidaturas = new HashSet<AcCandidatura>(0);
	private String codComunicazioneSil;
	private CvAltreInfo cvAltreInfo;
	private CvCandidaturaCl cvCandidaturaCl;
	private Set<CvCompetenzeTrasv> cvCompetenzeTrasvs = new HashSet<CvCompetenzeTrasv>(0);
	private Set<CvEsperienzeProf> cvEsperienzeProfs = new HashSet<CvEsperienzeProf>(0);
	private Set<CvFormazione> cvFormaziones = new HashSet<CvFormazione>(0);
	private CvInformatica cvInformatica;
	private Set<CvIstruzione> cvIstruziones = new HashSet<CvIstruzione>(0);
	private Set<CvLingua> cvLinguas = new HashSet<CvLingua>(0);
	private Set<CvPatente> cvPatentes = new HashSet<CvPatente>(0);
	private Set<CvPatentino> cvPatentinos = new HashSet<CvPatentino>(0);
	private Set<CvProfDesiderate> cvProfDesiderates = new HashSet<CvProfDesiderate>(0);
	private DeAmbitoDiffusione deAmbitoDiffusione;
	private DeComune deComuneDomicilio;
	private DeComune deComuneNascita;
	private String denominazioneIntermediario;
	private String descrizione;
	private Date dtNascita;
	private Date dtScadenza;
	private String email;
	private String fax;
	private Boolean flagEliminato;
	private Boolean flagInviato;
	private Integer idCvDatiPersonali;
	private String indirizzoDomicilio;
	private String intermediario;
	private DeMotivoChiusura motivoChiusura;
	private String noteAbilitazioni;
	private PfPrincipal pfPrincipal;
	private PfPrincipal pfPrincipalPalese;
	private Poi poi;
	private DeProvenienza provenienzaCurriculum;
	private String tel1;
	private String tel2;
	private boolean isRicercabile;
	private Boolean visibilita;
	private String opzTipoDecodifiche;
	private String titolo;
	private String descrizioneCv;
	private byte[] foto;
	private Boolean flagIdo;

	private String indirizzoProfilo;
	private String riferimentiMessaggistica;
	private Boolean flagTrattamentoDati;
	private Boolean flagApp;

	private String codiceFiscale;

	/**
	 * PfPrincipal - aziende - che possono visualizzare i contatti del cv
	 */
	private Set<PfPrincipal> contactInfoViewableBy = new HashSet<PfPrincipal>(0);
	private Set<CvAgevolazione> cvAgevolaziones = new HashSet<CvAgevolazione>(0);
	private Set<CvAlbo> cvAlbos = new HashSet<CvAlbo>(0);
	private Set<MsgContatto> msgContattos = new HashSet<MsgContatto>(0);
	private Set<MsgMessaggio> msgMessaggios = new HashSet<MsgMessaggio>();

	public CvDatiPersonali() {
		// di default tutti i CV sono ricercabili. Nel caso di CV da MyPortal
		// viene esplicitamente settato a false
		isRicercabile = true;

		// Di default tutti i CV hanno flagApp=false. Solo nella specifica API legata all'app il flag viene
		// esplicitamente settato a true
		flagApp = false;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<AcCandidatura> getAcCandidaturas() {
		return this.acCandidaturas;
	}

	@Column(name = "cod_comunicazione_sil", length = 25)
	public String getCodComunicazioneSil() {
		return this.codComunicazioneSil;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "cv_abilita_vis_contatto_lav", joinColumns = {
			@JoinColumn(name = "id_cv_dati_personali", referencedColumnName = "id_cv_dati_personali") }, inverseJoinColumns = {
					@JoinColumn(name = "id_pf_principal", referencedColumnName = "id_pf_principal") })
	public Set<PfPrincipal> getContactInfoViewableBy() {
		return contactInfoViewableBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<CvAgevolazione> getCvAgevolaziones() {
		return this.cvAgevolaziones;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<CvAlbo> getCvAlbos() {
		return this.cvAlbos;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public CvAltreInfo getCvAltreInfo() {
		return this.cvAltreInfo;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public CvCandidaturaCl getCvCandidaturaCl() {
		return this.cvCandidaturaCl;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<CvCompetenzeTrasv> getCvCompetenzeTrasvs() {
		return this.cvCompetenzeTrasvs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	@OrderBy(value = "a desc, da desc")
	public Set<CvEsperienzeProf> getCvEsperienzeProfs() {
		return this.cvEsperienzeProfs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<CvFormazione> getCvFormaziones() {
		return this.cvFormaziones;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public CvInformatica getCvInformatica() {
		return this.cvInformatica;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	@OrderBy(value = "numAnno desc")
	public Set<CvIstruzione> getCvIstruziones() {
		return this.cvIstruziones;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<CvLingua> getCvLinguas() {
		return this.cvLinguas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<CvPatente> getCvPatentes() {
		return this.cvPatentes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<CvPatentino> getCvPatentinos() {
		return this.cvPatentinos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<CvProfDesiderate> getCvProfDesiderates() {
		return this.cvProfDesiderates;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_ambito_diffusione", nullable = false)
	public DeAmbitoDiffusione getDeAmbitoDiffusione() {
		return deAmbitoDiffusione;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cod_com_domicilio", nullable = false)
	public DeComune getDeComuneDomicilio() {
		return this.deComuneDomicilio;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_com_nascita", nullable = false)
	public DeComune getDeComuneNascita() {
		return this.deComuneNascita;
	}

	@Column(name = "denominazione_intermediario", length = 200)
	public String getDenominazioneIntermediario() {
		return denominazioneIntermediario;
	}

	@Column(name = "descrizione", nullable = false, length = 100)
	public String getDescrizione() {
		return this.descrizione;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dt_nascita", length = 13)
	public Date getDtNascita() {
		return this.dtNascita;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dt_scadenza", length = 13)
	public Date getDtScadenza() {
		return this.dtScadenza;
	}

	@Column(name = "email", nullable = false , length = 255)
	public String getEmail() {
		return this.email;
	}

	@Column(name = "fax", length = 20)
	public String getFax() {
		return this.fax;
	}

	@Type(type = "yes_no")
	@Column(name = "flag_eliminato", nullable = false, length = 1)
	public Boolean getFlagEliminato() {
		return this.flagEliminato;
	}

	@Type(type = "yes_no")
	@Column(name = "ricercabilita", nullable = false, length = 1)
	public Boolean isRicercabile() {
		return this.isRicercabile;
	}
	@Transient//ma varda te che schifezz mi tocca fare
	public boolean getRicercabile() {
		return isRicercabile;
	}

	@Type(type = "yes_no")
	@Column(name = "flag_inviato", nullable = false, length = 1)
	public Boolean getFlagInviato() {
		return this.flagInviato;
	}

	@Id
	@SequenceGenerator(name = "cv_dati_personali_id_cv_dati_personali_seq", sequenceName = "cv_dati_personali_id_cv_dati_personali_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "cv_dati_personali_id_cv_dati_personali_seq")
	@Column(name = "id_cv_dati_personali", unique = true)
	public Integer getIdCvDatiPersonali() {
		return this.idCvDatiPersonali;
	}

	@Column(name = "indirizzo_domicilio", length = 512)
	public String getIndirizzoDomicilio() {
		return this.indirizzoDomicilio;
	}

	@Column(name = "intermediario", length = 11)
	public String getIntermediario() {
		return intermediario;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_motivo_chiusura")
	public DeMotivoChiusura getDeMotivoChiusura() {
		return motivoChiusura;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "cvDatiPersonali")
	public Set<MsgContatto> getMsgContattos() {
		return msgContattos;
	}

	@ManyToMany(fetch = FetchType.EAGER, mappedBy = "curricula")
	public Set<MsgMessaggio> getMsgMessaggios() {
		return msgMessaggios;
	}

	@Column(name = "note_abilitazioni", nullable = true, length = 2000)
	public String getNoteAbilitazioni() {
		return noteAbilitazioni;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_pf_principal", nullable = false)
	public PfPrincipal getPfPrincipal() {
		return this.pfPrincipal;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_pf_principal_palese")
	public PfPrincipal getPfPrincipalPalese() {
		return this.pfPrincipalPalese;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_poi_domicilio")
	public Poi getPoi() {
		return this.poi;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cod_provenienza_curriculum", nullable = false)
	public DeProvenienza getProvenienzaCurriculum() {
		return this.provenienzaCurriculum;
	}

	@Column(name = "tel_1", length = 20)
	public String getTel1() {
		return this.tel1;
	}

	@Column(name = "tel_2", length = 20)
	public String getTel2() {
		return this.tel2;
	}

	@Type(type = "yes_no")
	@Column(name = "visibilita", nullable = false, length = 1)
	public Boolean getVisibilita() {
		return visibilita;
	}

	@Column(name = "opz_tipo_decodifiche", length = 1)
	public String getOpzTipoDecodifiche() {
		return opzTipoDecodifiche;
	}

	@Column(name = "titolo", length = 100)
	public String getTitolo() {
		return titolo;
	}

	@Column(name = "descrizione_cv", length = 4000)
	public String getDescrizioneCv() {
		return descrizioneCv;
	}

	@Column
	public byte[] getFoto() {
		return foto;
	}

	public void setFoto(byte[] foto) {
		this.foto = foto;
	}

	@Transient
	public boolean isFromClicLavoro() {
		if (provenienzaCurriculum.getCodProvenienza().equals(ConstantsSingleton.DeProvenienza.COD_MINISTERO)) {
			return true;
		} else {
			return false;
		}
	}

	@Transient
	public boolean isFromMyPortal() {
		if (provenienzaCurriculum.getCodProvenienza().equals(ConstantsSingleton.DeProvenienza.COD_MYPORTAL)) {
			return true;
		} else {
			return false;
		}
	}

	@Transient
	public boolean isValido() {
		/* gestione data scadenza */
		if (dtScadenza == null || (dtScadenza != null && dtScadenza.compareTo(new Date()) >= 0)) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Il cv è intermediato se non è presente e valorizzato il campo 'intermediario'
	 * 
	 * @return
	 */
	@Transient
	public boolean isIntermediato() {
		return (intermediario != null) && !intermediario.trim().isEmpty();
	}

	/**
	 * Restituisce true se il cv e' originario da SIL. Un cv e' originario da SIL se
	 * cod_provenienza = 'SIL*'
	 * 
	 * @return
	 */
	@Transient
	public boolean isOriginarioSIL() {
		return (provenienzaCurriculum.getCodProvenienza().startsWith(ConstantsSingleton.DeProvenienza.COD_SIL_GENERIC));
	}

	@Transient
	public boolean isSincronizzatoCliclavoro() {
		if (deAmbitoDiffusione.getCodAmbitoDiffusione().equals(ConstantsSingleton.DeAmbitoDiffusione.REGIONALE)) {
			return false;
		} else {
			return true;
		}
	}

	@Transient
	public boolean isProprietario(Integer idPfPrincipal) {
		boolean result = false;

		if (pfPrincipalPalese != null) {
			result = pfPrincipalPalese.getIdPfPrincipal().equals(idPfPrincipal);
		} else {
			result = pfPrincipal.getIdPfPrincipal().equals(idPfPrincipal);
		}

		return result;
	}

	public void setAcCandidaturas(Set<AcCandidatura> acCandidaturas) {
		this.acCandidaturas = acCandidaturas;
	}

	public void setCodComunicazioneSil(String codComunicazioneSil) {
		this.codComunicazioneSil = codComunicazioneSil;
	}

	public void setContactInfoViewableBy(Set<PfPrincipal> contactInfoViewableBy) {
		this.contactInfoViewableBy = contactInfoViewableBy;
	}

	public void setCvAgevolaziones(Set<CvAgevolazione> cvAgevolaziones) {
		this.cvAgevolaziones = cvAgevolaziones;
	}

	public void setCvAlbos(Set<CvAlbo> cvAlbos) {
		this.cvAlbos = cvAlbos;
	}

	public void setCvAltreInfo(CvAltreInfo cvAltreInfo) {
		this.cvAltreInfo = cvAltreInfo;
	}

	public void setCvCandidaturaCl(CvCandidaturaCl cvCandidaturaCls) {
		this.cvCandidaturaCl = cvCandidaturaCls;
	}

	public void setCvCompetenzeTrasvs(Set<CvCompetenzeTrasv> cvCompetenzeTrasvs) {
		this.cvCompetenzeTrasvs = cvCompetenzeTrasvs;
	}

	public void setCvEsperienzeProfs(Set<CvEsperienzeProf> cvEsperienzeProfs) {
		this.cvEsperienzeProfs = cvEsperienzeProfs;
	}

	public void setCvFormaziones(Set<CvFormazione> cvFormaziones) {
		this.cvFormaziones = cvFormaziones;
	}

	public void setCvInformatica(CvInformatica cvInformatica) {
		this.cvInformatica = cvInformatica;
	}

	public void setCvIstruziones(Set<CvIstruzione> cvIstruziones) {
		this.cvIstruziones = cvIstruziones;
	}

	public void setCvLinguas(Set<CvLingua> cvLinguas) {
		this.cvLinguas = cvLinguas;
	}

	public void setCvPatentes(Set<CvPatente> cvPatentes) {
		this.cvPatentes = cvPatentes;
	}

	public void setCvPatentinos(Set<CvPatentino> cvPatentinos) {
		this.cvPatentinos = cvPatentinos;
	}

	public void setCvProfDesiderates(Set<CvProfDesiderate> cvProfDesiderates) {
		this.cvProfDesiderates = cvProfDesiderates;
	}

	public void setDeAmbitoDiffusione(DeAmbitoDiffusione deAmbitoDiffusione) {
		this.deAmbitoDiffusione = deAmbitoDiffusione;
	}

	public void setDeComuneDomicilio(DeComune deComuneByCodComDomicilio) {
		this.deComuneDomicilio = deComuneByCodComDomicilio;
	}

	public void setDeComuneNascita(DeComune deComuneByCodComNascita) {
		this.deComuneNascita = deComuneByCodComNascita;
	}

	public void setDenominazioneIntermediario(String denominazioneIntermediario) {
		this.denominazioneIntermediario = denominazioneIntermediario;
	}

	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

	public void setDtNascita(Date dtNascita) {
		this.dtNascita = dtNascita;
	}

	public void setDtScadenza(Date dtScadenza) {
		this.dtScadenza = dtScadenza;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public void setFax(String fax) {
		this.fax = fax;
	}

	public void setFlagEliminato(Boolean flagEliminato) {
		this.flagEliminato = flagEliminato;
	}

	public void setRicercabile(boolean ricercabile) {
		this.isRicercabile = ricercabile;
	}

	public void setFlagInviato(Boolean flagInviato) {
		this.flagInviato = flagInviato;
	}

	public void setIdCvDatiPersonali(Integer idCvDatiPersonali) {
		this.idCvDatiPersonali = idCvDatiPersonali;
	}

	public void setIndirizzoDomicilio(String indirizzoDomicilio) {
		this.indirizzoDomicilio = indirizzoDomicilio;
	}

	public void setIntermediario(String intermediario) {
		this.intermediario = intermediario;
	}

	public void setDeMotivoChiusura(DeMotivoChiusura motivoChiusura) {
		this.motivoChiusura = motivoChiusura;
	}

	public void setMsgContattos(Set<MsgContatto> msgContattos) {
		this.msgContattos = msgContattos;
	}

	public void setMsgMessaggios(Set<MsgMessaggio> msgMessaggios) {
		this.msgMessaggios = msgMessaggios;
	}

	public void setNoteAbilitazioni(String noteAbilitazioni) {
		this.noteAbilitazioni = noteAbilitazioni;
	}

	public void setPfPrincipal(PfPrincipal pfPrincipal) {
		this.pfPrincipal = pfPrincipal;
	}

	public void setPfPrincipalPalese(PfPrincipal pfPrincipalPalese) {
		this.pfPrincipalPalese = pfPrincipalPalese;
	}

	public void setPoi(Poi poi) {
		this.poi = poi;
	}

	public void setProvenienzaCurriculum(DeProvenienza provenientaCurriculum) {
		this.provenienzaCurriculum = provenientaCurriculum;
	}

	public void setTel1(String tel1) {
		this.tel1 = tel1;
	}

	public void setTel2(String tel2) {
		this.tel2 = tel2;
	}

	public void setVisibilita(Boolean visibilita) {
		this.visibilita = visibilita;
	}

	public void setOpzTipoDecodifiche(String opzTipoDecodifiche) {
		this.opzTipoDecodifiche = opzTipoDecodifiche;
	}

	public void setTitolo(String titolo) {
		this.titolo = titolo;
	}

	public void setDescrizioneCv(String descrizioneCv) {
		this.descrizioneCv = descrizioneCv;
	}

	@Column(name = "indirizzo_profilo", length=250)
	public String getIndirizzoProfilo() {
		return indirizzoProfilo;
	}

	public void setIndirizzoProfilo(String indirizzoProfilo) {
		this.indirizzoProfilo = indirizzoProfilo;
	}

	@Column(name = "riferimenti_messaggistica", length=250)
	public String getRiferimentiMessaggistica() {
		return riferimentiMessaggistica;
	}

	public void setRiferimentiMessaggistica(String riferimentiMessaggistica) {
		this.riferimentiMessaggistica = riferimentiMessaggistica;
	}

	@Column(name = "flg_ido", nullable=true)
	public Boolean getFlagIdo() {
		return flagIdo;
	}

	public void setFlagIdo(Boolean flagIdo) {
		this.flagIdo = flagIdo;
	}
	
	@Type(type = "yes_no")
	@Column(name = "flag_trattamento_dati", nullable = true, length = 1)
	public Boolean getFlagTrattamentoDati() {
		return flagTrattamentoDati;
	}

	public void setFlagTrattamentoDati(Boolean flagTrattamentoDati) {
		this.flagTrattamentoDati = flagTrattamentoDati;
	}

	@Column(name = "flg_app", nullable = true, columnDefinition = "boolean default false")
	public Boolean getFlagApp() {
		return flagApp;
	}

	public void setFlagApp(Boolean flagApp) {
		this.flagApp = flagApp;
	}

	@Column(name = "codice_fiscale", length = 16)
	public String getCodiceFiscale() {
		return codiceFiscale;
	}

	public void setCodiceFiscale(String codiceFiscale) {
		this.codiceFiscale = codiceFiscale;
	}


}