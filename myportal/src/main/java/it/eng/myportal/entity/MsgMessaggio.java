package it.eng.myportal.entity;

// Generated Mar 1, 2012 12:28:41 PM by Hibernate Tools 3.4.0.CR1
import it.eng.myportal.entity.decodifiche.DeProvincia;
import it.eng.myportal.entity.decodifiche.DeRuoloPortale;
import it.eng.myportal.entity.decodifiche.DeTemaConsulenza;
import it.eng.myportal.entity.decodifiche.DeTipoMessaggio;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * MsgMessaggio generated by hbm2java
 */
@NamedQueries({
		@NamedQuery(name = "findMsgMessaggioByTipo", query = "select m from MsgMessaggio m where m.deTipoMessaggio.codTipoMessaggio = :tipoMessaggio"),
		@NamedQuery(name = "findTickets", query = " select distinct(m.ticket) from MsgMessaggio m"),

		@NamedQuery(name = "findAllByTicket", query = " SELECT m " + " FROM MsgMessaggio m "
				+ " WHERE m.ticket = :ticket " + " ORDER BY m.idMsgMessaggio DESC"),

		@NamedQuery(name = "findAllByTicketAsc", query = " SELECT m " + " FROM MsgMessaggio m "
				+ " WHERE m.ticket = :ticket " + " ORDER BY m.idMsgMessaggio ASC"),

		@NamedQuery(name = "findMessagesInviati", query = "  SELECT m.ticket " + " FROM MsgMessaggio m "
				+ " WHERE m.deTipoMessaggio.codTipoMessaggio = :codTipoMessaggio "
				+ " AND m.pfPrincipalFrom.idPfPrincipal = :idPrincipalFrom " + " GROUP BY m.ticket"
				+ " ORDER BY MIN(m.idMsgMessaggio) DESC"),

		@NamedQuery(name = "findMessagesInviatiCount", query = "  SELECT COUNT (DISTINCT m.ticket) "
				+ " FROM MsgMessaggio m " + " WHERE m.deTipoMessaggio.codTipoMessaggio = :codTipoMessaggio "
				+ " AND m.pfPrincipalFrom.idPfPrincipal = :idPrincipalFrom "),

		@NamedQuery(name = "findMessagesRicevuti", query = "  SELECT m.ticket " + " FROM MsgMessaggio m "
				+ " WHERE m.deTipoMessaggio.codTipoMessaggio = :codTipoMessaggio "
				+ " AND m.pfPrincipalTo.idPfPrincipal = :idPrincipalTo " + " GROUP BY m.ticket "
				+ " ORDER BY MIN(m.idMsgMessaggio) DESC"),

		@NamedQuery(name = "findMessagesRicevutiCount", query = "  SELECT COUNT (DISTINCT m.ticket) "
				+ " FROM MsgMessaggio m " + " WHERE m.deTipoMessaggio.codTipoMessaggio = :codTipoMessaggio "
				+ " AND m.pfPrincipalTo.idPfPrincipal = :idPrincipalTo "),

		@NamedQuery(name = "findTicket", query = "select m " + " from MsgMessaggio m"
				+ " where m.deTipoMessaggio.codTipoMessaggio = :codTipoMessaggio "
				+ " and m.pfPrincipalFrom.idPfPrincipal = :idPrincipalFrom " + " and m.idMsgMessaggio in ( "
				+ " select min(mex.idMsgMessaggio) " + " from MsgMessaggio mex "
				+ " where mex.deTipoMessaggio.codTipoMessaggio = :codTipoMessaggioIn "
				+ " and mex.pfPrincipalFrom.idPfPrincipal = :idPrincipalFromIn " + " group by mex.ticket )"
				+ " order by m.idMsgMessaggio desc, m.dtmMod desc"),

		@NamedQuery(name = "findMessaggiByTicket", query = " select m from MsgMessaggio m "
				+ "	where m.ticket = :ticket and (m.pfPrincipalFrom.idPfPrincipal = :idPrincipal or m.pfPrincipalTo.idPfPrincipal = :idPrincipal ) "
				+ " order by m.idMsgMessaggio ") })
@Entity
@Table(name = "msg_messaggio", schema = "myportal")
public class MsgMessaggio extends AbstractEntity implements java.io.Serializable {
	private static final long serialVersionUID = 90883L;

	private Integer idMsgMessaggio;
	private PfPrincipal pfPrincipalFrom;
	private PfPrincipal pfPrincipalTo;
	private DeProvincia deProvinciaTo;
	private DeRuoloPortale deRuoloPortaleTo;
	private DeTipoMessaggio deTipoMessaggio;
	private DeTemaConsulenza deTemaConsulenza;
	private String ticket;
	private String oggetto;
	private String corpo;
	private Date dtScadenza;

	private AtpConsulenza atpConsulenza;

	private Set<CvDatiPersonali> curricula = new HashSet<CvDatiPersonali>(0);
	private Set<CvLetteraAcc> lettere = new HashSet<CvLetteraAcc>(0);

	private Set<MsgMessaggioLetto> msgMessaggioLettos = new HashSet<MsgMessaggioLetto>(0);

	private Set<MsgAllegato> msgAllegatos = new HashSet<MsgAllegato>(0);

	private MsgMessaggioCl msgMessaggioCl;
	private MsgContatto msgContatto;

	private MsgMessaggio precedente;
	private MsgMessaggio successivo;

	private MsgMessaggio inoltrante;
	private List<MsgMessaggio> inoltrati;

	private MsgMessaggioAtipico msgMessaggioAtipico;

	public MsgMessaggio() {
	}

	public MsgMessaggio(Integer idMsgMessaggio, String oggetto, String corpo, String ticket, Date dtmIns, Date dtmMod) {
		this.idMsgMessaggio = idMsgMessaggio;
		this.oggetto = oggetto;
		this.corpo = corpo;
		this.ticket = ticket;
		super.setDtmIns(dtmIns);
		super.setDtmMod(dtmMod);
	}

	public MsgMessaggio(PfPrincipal pFrom, Integer idMsgMessaggio, String oggetto, String corpo, String ticket,
			Date dtmIns, Date dtmMod) {
		this(idMsgMessaggio, oggetto, corpo, ticket, dtmIns, dtmMod);
		this.pfPrincipalFrom = pFrom;
	}

	public MsgMessaggio(PfPrincipal pFrom, PfPrincipal pTo, Integer idMsgMessaggio, String oggetto, String corpo,
			String ticket, Date dtmIns, Date dtmMod) {
		this(pFrom, idMsgMessaggio, oggetto, corpo, ticket, dtmIns, dtmMod);
		this.pfPrincipalTo = pTo;
	}

	@Id
	@SequenceGenerator(name = "msg_messaggio_id_msg_messaggio_seq", sequenceName = "msg_messaggio_id_msg_messaggio_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "msg_messaggio_id_msg_messaggio_seq")
	@Column(name = "id_msg_messaggio", unique = true, nullable = false)
	public Integer getIdMsgMessaggio() {
		return this.idMsgMessaggio;
	}

	public void setIdMsgMessaggio(Integer idMsgMessaggio) {
		this.idMsgMessaggio = idMsgMessaggio;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cod_provincia_to")
	public DeProvincia getDeProvinciaTo() {
		return deProvinciaTo;
	}

	public void setDeProvinciaTo(DeProvincia deProvinciaTo) {
		this.deProvinciaTo = deProvinciaTo;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "cod_ruolo_portale_to")
	public DeRuoloPortale getDeRuoloPortaleTo() {
		return deRuoloPortaleTo;
	}

	public void setDeRuoloPortaleTo(DeRuoloPortale deRuoloPortaleTo) {
		this.deRuoloPortaleTo = deRuoloPortaleTo;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_pf_principal_from", nullable = false)
	public PfPrincipal getPfPrincipalFrom() {
		return this.pfPrincipalFrom;
	}

	public void setPfPrincipalFrom(PfPrincipal pfPrincipalByIdPfPrincipalFrom) {
		this.pfPrincipalFrom = pfPrincipalByIdPfPrincipalFrom;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_pf_principal_to")
	public PfPrincipal getPfPrincipalTo() {
		return this.pfPrincipalTo;
	}

	public void setPfPrincipalTo(PfPrincipal pfPrincipalByIdPfPrincipalTo) {
		this.pfPrincipalTo = pfPrincipalByIdPfPrincipalTo;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_tipo_messaggio", nullable = false)
	public DeTipoMessaggio getDeTipoMessaggio() {
		return this.deTipoMessaggio;
	}

	public void setDeTipoMessaggio(DeTipoMessaggio deTipoMessaggio) {
		this.deTipoMessaggio = deTipoMessaggio;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cod_tema")
	public DeTemaConsulenza getDeTemaConsulenza() {
		return this.deTemaConsulenza;
	}

	public void setDeTemaConsulenza(DeTemaConsulenza deTemaConsulenza) {
		this.deTemaConsulenza = deTemaConsulenza;
	}

	@Column(name = "ticket", length = 100)
	public String getTicket() {
		return this.ticket;
	}

	public void setTicket(String ticket) {
		this.ticket = ticket;
	}

	@Column(name = "oggetto", nullable = false, length = 250)
	public String getOggetto() {
		return this.oggetto;
	}

	public void setOggetto(String oggetto) {
		this.oggetto = oggetto;
	}

	@Column(name = "corpo", nullable = false, length = 4000)
	public String getCorpo() {
		return this.corpo;
	}

	public void setCorpo(String corpo) {
		this.corpo = corpo;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dt_scadenza", length = 13)
	public Date getDtScadenza() {
		return this.dtScadenza;
	}

	public void setDtScadenza(Date dtScadenza) {
		this.dtScadenza = dtScadenza;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "msgMessaggio")
	public Set<MsgMessaggioLetto> getMsgMessaggioLettos() {
		return this.msgMessaggioLettos;
	}

	public void setMsgMessaggioLettos(Set<MsgMessaggioLetto> msgMessaggioLettos) {
		this.msgMessaggioLettos = msgMessaggioLettos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "msgMessaggio")
	public Set<MsgAllegato> getMsgAllegatos() {
		return this.msgAllegatos;
	}

	public void setMsgAllegatos(Set<MsgAllegato> msgAllegatos) {
		this.msgAllegatos = msgAllegatos;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "msg_supporto_cv", joinColumns = { @JoinColumn(name = "id_msg_messaggio", referencedColumnName = "id_msg_messaggio") }, inverseJoinColumns = { @JoinColumn(name = "id_cv_dati_personali", referencedColumnName = "id_cv_dati_personali") })
	public Set<CvDatiPersonali> getCurricula() {
		return curricula;
	}

	public void setCurricula(Set<CvDatiPersonali> curricula) {
		this.curricula = curricula;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "msg_supporto_lett_acc", joinColumns = { @JoinColumn(name = "id_msg_messaggio", referencedColumnName = "id_msg_messaggio") }, inverseJoinColumns = { @JoinColumn(name = "id_cv_lettera_acc", referencedColumnName = "id_cv_lettera_acc") })
	public Set<CvLetteraAcc> getLettere() {
		return lettere;
	}

	public void setLettere(Set<CvLetteraAcc> lettere) {
		this.lettere = lettere;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "msgMessaggio")
	public MsgMessaggioCl getMsgMessaggioCl() {
		return msgMessaggioCl;
	}

	public void setMsgMessaggioCl(MsgMessaggioCl msgMessaggioCl) {
		this.msgMessaggioCl = msgMessaggioCl;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "msgMessaggio")
	public MsgContatto getMsgContatto() {
		return msgContatto;
	}

	public void setMsgContatto(MsgContatto msgContatto) {
		this.msgContatto = msgContatto;
	}

	@OneToOne
	@JoinColumn(name = "id_msg_messaggio_prec")
	public MsgMessaggio getPrecedente() {
		return precedente;
	}

	public void setPrecedente(MsgMessaggio precedente) {
		this.precedente = precedente;
	}

	@OneToOne(mappedBy = "precedente")
	public MsgMessaggio getSuccessivo() {
		return successivo;
	}

	public void setSuccessivo(MsgMessaggio successivo) {
		this.successivo = successivo;
	}

	@OneToOne
	@JoinColumn(name = "id_msg_messaggio_inoltro")
	public MsgMessaggio getInoltrante() {
		return inoltrante;
	}

	public void setInoltrante(MsgMessaggio inoltrante) {
		this.inoltrante = inoltrante;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "inoltrante")
	@OrderBy("idMsgMessaggio")
	public List<MsgMessaggio> getInoltrati() {
		return inoltrati;
	}

	public void setInoltrati(List<MsgMessaggio> inoltrati) {
		this.inoltrati = inoltrati;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "msgMessaggio")
	public MsgMessaggioAtipico getMsgMessaggioAtipico() {
		return this.msgMessaggioAtipico;
	}

	public void setMsgMessaggioAtipico(MsgMessaggioAtipico msgMessaggioAtipico) {
		this.msgMessaggioAtipico = msgMessaggioAtipico;
	}

	@OneToOne(fetch = FetchType.LAZY, mappedBy = "msgMessaggio")
	public AtpConsulenza getAtpConsulenza() {
		return this.atpConsulenza;
	}

	public void setAtpConsulenza(AtpConsulenza atpConsulenza) {
		this.atpConsulenza = atpConsulenza;
	}

	@Transient
	public List<MsgMessaggio> getInoltrati(DeProvincia provincia) {
		List<MsgMessaggio> out = new ArrayList<MsgMessaggio>();
		for (MsgMessaggio m : inoltrati) {
			if (m.getDeProvinciaTo().getCodProvincia().equals(provincia.getCodProvincia())) {
				out.add(m);
			}
		}
		return out;
	}

}
