<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:composite="http://java.sun.com/jsf/composite">

	<!--  Attributi da definire nell'interfaccia -->
	<composite:interface>
		<composite:attribute name="label" />
		<composite:attribute name="disableLabel" default="false" />
		<composite:attribute name="value" required="true" />
		<composite:attribute name="disabled" default="false"
			type="java.lang.Boolean" />
		<composite:attribute name="disableAjax" default="false" />
		<composite:attribute name="editingMode" default="true"
			type="java.lang.Boolean"
			shortDescription="visualizzato come input (true -> default) oppure come testo" />
		<composite:attribute name="richTextMode" default="true"
			type="java.lang.Boolean"
			shortDescription="visualizzato come Rich Text Editor (true -> default) oppure come input testo" />
		<composite:attribute name="escape" default="false"
			shortDescription="Se false fa il parsing HTML, se true visualizza i tag HTML come testo"></composite:attribute>
		<composite:attribute name="readonly" type="java.lang.Boolean" />
		<composite:attribute name="onchange" />
		<composite:attribute name="required" default="false" />
		<composite:attribute name="requiredMessage"
			default="Campo obbligatorio" />
		<composite:attribute name="converterMessage" default="Formato errato" />
		<composite:attribute name="minlength" default="0" />
		<composite:attribute name="maxlength" default="100" />
		<composite:attribute name="style" />
		<composite:attribute name="rows" default="5" />
		<composite:attribute name="cols" default="50" />
		<composite:attribute name="styleClass" default="inner-area-shadow" />
		<composite:attribute name="title" />
		<!-- Attributi definito per gestire(in base al target), i vari Validatori, Convertitori, etc.  -->
		<composite:editableValueHolder name="function" targets="inputTextarea" />

	</composite:interface>

	<!--  Interfaccia implementata -->
	<composite:implementation>
		<div id="#{cc.clientId}">
			<!--  Label -->
			<h:outputLabel id="label" for="inputTextarea"
				rendered="#{not cc.attrs.disableLabel}">
				<h:outputText value="#{cc.attrs.label}" />
				<h:outputText value=" *"
					rendered="#{not empty cc.attrs.label and cc.attrs.required and cc.attrs.editingMode}" />
			</h:outputLabel>
			<!--  Campo Input -->
			<h:panelGroup id="inputblock" layout="block" style="width:100%"
				rendered="#{cc.attrs.editingMode}">
				<h:inputTextarea id="inputTextarea"
					styleClass="#{cc.attrs.styleClass}" style="#{cc.attrs.style}"
					value="#{cc.attrs.value}" onchange="#{cc.attrs.onchange}"
					readonly="#{cc.attrs.readonly}" disabled="#{cc.attrs.disabled}"
					required="#{cc.attrs.required}" title="#{cc.attrs.title}"
					rows="#{cc.attrs.rows}" cols="#{cc.attrs.cols}"
					requiredMessage="#{cc.attrs.requiredMessage}"
					validatorMessage="Superata la dimensione massima del testo"
					converterMessage="#{cc.attrs.converterMessage}">
					<f:validateLength maximum="#{cc.attrs.maxlength}"
						minimum="#{cc.attrs.minlength}" for="inputTextarea" />
					<f:ajax execute="inputTextarea" event="blur"
						disabled="#{cc.attrs.disableAjax}" render="effect" />
				    <f:converter converterId="textareaConverter" for="inputTextarea" />
				</h:inputTextarea>
				

				<!--  Gestione messaggio -->
				<h:panelGroup id="effect" class="toggler" style="display:none;">
					<h:message id="message" for="inputTextarea"
						errorClass="ui-state-error ui-corner-all">
					</h:message>
					<script type="text/javascript">
						$(function() {
							runEffectError(jq('#{cc.clientId}:effect'));
						}); 
					</script>
					<ui:fragment
						rendered="#{not cc.attrs.disabled and not cc.attrs.readonly}">
						<script type="text/javascript">
					$(function(){
						
						if (#{ not cc.attrs.richTextMode}) {
						var onEditCallback = function(remaining){
							$(jq('#{cc.clientId}:limitInputTextarea')).text("Caratteri disponibili: " + remaining);

							if(remaining > 0){
								$(jq('#{cc.clientId}:limitInputTextarea')).css('background-color', 'transparent');
							}
						}

						var onLimitCallback = function(){
							$(jq('#{cc.clientId}:limitInputTextarea')).css('background-color', 'red');
						}
						
						$(jq('#{cc.clientId}:inputTextarea')).attr('maxlength',#{cc.attrs.maxlength}).limitMaxlength({
							onEdit: onEditCallback,
							onLimit: onLimitCallback
						});
					}
									
					});
				</script>
					</ui:fragment>

				</h:panelGroup>
				
				<h:panelGroup layout="block" id="limitInputTextarea"
					styleClass="inputTextOutput" style="#{cc.attrs.style}">
				</h:panelGroup>
				
				<ui:fragment
					rendered="#{cc.attrs.richTextMode and not cc.attrs.disabled and not cc.attrs.readonly}">
					<script type="text/javascript">
					//<![CDATA[
					console.log('clientId:#{cc.clientId}');
					$(function() {myportal.inputTextarea.init('#{cc.clientId}');});
					//]]>
					</script>
				</ui:fragment>
			</h:panelGroup>

			<h:panelGroup id="outputblock" layout="block" style="width:100%" rendered="#{not cc.attrs.editingMode}">
				<h:outputText escape="#{cc.attrs.escape}" 
					value="#{cc.attrs.value}" />
			</h:panelGroup>
		</div>
	</composite:implementation>

</ui:composition>
